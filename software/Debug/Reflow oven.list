
Reflow oven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a3c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001558  08007b50  08007b50  00008b50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090a8  080090a8  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  080090a8  080090a8  0000a0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090b0  080090b0  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090b0  080090b0  0000a0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090b4  080090b4  0000a0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080090b8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  200001dc  08009294  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08009294  0000b4d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa7f  00000000  00000000  0000b205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ef  00000000  00000000  0001ac84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  0001d378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c4a  00000000  00000000  0001e350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194af  00000000  00000000  0001ef9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122f6  00000000  00000000  00038449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ebf3  00000000  00000000  0004a73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9332  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b8  00000000  00000000  000d9378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000de730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007b34 	.word	0x08007b34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007b34 	.word	0x08007b34

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b08d      	sub	sp, #52	@ 0x34
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	4611      	mov	r1, r2
 8000b32:	461a      	mov	r2, r3
 8000b34:	4603      	mov	r3, r0
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	81bb      	strh	r3, [r7, #12]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	2b1e      	cmp	r3, #30
 8000b44:	d964      	bls.n	8000c10 <ILI9341_DrawChar+0xe8>
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db60      	blt.n	8000c10 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	3301      	adds	r3, #1
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	3302      	adds	r3, #2
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	3303      	adds	r3, #3
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	3b20      	subs	r3, #32
 8000b70:	7ffa      	ldrb	r2, [r7, #31]
 8000b72:	fb02 f303 	mul.w	r3, r2, r3
 8000b76:	3304      	adds	r3, #4
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000b7e:	7fbb      	ldrb	r3, [r7, #30]
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	7f7b      	ldrb	r3, [r7, #29]
 8000b84:	b29c      	uxth	r4, r3
 8000b86:	88f9      	ldrh	r1, [r7, #6]
 8000b88:	89b8      	ldrh	r0, [r7, #12]
 8000b8a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	4623      	mov	r3, r4
 8000b90:	f000 fc1e 	bl	80013d0 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b98:	e035      	b.n	8000c06 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
 8000b9e:	e02b      	b.n	8000bf8 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000ba0:	7f3b      	ldrb	r3, [r7, #28]
 8000ba2:	6a3a      	ldr	r2, [r7, #32]
 8000ba4:	fb03 f202 	mul.w	r2, r3, r2
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000baa:	10db      	asrs	r3, r3, #3
 8000bac:	f003 031f 	and.w	r3, r3, #31
 8000bb0:	4413      	add	r3, r2
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8000bca:	7dfa      	ldrb	r2, [r7, #23]
 8000bcc:	7dbb      	ldrb	r3, [r7, #22]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00d      	beq.n	8000bf2 <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	89bb      	ldrh	r3, [r7, #12]
 8000bdc:	4413      	add	r3, r2
 8000bde:	b298      	uxth	r0, r3
 8000be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	4413      	add	r3, r2
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8000bec:	4619      	mov	r1, r3
 8000bee:	f000 fb89 	bl	8001304 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000bf2:	6a3b      	ldr	r3, [r7, #32]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	623b      	str	r3, [r7, #32]
 8000bf8:	7fbb      	ldrb	r3, [r7, #30]
 8000bfa:	6a3a      	ldr	r2, [r7, #32]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	dbcf      	blt.n	8000ba0 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 8000c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c02:	3301      	adds	r3, #1
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c06:	7f7b      	ldrb	r3, [r7, #29]
 8000c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	dbc5      	blt.n	8000b9a <ILI9341_DrawChar+0x72>
 8000c0e:	e000      	b.n	8000c12 <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 8000c10:	bf00      	nop
			}
		}
	}
}
 8000c12:	372c      	adds	r7, #44	@ 0x2c
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd90      	pop	{r4, r7, pc}

08000c18 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	@ 0x28
 8000c1c:	af02      	add	r7, sp, #8
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	4611      	mov	r1, r2
 8000c24:	461a      	mov	r2, r3
 8000c26:	460b      	mov	r3, r1
 8000c28:	80fb      	strh	r3, [r7, #6]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	3301      	adds	r3, #1
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000c3c:	e02d      	b.n	8000c9a <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	7818      	ldrb	r0, [r3, #0]
 8000c42:	88b9      	ldrh	r1, [r7, #4]
 8000c44:	88fa      	ldrh	r2, [r7, #6]
 8000c46:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	f7ff ff69 	bl	8000b28 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	3b20      	subs	r3, #32
 8000c5c:	7ffa      	ldrb	r2, [r7, #31]
 8000c5e:	fb02 f303 	mul.w	r3, r2, r3
 8000c62:	3304      	adds	r3, #4
 8000c64:	68ba      	ldr	r2, [r7, #8]
 8000c66:	4413      	add	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000c70:	7dfb      	ldrb	r3, [r7, #23]
 8000c72:	1c9a      	adds	r2, r3, #2
 8000c74:	7fbb      	ldrb	r3, [r7, #30]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	da07      	bge.n	8000c8a <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8000c7a:	7dfb      	ldrb	r3, [r7, #23]
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	4413      	add	r3, r2
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	3302      	adds	r3, #2
 8000c86:	80fb      	strh	r3, [r7, #6]
 8000c88:	e004      	b.n	8000c94 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 8000c8a:	7fbb      	ldrb	r3, [r7, #30]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	4413      	add	r3, r2
 8000c92:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	3301      	adds	r3, #1
 8000c98:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1cd      	bne.n	8000c3e <ILI9341_DrawText+0x26>
	}
}
 8000ca2:	bf00      	nop
 8000ca4:	bf00      	nop
 8000ca6:	3720      	adds	r7, #32
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a06      	ldr	r2, [pc, #24]	@ (8000cd0 <HAL_SPI_TxCpltCallback+0x24>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d105      	bne.n	8000cc8 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc2:	4804      	ldr	r0, [pc, #16]	@ (8000cd4 <HAL_SPI_TxCpltCallback+0x28>)
 8000cc4:	f002 f8dc 	bl	8002e80 <HAL_GPIO_WritePin>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200001f8 	.word	0x200001f8
 8000cd4:	40010c00 	.word	0x40010c00

08000cd8 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000ce2:	bf00      	nop
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <ILI9341_SPI_Tx+0x30>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d1f8      	bne.n	8000ce4 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4803      	ldr	r0, [pc, #12]	@ (8000d08 <ILI9341_SPI_Tx+0x30>)
 8000cfa:	f003 f979 	bl	8003ff0 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200001f8 	.word	0x200001f8

08000d0c <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000d18:	bf00      	nop
 8000d1a:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <ILI9341_SPI_TxBuffer+0x30>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d1f8      	bne.n	8000d1a <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000d28:	887b      	ldrh	r3, [r7, #2]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	4803      	ldr	r0, [pc, #12]	@ (8000d3c <ILI9341_SPI_TxBuffer+0x30>)
 8000d30:	f003 f95e 	bl	8003ff0 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200001f8 	.word	0x200001f8

08000d40 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	4808      	ldr	r0, [pc, #32]	@ (8000d70 <ILI9341_WriteCommand+0x30>)
 8000d50:	f002 f896 	bl	8002e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d5a:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <ILI9341_WriteCommand+0x30>)
 8000d5c:	f002 f890 	bl	8002e80 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ffb8 	bl	8000cd8 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40010c00 	.word	0x40010c00

08000d74 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2101      	movs	r1, #1
 8000d82:	4808      	ldr	r0, [pc, #32]	@ (8000da4 <ILI9341_WriteData+0x30>)
 8000d84:	f002 f87c 	bl	8002e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d8e:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <ILI9341_WriteData+0x30>)
 8000d90:	f002 f876 	bl	8002e80 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff9e 	bl	8000cd8 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40010c00 	.word	0x40010c00

08000da8 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000db4:	2201      	movs	r2, #1
 8000db6:	2101      	movs	r1, #1
 8000db8:	4808      	ldr	r0, [pc, #32]	@ (8000ddc <ILI9341_WriteBuffer+0x34>)
 8000dba:	f002 f861 	bl	8002e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dc4:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <ILI9341_WriteBuffer+0x34>)
 8000dc6:	f002 f85b 	bl	8002e80 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000dca:	887b      	ldrh	r3, [r7, #2]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ff9c 	bl	8000d0c <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40010c00 	.word	0x40010c00

08000de0 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4604      	mov	r4, r0
 8000de8:	4608      	mov	r0, r1
 8000dea:	4611      	mov	r1, r2
 8000dec:	461a      	mov	r2, r3
 8000dee:	4623      	mov	r3, r4
 8000df0:	80fb      	strh	r3, [r7, #6]
 8000df2:	4603      	mov	r3, r0
 8000df4:	80bb      	strh	r3, [r7, #4]
 8000df6:	460b      	mov	r3, r1
 8000df8:	807b      	strh	r3, [r7, #2]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	0a1b      	lsrs	r3, r3, #8
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000e0e:	887b      	ldrh	r3, [r7, #2]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8000e18:	887b      	ldrh	r3, [r7, #2]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000e1e:	202a      	movs	r0, #42	@ 0x2a
 8000e20:	f7ff ff8e 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	2104      	movs	r1, #4
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ffbc 	bl	8000da8 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000e30:	88bb      	ldrh	r3, [r7, #4]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000e3a:	88bb      	ldrh	r3, [r7, #4]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000e40:	883b      	ldrh	r3, [r7, #0]
 8000e42:	0a1b      	lsrs	r3, r3, #8
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000e4a:	883b      	ldrh	r3, [r7, #0]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000e50:	202b      	movs	r0, #43	@ 0x2b
 8000e52:	f7ff ff75 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ffa3 	bl	8000da8 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000e62:	202c      	movs	r0, #44	@ 0x2c
 8000e64:	f7ff ff6c 	bl	8000d40 <ILI9341_WriteCommand>
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd90      	pop	{r4, r7, pc}

08000e70 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000e74:	2200      	movs	r2, #0
 8000e76:	2102      	movs	r1, #2
 8000e78:	480d      	ldr	r0, [pc, #52]	@ (8000eb0 <ILI9341_Reset+0x40>)
 8000e7a:	f002 f801 	bl	8002e80 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000e7e:	200a      	movs	r0, #10
 8000e80:	f001 fb5a 	bl	8002538 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000e84:	2200      	movs	r2, #0
 8000e86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e8a:	4809      	ldr	r0, [pc, #36]	@ (8000eb0 <ILI9341_Reset+0x40>)
 8000e8c:	f001 fff8 	bl	8002e80 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000e90:	200a      	movs	r0, #10
 8000e92:	f001 fb51 	bl	8002538 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000e96:	2201      	movs	r2, #1
 8000e98:	2102      	movs	r1, #2
 8000e9a:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <ILI9341_Reset+0x40>)
 8000e9c:	f001 fff0 	bl	8002e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ea6:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <ILI9341_Reset+0x40>)
 8000ea8:	f001 ffea 	bl	8002e80 <HAL_GPIO_WritePin>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40010c00 	.word	0x40010c00

08000eb4 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2102      	movs	r1, #2
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <ILI9341_Enable+0x14>)
 8000ebe:	f001 ffdf 	bl	8002e80 <HAL_GPIO_WritePin>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40010c00 	.word	0x40010c00

08000ecc <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000ed0:	f7ff fff0 	bl	8000eb4 <ILI9341_Enable>
	ILI9341_Reset();
 8000ed4:	f7ff ffcc 	bl	8000e70 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff ff31 	bl	8000d40 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f001 fb2a 	bl	8002538 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000ee4:	20cb      	movs	r0, #203	@ 0xcb
 8000ee6:	f7ff ff2b 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000eea:	2039      	movs	r0, #57	@ 0x39
 8000eec:	f7ff ff42 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000ef0:	202c      	movs	r0, #44	@ 0x2c
 8000ef2:	f7ff ff3f 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f7ff ff3c 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000efc:	2034      	movs	r0, #52	@ 0x34
 8000efe:	f7ff ff39 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000f02:	2002      	movs	r0, #2
 8000f04:	f7ff ff36 	bl	8000d74 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000f08:	20cf      	movs	r0, #207	@ 0xcf
 8000f0a:	f7ff ff19 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff ff30 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000f14:	20c1      	movs	r0, #193	@ 0xc1
 8000f16:	f7ff ff2d 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000f1a:	2030      	movs	r0, #48	@ 0x30
 8000f1c:	f7ff ff2a 	bl	8000d74 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000f20:	20e8      	movs	r0, #232	@ 0xe8
 8000f22:	f7ff ff0d 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000f26:	2085      	movs	r0, #133	@ 0x85
 8000f28:	f7ff ff24 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f7ff ff21 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000f32:	2078      	movs	r0, #120	@ 0x78
 8000f34:	f7ff ff1e 	bl	8000d74 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000f38:	20ea      	movs	r0, #234	@ 0xea
 8000f3a:	f7ff ff01 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f7ff ff18 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000f44:	2000      	movs	r0, #0
 8000f46:	f7ff ff15 	bl	8000d74 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000f4a:	20ed      	movs	r0, #237	@ 0xed
 8000f4c:	f7ff fef8 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000f50:	2064      	movs	r0, #100	@ 0x64
 8000f52:	f7ff ff0f 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000f56:	2003      	movs	r0, #3
 8000f58:	f7ff ff0c 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000f5c:	2012      	movs	r0, #18
 8000f5e:	f7ff ff09 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000f62:	2081      	movs	r0, #129	@ 0x81
 8000f64:	f7ff ff06 	bl	8000d74 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000f68:	20f7      	movs	r0, #247	@ 0xf7
 8000f6a:	f7ff fee9 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000f6e:	2020      	movs	r0, #32
 8000f70:	f7ff ff00 	bl	8000d74 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000f74:	20c0      	movs	r0, #192	@ 0xc0
 8000f76:	f7ff fee3 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000f7a:	2023      	movs	r0, #35	@ 0x23
 8000f7c:	f7ff fefa 	bl	8000d74 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000f80:	20c1      	movs	r0, #193	@ 0xc1
 8000f82:	f7ff fedd 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000f86:	2010      	movs	r0, #16
 8000f88:	f7ff fef4 	bl	8000d74 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000f8c:	20c5      	movs	r0, #197	@ 0xc5
 8000f8e:	f7ff fed7 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000f92:	203e      	movs	r0, #62	@ 0x3e
 8000f94:	f7ff feee 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000f98:	2028      	movs	r0, #40	@ 0x28
 8000f9a:	f7ff feeb 	bl	8000d74 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000f9e:	20c7      	movs	r0, #199	@ 0xc7
 8000fa0:	f7ff fece 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000fa4:	2086      	movs	r0, #134	@ 0x86
 8000fa6:	f7ff fee5 	bl	8000d74 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000faa:	2036      	movs	r0, #54	@ 0x36
 8000fac:	f7ff fec8 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000fb0:	2048      	movs	r0, #72	@ 0x48
 8000fb2:	f7ff fedf 	bl	8000d74 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000fb6:	203a      	movs	r0, #58	@ 0x3a
 8000fb8:	f7ff fec2 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000fbc:	2055      	movs	r0, #85	@ 0x55
 8000fbe:	f7ff fed9 	bl	8000d74 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000fc2:	20b1      	movs	r0, #177	@ 0xb1
 8000fc4:	f7ff febc 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff fed3 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000fce:	2018      	movs	r0, #24
 8000fd0:	f7ff fed0 	bl	8000d74 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000fd4:	20b6      	movs	r0, #182	@ 0xb6
 8000fd6:	f7ff feb3 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000fda:	2008      	movs	r0, #8
 8000fdc:	f7ff feca 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000fe0:	2082      	movs	r0, #130	@ 0x82
 8000fe2:	f7ff fec7 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000fe6:	2027      	movs	r0, #39	@ 0x27
 8000fe8:	f7ff fec4 	bl	8000d74 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000fec:	20f2      	movs	r0, #242	@ 0xf2
 8000fee:	f7ff fea7 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f7ff febe 	bl	8000d74 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000ff8:	2026      	movs	r0, #38	@ 0x26
 8000ffa:	f7ff fea1 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f7ff feb8 	bl	8000d74 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8001004:	20e0      	movs	r0, #224	@ 0xe0
 8001006:	f7ff fe9b 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 800100a:	200f      	movs	r0, #15
 800100c:	f7ff feb2 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001010:	2031      	movs	r0, #49	@ 0x31
 8001012:	f7ff feaf 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8001016:	202b      	movs	r0, #43	@ 0x2b
 8001018:	f7ff feac 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 800101c:	200c      	movs	r0, #12
 800101e:	f7ff fea9 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001022:	200e      	movs	r0, #14
 8001024:	f7ff fea6 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001028:	2008      	movs	r0, #8
 800102a:	f7ff fea3 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 800102e:	204e      	movs	r0, #78	@ 0x4e
 8001030:	f7ff fea0 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8001034:	20f1      	movs	r0, #241	@ 0xf1
 8001036:	f7ff fe9d 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 800103a:	2037      	movs	r0, #55	@ 0x37
 800103c:	f7ff fe9a 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001040:	2007      	movs	r0, #7
 8001042:	f7ff fe97 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8001046:	2010      	movs	r0, #16
 8001048:	f7ff fe94 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800104c:	2003      	movs	r0, #3
 800104e:	f7ff fe91 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001052:	200e      	movs	r0, #14
 8001054:	f7ff fe8e 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8001058:	2009      	movs	r0, #9
 800105a:	f7ff fe8b 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff fe88 	bl	8000d74 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8001064:	20e1      	movs	r0, #225	@ 0xe1
 8001066:	f7ff fe6b 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800106a:	2000      	movs	r0, #0
 800106c:	f7ff fe82 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001070:	200e      	movs	r0, #14
 8001072:	f7ff fe7f 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8001076:	2014      	movs	r0, #20
 8001078:	f7ff fe7c 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800107c:	2003      	movs	r0, #3
 800107e:	f7ff fe79 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8001082:	2011      	movs	r0, #17
 8001084:	f7ff fe76 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001088:	2007      	movs	r0, #7
 800108a:	f7ff fe73 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800108e:	2031      	movs	r0, #49	@ 0x31
 8001090:	f7ff fe70 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001094:	20c1      	movs	r0, #193	@ 0xc1
 8001096:	f7ff fe6d 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 800109a:	2048      	movs	r0, #72	@ 0x48
 800109c:	f7ff fe6a 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80010a0:	2008      	movs	r0, #8
 80010a2:	f7ff fe67 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80010a6:	200f      	movs	r0, #15
 80010a8:	f7ff fe64 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80010ac:	200c      	movs	r0, #12
 80010ae:	f7ff fe61 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80010b2:	2031      	movs	r0, #49	@ 0x31
 80010b4:	f7ff fe5e 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 80010b8:	2036      	movs	r0, #54	@ 0x36
 80010ba:	f7ff fe5b 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80010be:	200f      	movs	r0, #15
 80010c0:	f7ff fe58 	bl	8000d74 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 80010c4:	2011      	movs	r0, #17
 80010c6:	f7ff fe3b 	bl	8000d40 <ILI9341_WriteCommand>
	HAL_Delay(100);
 80010ca:	2064      	movs	r0, #100	@ 0x64
 80010cc:	f001 fa34 	bl	8002538 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 80010d0:	2029      	movs	r0, #41	@ 0x29
 80010d2:	f7ff fe35 	bl	8000d40 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f802 	bl	80010e0 <ILI9341_SetRotation>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 80010ea:	2036      	movs	r0, #54	@ 0x36
 80010ec:	f7ff fe28 	bl	8000d40 <ILI9341_WriteCommand>
	HAL_Delay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f001 fa21 	bl	8002538 <HAL_Delay>

	switch(rotation)
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d837      	bhi.n	800116c <ILI9341_SetRotation+0x8c>
 80010fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001104 <ILI9341_SetRotation+0x24>)
 80010fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001102:	bf00      	nop
 8001104:	08001115 	.word	0x08001115
 8001108:	0800112b 	.word	0x0800112b
 800110c:	08001141 	.word	0x08001141
 8001110:	08001157 	.word	0x08001157
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8001114:	2048      	movs	r0, #72	@ 0x48
 8001116:	f7ff fe2d 	bl	8000d74 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 800111a:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <ILI9341_SetRotation+0x98>)
 800111c:	22f0      	movs	r2, #240	@ 0xf0
 800111e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001120:	4b16      	ldr	r3, [pc, #88]	@ (800117c <ILI9341_SetRotation+0x9c>)
 8001122:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001126:	801a      	strh	r2, [r3, #0]
		break;
 8001128:	e021      	b.n	800116e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 800112a:	2028      	movs	r0, #40	@ 0x28
 800112c:	f7ff fe22 	bl	8000d74 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001130:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <ILI9341_SetRotation+0x98>)
 8001132:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001136:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001138:	4b10      	ldr	r3, [pc, #64]	@ (800117c <ILI9341_SetRotation+0x9c>)
 800113a:	22f0      	movs	r2, #240	@ 0xf0
 800113c:	801a      	strh	r2, [r3, #0]
		break;
 800113e:	e016      	b.n	800116e <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8001140:	2088      	movs	r0, #136	@ 0x88
 8001142:	f7ff fe17 	bl	8000d74 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8001146:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <ILI9341_SetRotation+0x98>)
 8001148:	22f0      	movs	r2, #240	@ 0xf0
 800114a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 800114c:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <ILI9341_SetRotation+0x9c>)
 800114e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001152:	801a      	strh	r2, [r3, #0]
		break;
 8001154:	e00b      	b.n	800116e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8001156:	20e8      	movs	r0, #232	@ 0xe8
 8001158:	f7ff fe0c 	bl	8000d74 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <ILI9341_SetRotation+0x98>)
 800115e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001162:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <ILI9341_SetRotation+0x9c>)
 8001166:	22f0      	movs	r2, #240	@ 0xf0
 8001168:	801a      	strh	r2, [r3, #0]
		break;
 800116a:	e000      	b.n	800116e <ILI9341_SetRotation+0x8e>
	default:
		break;
 800116c:	bf00      	nop
	}
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000002 	.word	0x20000002
 800117c:	20000000 	.word	0x20000000

08001180 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8001180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001184:	b08d      	sub	sp, #52	@ 0x34
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	6039      	str	r1, [r7, #0]
 800118c:	80fb      	strh	r3, [r7, #6]
 800118e:	466b      	mov	r3, sp
 8001190:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800119e:	d202      	bcs.n	80011a6 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011a4:	e002      	b.n	80011ac <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 80011a6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80011aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2101      	movs	r1, #1
 80011b0:	483f      	ldr	r0, [pc, #252]	@ (80012b0 <ILI9341_DrawColorBurst+0x130>)
 80011b2:	f001 fe65 	bl	8002e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011bc:	483c      	ldr	r0, [pc, #240]	@ (80012b0 <ILI9341_DrawColorBurst+0x130>)
 80011be:	f001 fe5f 	bl	8002e80 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 80011cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80011ce:	460b      	mov	r3, r1
 80011d0:	3b01      	subs	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	2300      	movs	r3, #0
 80011d6:	4688      	mov	r8, r1
 80011d8:	4699      	mov	r9, r3
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011ee:	2300      	movs	r3, #0
 80011f0:	460c      	mov	r4, r1
 80011f2:	461d      	mov	r5, r3
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	00eb      	lsls	r3, r5, #3
 80011fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001202:	00e2      	lsls	r2, r4, #3
 8001204:	1dcb      	adds	r3, r1, #7
 8001206:	08db      	lsrs	r3, r3, #3
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	ebad 0d03 	sub.w	sp, sp, r3
 800120e:	466b      	mov	r3, sp
 8001210:	3300      	adds	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001214:	2300      	movs	r3, #0
 8001216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001218:	e00e      	b.n	8001238 <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800121e:	4413      	add	r3, r2
 8001220:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001224:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8001226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001228:	3301      	adds	r3, #1
 800122a:	88fa      	ldrh	r2, [r7, #6]
 800122c:	b2d1      	uxtb	r1, r2
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001234:	3302      	adds	r3, #2
 8001236:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001238:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800123a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800123c:	429a      	cmp	r2, r3
 800123e:	d3ec      	bcc.n	800121a <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001254:	fbb3 f2f2 	udiv	r2, r3, r2
 8001258:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800125a:	fb01 f202 	mul.w	r2, r1, r2
 800125e:	1a9b      	subs	r3, r3, r2
 8001260:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d010      	beq.n	800128a <ILI9341_DrawColorBurst+0x10a>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
 800126c:	e009      	b.n	8001282 <ILI9341_DrawColorBurst+0x102>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 800126e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001270:	b29a      	uxth	r2, r3
 8001272:	230a      	movs	r3, #10
 8001274:	69b9      	ldr	r1, [r7, #24]
 8001276:	480f      	ldr	r0, [pc, #60]	@ (80012b4 <ILI9341_DrawColorBurst+0x134>)
 8001278:	f002 faae 	bl	80037d8 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800127c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127e:	3301      	adds	r3, #1
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
 8001282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	429a      	cmp	r2, r3
 8001288:	d3f1      	bcc.n	800126e <ILI9341_DrawColorBurst+0xee>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	b29a      	uxth	r2, r3
 800128e:	230a      	movs	r3, #10
 8001290:	69b9      	ldr	r1, [r7, #24]
 8001292:	4808      	ldr	r0, [pc, #32]	@ (80012b4 <ILI9341_DrawColorBurst+0x134>)
 8001294:	f002 faa0 	bl	80037d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800129e:	4804      	ldr	r0, [pc, #16]	@ (80012b0 <ILI9341_DrawColorBurst+0x130>)
 80012a0:	f001 fdee 	bl	8002e80 <HAL_GPIO_WritePin>
 80012a4:	46b5      	mov	sp, r6
}
 80012a6:	bf00      	nop
 80012a8:	3734      	adds	r7, #52	@ 0x34
 80012aa:	46bd      	mov	sp, r7
 80012ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012b0:	40010c00 	.word	0x40010c00
 80012b4:	200001f8 	.word	0x200001f8

080012b8 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <ILI9341_FillScreen+0x44>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <ILI9341_FillScreen+0x48>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	2100      	movs	r1, #0
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff fd85 	bl	8000de0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 80012d6:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <ILI9341_FillScreen+0x44>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <ILI9341_FillScreen+0x48>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff46 	bl	8001180 <ILI9341_DrawColorBurst>
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000002 	.word	0x20000002
 8001300:	20000000 	.word	0x20000000

08001304 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
 800130e:	460b      	mov	r3, r1
 8001310:	80bb      	strh	r3, [r7, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001316:	4b2c      	ldr	r3, [pc, #176]	@ (80013c8 <ILI9341_DrawPixel+0xc4>)
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	b29b      	uxth	r3, r3
 800131c:	88fa      	ldrh	r2, [r7, #6]
 800131e:	429a      	cmp	r2, r3
 8001320:	d24d      	bcs.n	80013be <ILI9341_DrawPixel+0xba>
 8001322:	4b2a      	ldr	r3, [pc, #168]	@ (80013cc <ILI9341_DrawPixel+0xc8>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	88ba      	ldrh	r2, [r7, #4]
 800132a:	429a      	cmp	r2, r3
 800132c:	d247      	bcs.n	80013be <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	b29b      	uxth	r3, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	753b      	strb	r3, [r7, #20]
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	757b      	strb	r3, [r7, #21]
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	3301      	adds	r3, #1
 8001342:	121b      	asrs	r3, r3, #8
 8001344:	b2db      	uxtb	r3, r3
 8001346:	75bb      	strb	r3, [r7, #22]
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	3301      	adds	r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8001352:	88bb      	ldrh	r3, [r7, #4]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	b29b      	uxth	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	743b      	strb	r3, [r7, #16]
 800135c:	88bb      	ldrh	r3, [r7, #4]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	747b      	strb	r3, [r7, #17]
 8001362:	88bb      	ldrh	r3, [r7, #4]
 8001364:	3301      	adds	r3, #1
 8001366:	121b      	asrs	r3, r3, #8
 8001368:	b2db      	uxtb	r3, r3
 800136a:	74bb      	strb	r3, [r7, #18]
 800136c:	88bb      	ldrh	r3, [r7, #4]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	3301      	adds	r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	b29b      	uxth	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	733b      	strb	r3, [r7, #12]
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001386:	202a      	movs	r0, #42	@ 0x2a
 8001388:	f7ff fcda 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2104      	movs	r1, #4
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fd08 	bl	8000da8 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001398:	202b      	movs	r0, #43	@ 0x2b
 800139a:	f7ff fcd1 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	2104      	movs	r1, #4
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fcff 	bl	8000da8 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 80013aa:	202c      	movs	r0, #44	@ 0x2c
 80013ac:	f7ff fcc8 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	2102      	movs	r1, #2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fcf6 	bl	8000da8 <ILI9341_WriteBuffer>
 80013bc:	e000      	b.n	80013c0 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80013be:	bf00      	nop
}
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000002 	.word	0x20000002
 80013cc:	20000000 	.word	0x20000000

080013d0 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4604      	mov	r4, r0
 80013d8:	4608      	mov	r0, r1
 80013da:	4611      	mov	r1, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	4623      	mov	r3, r4
 80013e0:	80fb      	strh	r3, [r7, #6]
 80013e2:	4603      	mov	r3, r0
 80013e4:	80bb      	strh	r3, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	807b      	strh	r3, [r7, #2]
 80013ea:	4613      	mov	r3, r2
 80013ec:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80013ee:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <ILI9341_DrawRectangle+0xb0>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	88fa      	ldrh	r2, [r7, #6]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d23d      	bcs.n	8001476 <ILI9341_DrawRectangle+0xa6>
 80013fa:	4b22      	ldr	r3, [pc, #136]	@ (8001484 <ILI9341_DrawRectangle+0xb4>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	88ba      	ldrh	r2, [r7, #4]
 8001402:	429a      	cmp	r2, r3
 8001404:	d237      	bcs.n	8001476 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8001406:	88fa      	ldrh	r2, [r7, #6]
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	4413      	add	r3, r2
 800140c:	4a1c      	ldr	r2, [pc, #112]	@ (8001480 <ILI9341_DrawRectangle+0xb0>)
 800140e:	8812      	ldrh	r2, [r2, #0]
 8001410:	b292      	uxth	r2, r2
 8001412:	4293      	cmp	r3, r2
 8001414:	dd05      	ble.n	8001422 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8001416:	4b1a      	ldr	r3, [pc, #104]	@ (8001480 <ILI9341_DrawRectangle+0xb0>)
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	b29a      	uxth	r2, r3
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8001422:	88ba      	ldrh	r2, [r7, #4]
 8001424:	883b      	ldrh	r3, [r7, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4a16      	ldr	r2, [pc, #88]	@ (8001484 <ILI9341_DrawRectangle+0xb4>)
 800142a:	8812      	ldrh	r2, [r2, #0]
 800142c:	b292      	uxth	r2, r2
 800142e:	4293      	cmp	r3, r2
 8001430:	dd05      	ble.n	800143e <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8001432:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <ILI9341_DrawRectangle+0xb4>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	b29a      	uxth	r2, r3
 8001438:	88bb      	ldrh	r3, [r7, #4]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 800143e:	88fa      	ldrh	r2, [r7, #6]
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	4413      	add	r3, r2
 8001444:	b29b      	uxth	r3, r3
 8001446:	3b01      	subs	r3, #1
 8001448:	b29c      	uxth	r4, r3
 800144a:	88ba      	ldrh	r2, [r7, #4]
 800144c:	883b      	ldrh	r3, [r7, #0]
 800144e:	4413      	add	r3, r2
 8001450:	b29b      	uxth	r3, r3
 8001452:	3b01      	subs	r3, #1
 8001454:	b29b      	uxth	r3, r3
 8001456:	88b9      	ldrh	r1, [r7, #4]
 8001458:	88f8      	ldrh	r0, [r7, #6]
 800145a:	4622      	mov	r2, r4
 800145c:	f7ff fcc0 	bl	8000de0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001460:	883b      	ldrh	r3, [r7, #0]
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	fb02 f303 	mul.w	r3, r2, r3
 8001468:	461a      	mov	r2, r3
 800146a:	8b3b      	ldrh	r3, [r7, #24]
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fe86 	bl	8001180 <ILI9341_DrawColorBurst>
 8001474:	e000      	b.n	8001478 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001476:	bf00      	nop
}
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bd90      	pop	{r4, r7, pc}
 800147e:	bf00      	nop
 8001480:	20000002 	.word	0x20000002
 8001484:	20000000 	.word	0x20000000

08001488 <MAX31855_ReadData>:
//		Temp = (data_rec[2] << 4) | (data_rec[3] >> 4);
//		return((double)Temp / 16);
//	}
//}

MAX31855_Data MAX31855_ReadData(void) {
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b089      	sub	sp, #36	@ 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
    MAX31855_Data data;
    uint8_t buffer[4] = {0};
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]

    HAL_GPIO_WritePin(MAX31855_CS_PORT, MAX31855_CS_PIN, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800149a:	4835      	ldr	r0, [pc, #212]	@ (8001570 <MAX31855_ReadData+0xe8>)
 800149c:	f001 fcf0 	bl	8002e80 <HAL_GPIO_WritePin>
    if (HAL_SPI_Receive(&hspi2, buffer, 4, MAX31855_SPI_TIMEOUT) != HAL_OK) {
 80014a0:	f107 0108 	add.w	r1, r7, #8
 80014a4:	2364      	movs	r3, #100	@ 0x64
 80014a6:	2204      	movs	r2, #4
 80014a8:	4832      	ldr	r0, [pc, #200]	@ (8001574 <MAX31855_ReadData+0xec>)
 80014aa:	f002 fad8 	bl	8003a5e <HAL_SPI_Receive>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d016      	beq.n	80014e2 <MAX31855_ReadData+0x5a>
        // Handle SPI error
        data.temperature = 0;
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
        data.internalTemperature = 0;
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
        data.fault = 0xFF;
 80014c0:	23ff      	movs	r3, #255	@ 0xff
 80014c2:	753b      	strb	r3, [r7, #20]
        HAL_GPIO_WritePin(MAX31855_CS_PORT, MAX31855_CS_PIN, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014ca:	4829      	ldr	r0, [pc, #164]	@ (8001570 <MAX31855_ReadData+0xe8>)
 80014cc:	f001 fcd8 	bl	8002e80 <HAL_GPIO_WritePin>
        return data;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	461c      	mov	r4, r3
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014e0:	e041      	b.n	8001566 <MAX31855_ReadData+0xde>
    }

    HAL_GPIO_WritePin(MAX31855_CS_PORT, MAX31855_CS_PIN, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014e8:	4821      	ldr	r0, [pc, #132]	@ (8001570 <MAX31855_ReadData+0xe8>)
 80014ea:	f001 fcc9 	bl	8002e80 <HAL_GPIO_WritePin>

    int32_t rawTemperature = ((buffer[0] << 24) | (buffer[1] << 16)) >> 18;
 80014ee:	7a3b      	ldrb	r3, [r7, #8]
 80014f0:	061a      	lsls	r2, r3, #24
 80014f2:	7a7b      	ldrb	r3, [r7, #9]
 80014f4:	041b      	lsls	r3, r3, #16
 80014f6:	4313      	orrs	r3, r2
 80014f8:	149b      	asrs	r3, r3, #18
 80014fa:	61fb      	str	r3, [r7, #28]
    int16_t rawInternalTemperature = ((buffer[2] << 8) | buffer[3]) >> 4;
 80014fc:	7abb      	ldrb	r3, [r7, #10]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	7afa      	ldrb	r2, [r7, #11]
 8001502:	4313      	orrs	r3, r2
 8001504:	111b      	asrs	r3, r3, #4
 8001506:	837b      	strh	r3, [r7, #26]

    data.temperature = rawTemperature * 0.25;
 8001508:	69f8      	ldr	r0, [r7, #28]
 800150a:	f7fe ff7b 	bl	8000404 <__aeabi_i2d>
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <MAX31855_ReadData+0xf0>)
 8001514:	f7fe ffe0 	bl	80004d8 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fab2 	bl	8000a88 <__aeabi_d2f>
 8001524:	4603      	mov	r3, r0
 8001526:	60fb      	str	r3, [r7, #12]
    data.internalTemperature = rawInternalTemperature * 0.0625;
 8001528:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ff69 	bl	8000404 <__aeabi_i2d>
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <MAX31855_ReadData+0xf4>)
 8001538:	f7fe ffce 	bl	80004d8 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	f7ff faa0 	bl	8000a88 <__aeabi_d2f>
 8001548:	4603      	mov	r3, r0
 800154a:	613b      	str	r3, [r7, #16]
    data.fault = buffer[3] & 0x07;
 800154c:	7afb      	ldrb	r3, [r7, #11]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	b2db      	uxtb	r3, r3
 8001554:	753b      	strb	r3, [r7, #20]

    return data;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	461c      	mov	r4, r3
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	3724      	adds	r7, #36	@ 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd90      	pop	{r4, r7, pc}
 800156e:	bf00      	nop
 8001570:	40010800 	.word	0x40010800
 8001574:	20000250 	.word	0x20000250
 8001578:	3fd00000 	.word	0x3fd00000
 800157c:	3fb00000 	.word	0x3fb00000

08001580 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int time_left_current_stage;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
//	Check which timer trigered the callback
	if (htim == &htim4) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a08      	ldr	r2, [pc, #32]	@ (80015ac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d108      	bne.n	80015a2 <HAL_TIM_PeriodElapsedCallback+0x22>
		if (time_left_current_stage > 0) {
 8001590:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	dd04      	ble.n	80015a2 <HAL_TIM_PeriodElapsedCallback+0x22>
			time_left_current_stage--;
 8001598:	4b05      	ldr	r3, [pc, #20]	@ (80015b0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3b01      	subs	r3, #1
 800159e:	4a04      	ldr	r2, [pc, #16]	@ (80015b0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015a0:	6013      	str	r3, [r2, #0]
		}
	}
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	200002ec 	.word	0x200002ec
 80015b0:	2000037c 	.word	0x2000037c

080015b4 <run_profile_section>:

void run_profile_section (struct s_profile_section profile_section, char section_title[7]) {
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b09d      	sub	sp, #116	@ 0x74
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	1d3c      	adds	r4, r7, #4
 80015bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015c0:	603b      	str	r3, [r7, #0]
	time_left_current_stage = profile_section.time;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	4a4a      	ldr	r2, [pc, #296]	@ (80016f0 <run_profile_section+0x13c>)
 80015c6:	6013      	str	r3, [r2, #0]
  ILI9341_FillScreen(BLACK);
 80015c8:	2000      	movs	r0, #0
 80015ca:	f7ff fe75 	bl	80012b8 <ILI9341_FillScreen>

//    	  Display the title block for the preheat screen
  char preheat_title[32];
	ILI9341_DrawRectangle(0, 0*section_height, ILI9341_SCREEN_HEIGHT, section_height, profile_section.bg_colour);
 80015ce:	4b49      	ldr	r3, [pc, #292]	@ (80016f4 <run_profile_section+0x140>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	89bb      	ldrh	r3, [r7, #12]
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	4613      	mov	r3, r2
 80015da:	22f0      	movs	r2, #240	@ 0xf0
 80015dc:	2100      	movs	r1, #0
 80015de:	2000      	movs	r0, #0
 80015e0:	f7ff fef6 	bl	80013d0 <ILI9341_DrawRectangle>
	sprintf(preheat_title, "%s - Target %dC", section_title, profile_section.temperature);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	4942      	ldr	r1, [pc, #264]	@ (80016f8 <run_profile_section+0x144>)
 80015ee:	f004 f96b 	bl	80058c8 <siprintf>
	ILI9341_DrawText (preheat_title, FONT4, 20, 0*section_height+(section_height-19)/2, profile_section.txt_colour, profile_section.bg_colour);
 80015f2:	4b40      	ldr	r3, [pc, #256]	@ (80016f4 <run_profile_section+0x140>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3b13      	subs	r3, #19
 80015f8:	0fda      	lsrs	r2, r3, #31
 80015fa:	4413      	add	r3, r2
 80015fc:	105b      	asrs	r3, r3, #1
 80015fe:	b299      	uxth	r1, r3
 8001600:	89fb      	ldrh	r3, [r7, #14]
 8001602:	89ba      	ldrh	r2, [r7, #12]
 8001604:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8001608:	9201      	str	r2, [sp, #4]
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	460b      	mov	r3, r1
 800160e:	2214      	movs	r2, #20
 8001610:	493a      	ldr	r1, [pc, #232]	@ (80016fc <run_profile_section+0x148>)
 8001612:	f7ff fb01 	bl	8000c18 <ILI9341_DrawText>

	while (time_left_current_stage > 0) {
 8001616:	e062      	b.n	80016de <run_profile_section+0x12a>
		char remaining_time_str[8];
		sprintf(remaining_time_str, "%02i:%02i", (int) floor(time_left_current_stage/60), time_left_current_stage%60);
 8001618:	4b35      	ldr	r3, [pc, #212]	@ (80016f0 <run_profile_section+0x13c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a38      	ldr	r2, [pc, #224]	@ (8001700 <run_profile_section+0x14c>)
 800161e:	fb82 1203 	smull	r1, r2, r2, r3
 8001622:	441a      	add	r2, r3
 8001624:	1152      	asrs	r2, r2, #5
 8001626:	17db      	asrs	r3, r3, #31
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe feea 	bl	8000404 <__aeabi_i2d>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	f7ff f9fe 	bl	8000a38 <__aeabi_d2iz>
 800163c:	4604      	mov	r4, r0
 800163e:	4b2c      	ldr	r3, [pc, #176]	@ (80016f0 <run_profile_section+0x13c>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4b2f      	ldr	r3, [pc, #188]	@ (8001700 <run_profile_section+0x14c>)
 8001644:	fb83 1302 	smull	r1, r3, r3, r2
 8001648:	4413      	add	r3, r2
 800164a:	1159      	asrs	r1, r3, #5
 800164c:	17d3      	asrs	r3, r2, #31
 800164e:	1ac9      	subs	r1, r1, r3
 8001650:	460b      	mov	r3, r1
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	1a5b      	subs	r3, r3, r1
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	1ad1      	subs	r1, r2, r3
 800165a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800165e:	460b      	mov	r3, r1
 8001660:	4622      	mov	r2, r4
 8001662:	4928      	ldr	r1, [pc, #160]	@ (8001704 <run_profile_section+0x150>)
 8001664:	f004 f930 	bl	80058c8 <siprintf>
		ILI9341_DrawText (remaining_time_str, FONT4, 80, 100, WHITE, BLACK);
 8001668:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800166c:	2300      	movs	r3, #0
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2364      	movs	r3, #100	@ 0x64
 8001678:	2250      	movs	r2, #80	@ 0x50
 800167a:	4920      	ldr	r1, [pc, #128]	@ (80016fc <run_profile_section+0x148>)
 800167c:	f7ff facc 	bl	8000c18 <ILI9341_DrawText>
		char temp_str [32];
		HAL_Delay(250);
 8001680:	20fa      	movs	r0, #250	@ 0xfa
 8001682:	f000 ff59 	bl	8002538 <HAL_Delay>
		MAX31855_Data data = MAX31855_ReadData();
 8001686:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fefc 	bl	8001488 <MAX31855_ReadData>
	  if (data.fault == MAX31855_NO_FAULT) {
 8001690:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10e      	bne.n	80016b6 <run_profile_section+0x102>
		  snprintf(temp_str, sizeof temp_str, "%.2f", data.temperature);
 8001698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fec4 	bl	8000428 <__aeabi_f2d>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	f107 0014 	add.w	r0, r7, #20
 80016a8:	e9cd 2300 	strd	r2, r3, [sp]
 80016ac:	4a16      	ldr	r2, [pc, #88]	@ (8001708 <run_profile_section+0x154>)
 80016ae:	2120      	movs	r1, #32
 80016b0:	f004 f8d6 	bl	8005860 <sniprintf>
 80016b4:	e007      	b.n	80016c6 <run_profile_section+0x112>
	  } else {
	  	snprintf(temp_str, sizeof temp_str, "Fault - %i", data.fault);
 80016b6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80016ba:	f107 0014 	add.w	r0, r7, #20
 80016be:	4a13      	ldr	r2, [pc, #76]	@ (800170c <run_profile_section+0x158>)
 80016c0:	2120      	movs	r1, #32
 80016c2:	f004 f8cd 	bl	8005860 <sniprintf>
		}
	  ILI9341_DrawText(temp_str, FONT4, 80, 150, WHITE, BLACK);
 80016c6:	f107 0014 	add.w	r0, r7, #20
 80016ca:	2300      	movs	r3, #0
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2396      	movs	r3, #150	@ 0x96
 80016d6:	2250      	movs	r2, #80	@ 0x50
 80016d8:	4908      	ldr	r1, [pc, #32]	@ (80016fc <run_profile_section+0x148>)
 80016da:	f7ff fa9d 	bl	8000c18 <ILI9341_DrawText>
	while (time_left_current_stage > 0) {
 80016de:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <run_profile_section+0x13c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	dc98      	bgt.n	8001618 <run_profile_section+0x64>
	}

}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	376c      	adds	r7, #108	@ 0x6c
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd90      	pop	{r4, r7, pc}
 80016f0:	2000037c 	.word	0x2000037c
 80016f4:	20000004 	.word	0x20000004
 80016f8:	08007b50 	.word	0x08007b50
 80016fc:	08007bc8 	.word	0x08007bc8
 8001700:	88888889 	.word	0x88888889
 8001704:	08007b60 	.word	0x08007b60
 8001708:	08007b6c 	.word	0x08007b6c
 800170c:	08007b74 	.word	0x08007b74

08001710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b0a6      	sub	sp, #152	@ 0x98
 8001714:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	enum e_state current_state;
	current_state = splash;
 8001716:	2300      	movs	r3, #0
 8001718:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87


	struct s_profile profile;
	profile.preheat.temperature = 180;
 800171c:	23b4      	movs	r3, #180	@ 0xb4
 800171e:	663b      	str	r3, [r7, #96]	@ 0x60
	profile.preheat.time = 20;
 8001720:	2314      	movs	r3, #20
 8001722:	667b      	str	r3, [r7, #100]	@ 0x64
	profile.preheat.bg_colour = RED;
 8001724:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001728:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
	profile.preheat.txt_colour = WHITE;
 800172c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001730:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	profile.soak.temperature = 150;
 8001734:	2396      	movs	r3, #150	@ 0x96
 8001736:	66fb      	str	r3, [r7, #108]	@ 0x6c
	profile.soak.time = 15;
 8001738:	230f      	movs	r3, #15
 800173a:	673b      	str	r3, [r7, #112]	@ 0x70
	profile.soak.bg_colour = ORANGE;
 800173c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8001740:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
	profile.soak.txt_colour = WHITE;
 8001744:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001748:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	profile.reflow.temperature = 230;
 800174c:	23e6      	movs	r3, #230	@ 0xe6
 800174e:	67bb      	str	r3, [r7, #120]	@ 0x78
	profile.reflow.time = 10;
 8001750:	230a      	movs	r3, #10
 8001752:	67fb      	str	r3, [r7, #124]	@ 0x7c
	profile.reflow.bg_colour = CYAN;
 8001754:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001758:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
	profile.reflow.txt_colour = BLACK;
 800175c:	2300      	movs	r3, #0
 800175e:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

	bool drawn = false;
 8001762:	2300      	movs	r3, #0
 8001764:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001768:	f000 fe84 	bl	8002474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800176c:	f000 fa5c 	bl	8001c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001770:	f000 fba4 	bl	8001ebc <MX_GPIO_Init>
  MX_DMA_Init();
 8001774:	f000 fb84 	bl	8001e80 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001778:	f000 fb58 	bl	8001e2c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800177c:	f000 fa9a 	bl	8001cb4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001780:	f000 face 	bl	8001d20 <MX_SPI2_Init>
  MX_TIM4_Init();
 8001784:	f000 fb04 	bl	8001d90 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	ILI9341_Init();
 8001788:	f7ff fba0 	bl	8000ecc <ILI9341_Init>

	HAL_TIM_Base_Start_IT(&htim4);
 800178c:	480f      	ldr	r0, [pc, #60]	@ (80017cc <main+0xbc>)
 800178e:	f002 febd 	bl	800450c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	// Draw the screens based on the current_state
  	if (current_state == splash) {
 8001792:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001796:	2b00      	cmp	r3, #0
 8001798:	d11e      	bne.n	80017d8 <main+0xc8>
//  		ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
  	  ILI9341_FillScreen(BLACK);
 800179a:	2000      	movs	r0, #0
 800179c:	f7ff fd8c 	bl	80012b8 <ILI9341_FillScreen>
  	  ILI9341_DrawText("Solder Reflow Oven", FONT4, 5, 110, WHITE, BLACK);
 80017a0:	2300      	movs	r3, #0
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	236e      	movs	r3, #110	@ 0x6e
 80017ac:	2205      	movs	r2, #5
 80017ae:	4908      	ldr	r1, [pc, #32]	@ (80017d0 <main+0xc0>)
 80017b0:	4808      	ldr	r0, [pc, #32]	@ (80017d4 <main+0xc4>)
 80017b2:	f7ff fa31 	bl	8000c18 <ILI9341_DrawText>
  	  HAL_Delay(1000);
 80017b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017ba:	f000 febd 	bl	8002538 <HAL_Delay>
  	  current_state = homepage;
 80017be:	2301      	movs	r3, #1
 80017c0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  	  drawn = false;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 80017ca:	e7e2      	b.n	8001792 <main+0x82>
 80017cc:	200002ec 	.word	0x200002ec
 80017d0:	08007bc8 	.word	0x08007bc8
 80017d4:	08007b80 	.word	0x08007b80
  	} else if (current_state == homepage) {
 80017d8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80017dc:	2b01      	cmp	r3, #1
 80017de:	f040 81b0 	bne.w	8001b42 <main+0x432>
//  		Show the current profile on the home screen
  		if (!drawn) {
 80017e2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80017e6:	f083 0301 	eor.w	r3, r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0d0      	beq.n	8001792 <main+0x82>
    	  ILI9341_FillScreen(BLACK);
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7ff fd61 	bl	80012b8 <ILI9341_FillScreen>
				ILI9341_DrawRectangle(0, 0*section_height, ILI9341_SCREEN_HEIGHT, section_height, profile.preheat.bg_colour);
 80017f6:	4bc1      	ldr	r3, [pc, #772]	@ (8001afc <main+0x3ec>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	4613      	mov	r3, r2
 8001804:	22f0      	movs	r2, #240	@ 0xf0
 8001806:	2100      	movs	r1, #0
 8001808:	2000      	movs	r0, #0
 800180a:	f7ff fde1 	bl	80013d0 <ILI9341_DrawRectangle>
				ILI9341_DrawRectangle(0, 1*section_height, ILI9341_SCREEN_HEIGHT, section_height, profile.soak.bg_colour);
 800180e:	4bbb      	ldr	r3, [pc, #748]	@ (8001afc <main+0x3ec>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	b299      	uxth	r1, r3
 8001814:	4bb9      	ldr	r3, [pc, #740]	@ (8001afc <main+0x3ec>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	b29a      	uxth	r2, r3
 800181a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	4613      	mov	r3, r2
 8001822:	22f0      	movs	r2, #240	@ 0xf0
 8001824:	2000      	movs	r0, #0
 8001826:	f7ff fdd3 	bl	80013d0 <ILI9341_DrawRectangle>
				ILI9341_DrawRectangle(0, 2*section_height, ILI9341_SCREEN_HEIGHT, section_height, profile.reflow.bg_colour);
 800182a:	4bb4      	ldr	r3, [pc, #720]	@ (8001afc <main+0x3ec>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	b29b      	uxth	r3, r3
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	b299      	uxth	r1, r3
 8001834:	4bb1      	ldr	r3, [pc, #708]	@ (8001afc <main+0x3ec>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	b29a      	uxth	r2, r3
 800183a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	4613      	mov	r3, r2
 8001842:	22f0      	movs	r2, #240	@ 0xf0
 8001844:	2000      	movs	r0, #0
 8001846:	f7ff fdc3 	bl	80013d0 <ILI9341_DrawRectangle>
//				Titles
				ILI9341_DrawText ("Preheat", FONT4, 20, 0*section_height+(section_height-19)/2, profile.preheat.txt_colour, profile.preheat.bg_colour);
 800184a:	4bac      	ldr	r3, [pc, #688]	@ (8001afc <main+0x3ec>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	3b13      	subs	r3, #19
 8001850:	0fda      	lsrs	r2, r3, #31
 8001852:	4413      	add	r3, r2
 8001854:	105b      	asrs	r3, r3, #1
 8001856:	b299      	uxth	r1, r3
 8001858:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800185c:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 8001860:	9201      	str	r2, [sp, #4]
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	460b      	mov	r3, r1
 8001866:	2214      	movs	r2, #20
 8001868:	49a5      	ldr	r1, [pc, #660]	@ (8001b00 <main+0x3f0>)
 800186a:	48a6      	ldr	r0, [pc, #664]	@ (8001b04 <main+0x3f4>)
 800186c:	f7ff f9d4 	bl	8000c18 <ILI9341_DrawText>
				ILI9341_DrawText ("Soak", FONT4, 20, 1*section_height+(section_height-19)/2, profile.soak.txt_colour, profile.soak.bg_colour);
 8001870:	4ba2      	ldr	r3, [pc, #648]	@ (8001afc <main+0x3ec>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	3b13      	subs	r3, #19
 8001876:	0fda      	lsrs	r2, r3, #31
 8001878:	4413      	add	r3, r2
 800187a:	105b      	asrs	r3, r3, #1
 800187c:	b29a      	uxth	r2, r3
 800187e:	4b9f      	ldr	r3, [pc, #636]	@ (8001afc <main+0x3ec>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	b29b      	uxth	r3, r3
 8001884:	4413      	add	r3, r2
 8001886:	b299      	uxth	r1, r3
 8001888:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800188c:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8001890:	9201      	str	r2, [sp, #4]
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	460b      	mov	r3, r1
 8001896:	2214      	movs	r2, #20
 8001898:	4999      	ldr	r1, [pc, #612]	@ (8001b00 <main+0x3f0>)
 800189a:	489b      	ldr	r0, [pc, #620]	@ (8001b08 <main+0x3f8>)
 800189c:	f7ff f9bc 	bl	8000c18 <ILI9341_DrawText>
				ILI9341_DrawText ("Reflow", FONT4, 20, 2*section_height+(section_height-19)/2, profile.reflow.txt_colour, profile.reflow.bg_colour);
 80018a0:	4b96      	ldr	r3, [pc, #600]	@ (8001afc <main+0x3ec>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	4b94      	ldr	r3, [pc, #592]	@ (8001afc <main+0x3ec>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	3b13      	subs	r3, #19
 80018b0:	0fd9      	lsrs	r1, r3, #31
 80018b2:	440b      	add	r3, r1
 80018b4:	105b      	asrs	r3, r3, #1
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	b299      	uxth	r1, r3
 80018bc:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80018c0:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 80018c4:	9201      	str	r2, [sp, #4]
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	460b      	mov	r3, r1
 80018ca:	2214      	movs	r2, #20
 80018cc:	498c      	ldr	r1, [pc, #560]	@ (8001b00 <main+0x3f0>)
 80018ce:	488f      	ldr	r0, [pc, #572]	@ (8001b0c <main+0x3fc>)
 80018d0:	f7ff f9a2 	bl	8000c18 <ILI9341_DrawText>

//				Temps
				char preheat_temp[5];
				sprintf(preheat_temp, "%3dC", profile.preheat.temperature);
 80018d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80018d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80018da:	498d      	ldr	r1, [pc, #564]	@ (8001b10 <main+0x400>)
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 fff3 	bl	80058c8 <siprintf>
				ILI9341_DrawText (preheat_temp, FONT4, 100, 0*section_height+(section_height-19)/2, profile.preheat.txt_colour, profile.preheat.bg_colour);
 80018e2:	4b86      	ldr	r3, [pc, #536]	@ (8001afc <main+0x3ec>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	3b13      	subs	r3, #19
 80018e8:	0fda      	lsrs	r2, r3, #31
 80018ea:	4413      	add	r3, r2
 80018ec:	105b      	asrs	r3, r3, #1
 80018ee:	b299      	uxth	r1, r3
 80018f0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80018f4:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 80018f8:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80018fc:	9201      	str	r2, [sp, #4]
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	460b      	mov	r3, r1
 8001902:	2264      	movs	r2, #100	@ 0x64
 8001904:	497e      	ldr	r1, [pc, #504]	@ (8001b00 <main+0x3f0>)
 8001906:	f7ff f987 	bl	8000c18 <ILI9341_DrawText>
				char soak_temp[5];
				sprintf(soak_temp, "%3dC", profile.soak.temperature);
 800190a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800190c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001910:	497f      	ldr	r1, [pc, #508]	@ (8001b10 <main+0x400>)
 8001912:	4618      	mov	r0, r3
 8001914:	f003 ffd8 	bl	80058c8 <siprintf>
				ILI9341_DrawText (soak_temp, FONT4, 100, 1*section_height+(section_height-19)/2, profile.soak.txt_colour, profile.soak.bg_colour);
 8001918:	4b78      	ldr	r3, [pc, #480]	@ (8001afc <main+0x3ec>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3b13      	subs	r3, #19
 800191e:	0fda      	lsrs	r2, r3, #31
 8001920:	4413      	add	r3, r2
 8001922:	105b      	asrs	r3, r3, #1
 8001924:	b29a      	uxth	r2, r3
 8001926:	4b75      	ldr	r3, [pc, #468]	@ (8001afc <main+0x3ec>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	b29b      	uxth	r3, r3
 800192c:	4413      	add	r3, r2
 800192e:	b299      	uxth	r1, r3
 8001930:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8001934:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8001938:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800193c:	9201      	str	r2, [sp, #4]
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	460b      	mov	r3, r1
 8001942:	2264      	movs	r2, #100	@ 0x64
 8001944:	496e      	ldr	r1, [pc, #440]	@ (8001b00 <main+0x3f0>)
 8001946:	f7ff f967 	bl	8000c18 <ILI9341_DrawText>
				char reflow_temp[5];
				sprintf(reflow_temp, "%3dC", profile.reflow.temperature);
 800194a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800194c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001950:	496f      	ldr	r1, [pc, #444]	@ (8001b10 <main+0x400>)
 8001952:	4618      	mov	r0, r3
 8001954:	f003 ffb8 	bl	80058c8 <siprintf>
				ILI9341_DrawText (reflow_temp, FONT4, 100, 2*section_height+(section_height-19)/2, profile.reflow.txt_colour, profile.reflow.bg_colour);
 8001958:	4b68      	ldr	r3, [pc, #416]	@ (8001afc <main+0x3ec>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	b29b      	uxth	r3, r3
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	b29a      	uxth	r2, r3
 8001962:	4b66      	ldr	r3, [pc, #408]	@ (8001afc <main+0x3ec>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3b13      	subs	r3, #19
 8001968:	0fd9      	lsrs	r1, r3, #31
 800196a:	440b      	add	r3, r1
 800196c:	105b      	asrs	r3, r3, #1
 800196e:	b29b      	uxth	r3, r3
 8001970:	4413      	add	r3, r2
 8001972:	b299      	uxth	r1, r3
 8001974:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8001978:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 800197c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8001980:	9201      	str	r2, [sp, #4]
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	460b      	mov	r3, r1
 8001986:	2264      	movs	r2, #100	@ 0x64
 8001988:	495d      	ldr	r1, [pc, #372]	@ (8001b00 <main+0x3f0>)
 800198a:	f7ff f945 	bl	8000c18 <ILI9341_DrawText>

//				Times
				char preheat_time[8];
				sprintf(preheat_time, "%02i:%02i", (int) floor(profile.preheat.time/60), profile.preheat.time%60);
 800198e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001990:	4a60      	ldr	r2, [pc, #384]	@ (8001b14 <main+0x404>)
 8001992:	fb82 1203 	smull	r1, r2, r2, r3
 8001996:	441a      	add	r2, r3
 8001998:	1152      	asrs	r2, r2, #5
 800199a:	17db      	asrs	r3, r3, #31
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fd30 	bl	8000404 <__aeabi_i2d>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f844 	bl	8000a38 <__aeabi_d2iz>
 80019b0:	4604      	mov	r4, r0
 80019b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80019b4:	4b57      	ldr	r3, [pc, #348]	@ (8001b14 <main+0x404>)
 80019b6:	fb83 1302 	smull	r1, r3, r3, r2
 80019ba:	4413      	add	r3, r2
 80019bc:	1159      	asrs	r1, r3, #5
 80019be:	17d3      	asrs	r3, r2, #31
 80019c0:	1ac9      	subs	r1, r1, r3
 80019c2:	460b      	mov	r3, r1
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	1a5b      	subs	r3, r3, r1
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	1ad1      	subs	r1, r2, r3
 80019cc:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80019d0:	460b      	mov	r3, r1
 80019d2:	4622      	mov	r2, r4
 80019d4:	4950      	ldr	r1, [pc, #320]	@ (8001b18 <main+0x408>)
 80019d6:	f003 ff77 	bl	80058c8 <siprintf>
				ILI9341_DrawText (preheat_time, FONT4, 180, 0*section_height+(section_height-19)/2, profile.preheat.txt_colour, profile.preheat.bg_colour);
 80019da:	4b48      	ldr	r3, [pc, #288]	@ (8001afc <main+0x3ec>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	3b13      	subs	r3, #19
 80019e0:	0fda      	lsrs	r2, r3, #31
 80019e2:	4413      	add	r3, r2
 80019e4:	105b      	asrs	r3, r3, #1
 80019e6:	b299      	uxth	r1, r3
 80019e8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80019ec:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 80019f0:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80019f4:	9201      	str	r2, [sp, #4]
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	460b      	mov	r3, r1
 80019fa:	22b4      	movs	r2, #180	@ 0xb4
 80019fc:	4940      	ldr	r1, [pc, #256]	@ (8001b00 <main+0x3f0>)
 80019fe:	f7ff f90b 	bl	8000c18 <ILI9341_DrawText>
				char soak_time[8];
				sprintf(soak_time, "%02i:%02i", (int) floor(profile.soak.time/60), profile.soak.time%60);
 8001a02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a04:	4a43      	ldr	r2, [pc, #268]	@ (8001b14 <main+0x404>)
 8001a06:	fb82 1203 	smull	r1, r2, r2, r3
 8001a0a:	441a      	add	r2, r3
 8001a0c:	1152      	asrs	r2, r2, #5
 8001a0e:	17db      	asrs	r3, r3, #31
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fcf6 	bl	8000404 <__aeabi_i2d>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f7ff f80a 	bl	8000a38 <__aeabi_d2iz>
 8001a24:	4604      	mov	r4, r0
 8001a26:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001a28:	4b3a      	ldr	r3, [pc, #232]	@ (8001b14 <main+0x404>)
 8001a2a:	fb83 1302 	smull	r1, r3, r3, r2
 8001a2e:	4413      	add	r3, r2
 8001a30:	1159      	asrs	r1, r3, #5
 8001a32:	17d3      	asrs	r3, r2, #31
 8001a34:	1ac9      	subs	r1, r1, r3
 8001a36:	460b      	mov	r3, r1
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	1a5b      	subs	r3, r3, r1
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	1ad1      	subs	r1, r2, r3
 8001a40:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001a44:	460b      	mov	r3, r1
 8001a46:	4622      	mov	r2, r4
 8001a48:	4933      	ldr	r1, [pc, #204]	@ (8001b18 <main+0x408>)
 8001a4a:	f003 ff3d 	bl	80058c8 <siprintf>
				ILI9341_DrawText (soak_time, FONT4, 180, 1*section_height+(section_height-19)/2, profile.soak.txt_colour, profile.soak.bg_colour);
 8001a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001afc <main+0x3ec>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	3b13      	subs	r3, #19
 8001a54:	0fda      	lsrs	r2, r3, #31
 8001a56:	4413      	add	r3, r2
 8001a58:	105b      	asrs	r3, r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	4b27      	ldr	r3, [pc, #156]	@ (8001afc <main+0x3ec>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	b299      	uxth	r1, r3
 8001a66:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8001a6a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8001a6e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001a72:	9201      	str	r2, [sp, #4]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	460b      	mov	r3, r1
 8001a78:	22b4      	movs	r2, #180	@ 0xb4
 8001a7a:	4921      	ldr	r1, [pc, #132]	@ (8001b00 <main+0x3f0>)
 8001a7c:	f7ff f8cc 	bl	8000c18 <ILI9341_DrawText>
				char reflow_time[8];
				sprintf(reflow_time, "%02i:%02i", (int) floor(profile.reflow.time/60), profile.reflow.time%60);
 8001a80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001a82:	4a24      	ldr	r2, [pc, #144]	@ (8001b14 <main+0x404>)
 8001a84:	fb82 1203 	smull	r1, r2, r2, r3
 8001a88:	441a      	add	r2, r3
 8001a8a:	1152      	asrs	r2, r2, #5
 8001a8c:	17db      	asrs	r3, r3, #31
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fcb7 	bl	8000404 <__aeabi_i2d>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f7fe ffcb 	bl	8000a38 <__aeabi_d2iz>
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b14 <main+0x404>)
 8001aa8:	fb83 1302 	smull	r1, r3, r3, r2
 8001aac:	4413      	add	r3, r2
 8001aae:	1159      	asrs	r1, r3, #5
 8001ab0:	17d3      	asrs	r3, r2, #31
 8001ab2:	1ac9      	subs	r1, r1, r3
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	011b      	lsls	r3, r3, #4
 8001ab8:	1a5b      	subs	r3, r3, r1
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	1ad1      	subs	r1, r2, r3
 8001abe:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4622      	mov	r2, r4
 8001ac6:	4914      	ldr	r1, [pc, #80]	@ (8001b18 <main+0x408>)
 8001ac8:	f003 fefe 	bl	80058c8 <siprintf>
				ILI9341_DrawText (reflow_time, FONT4, 180, 2*section_height+(section_height-19)/2, profile.reflow.txt_colour, profile.reflow.bg_colour);
 8001acc:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <main+0x3ec>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <main+0x3ec>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3b13      	subs	r3, #19
 8001adc:	0fd9      	lsrs	r1, r3, #31
 8001ade:	440b      	add	r3, r1
 8001ae0:	105b      	asrs	r3, r3, #1
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b299      	uxth	r1, r3
 8001ae8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8001aec:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 8001af0:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001af4:	9201      	str	r2, [sp, #4]
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	e010      	b.n	8001b1c <main+0x40c>
 8001afa:	bf00      	nop
 8001afc:	20000004 	.word	0x20000004
 8001b00:	08007bc8 	.word	0x08007bc8
 8001b04:	08007b94 	.word	0x08007b94
 8001b08:	08007b9c 	.word	0x08007b9c
 8001b0c:	08007ba4 	.word	0x08007ba4
 8001b10:	08007bac 	.word	0x08007bac
 8001b14:	88888889 	.word	0x88888889
 8001b18:	08007b60 	.word	0x08007b60
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	22b4      	movs	r2, #180	@ 0xb4
 8001b20:	493b      	ldr	r1, [pc, #236]	@ (8001c10 <main+0x500>)
 8001b22:	f7ff f879 	bl	8000c18 <ILI9341_DrawText>

				drawn = true;
 8001b26:	2301      	movs	r3, #1
 8001b28:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

//				Debug to switch to next screen - will use a button in due course
				HAL_Delay(2000);
 8001b2c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b30:	f000 fd02 	bl	8002538 <HAL_Delay>
				current_state = preheat;
 8001b34:	2302      	movs	r3, #2
 8001b36:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
				drawn = false;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8001b40:	e627      	b.n	8001792 <main+0x82>

  		}
  	}else if (current_state == preheat) {
 8001b42:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d109      	bne.n	8001b5e <main+0x44e>
			run_profile_section(profile.preheat, "Preheat");
 8001b4a:	4b32      	ldr	r3, [pc, #200]	@ (8001c14 <main+0x504>)
 8001b4c:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001b50:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b52:	f7ff fd2f 	bl	80015b4 <run_profile_section>
			current_state = soak;
 8001b56:	2303      	movs	r3, #3
 8001b58:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001b5c:	e619      	b.n	8001792 <main+0x82>

  	} else if (current_state == soak) {
 8001b5e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d109      	bne.n	8001b7a <main+0x46a>
			run_profile_section(profile.soak, "Soak");
 8001b66:	4b2c      	ldr	r3, [pc, #176]	@ (8001c18 <main+0x508>)
 8001b68:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001b6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b6e:	f7ff fd21 	bl	80015b4 <run_profile_section>
			current_state = reflow;
 8001b72:	2304      	movs	r3, #4
 8001b74:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001b78:	e60b      	b.n	8001792 <main+0x82>

  	} else if (current_state == reflow) {
 8001b7a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d109      	bne.n	8001b96 <main+0x486>
			run_profile_section(profile.reflow, "Reflow");
 8001b82:	4b26      	ldr	r3, [pc, #152]	@ (8001c1c <main+0x50c>)
 8001b84:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8001b88:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b8a:	f7ff fd13 	bl	80015b4 <run_profile_section>
			current_state = homepage;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001b94:	e5fd      	b.n	8001792 <main+0x82>

  	}else {
  	  ILI9341_FillScreen(WHITE);
 8001b96:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001b9a:	f7ff fb8d 	bl	80012b8 <ILI9341_FillScreen>
  	  HAL_Delay(100);
 8001b9e:	2064      	movs	r0, #100	@ 0x64
 8001ba0:	f000 fcca 	bl	8002538 <HAL_Delay>
  	  char str2 [32];
  	  MAX31855_Data data = MAX31855_ReadData();
 8001ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fc6d 	bl	8001488 <MAX31855_ReadData>
  	  if (data.fault == MAX31855_NO_FAULT) {
 8001bae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d115      	bne.n	8001be2 <main+0x4d2>
  		  snprintf(str2, sizeof str2, "Int: %.2f Ext: %.2f", data.internalTemperature, data.temperature);
 8001bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fc35 	bl	8000428 <__aeabi_f2d>
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	460d      	mov	r5, r1
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fc2f 	bl	8000428 <__aeabi_f2d>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	1d38      	adds	r0, r7, #4
 8001bd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001bd4:	e9cd 4500 	strd	r4, r5, [sp]
 8001bd8:	4a11      	ldr	r2, [pc, #68]	@ (8001c20 <main+0x510>)
 8001bda:	2120      	movs	r1, #32
 8001bdc:	f003 fe40 	bl	8005860 <sniprintf>
 8001be0:	e006      	b.n	8001bf0 <main+0x4e0>
  	  } else {
  	  	snprintf(str2, sizeof str2, "Fault - %i", data.fault);
 8001be2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001be6:	1d38      	adds	r0, r7, #4
 8001be8:	4a0e      	ldr	r2, [pc, #56]	@ (8001c24 <main+0x514>)
 8001bea:	2120      	movs	r1, #32
 8001bec:	f003 fe38 	bl	8005860 <sniprintf>
			}
  	  ILI9341_DrawText(str2, FONT4, 5, 110, BLACK, WHITE);
 8001bf0:	1d38      	adds	r0, r7, #4
 8001bf2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	236e      	movs	r3, #110	@ 0x6e
 8001bfe:	2205      	movs	r2, #5
 8001c00:	4903      	ldr	r1, [pc, #12]	@ (8001c10 <main+0x500>)
 8001c02:	f7ff f809 	bl	8000c18 <ILI9341_DrawText>
  	  HAL_Delay(500);
 8001c06:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c0a:	f000 fc95 	bl	8002538 <HAL_Delay>
  	if (current_state == splash) {
 8001c0e:	e5c0      	b.n	8001792 <main+0x82>
 8001c10:	08007bc8 	.word	0x08007bc8
 8001c14:	08007b94 	.word	0x08007b94
 8001c18:	08007b9c 	.word	0x08007b9c
 8001c1c:	08007ba4 	.word	0x08007ba4
 8001c20:	08007bb4 	.word	0x08007bb4
 8001c24:	08007b74 	.word	0x08007b74

08001c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b090      	sub	sp, #64	@ 0x40
 8001c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c2e:	f107 0318 	add.w	r3, r7, #24
 8001c32:	2228      	movs	r2, #40	@ 0x28
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 fea9 	bl	800598e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c66:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c6c:	f107 0318 	add.w	r3, r7, #24
 8001c70:	4618      	mov	r0, r3
 8001c72:	f001 f91d 	bl	8002eb0 <HAL_RCC_OscConfig>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001c7c:	f000 f980 	bl	8001f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c80:	230f      	movs	r3, #15
 8001c82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c84:	2302      	movs	r3, #2
 8001c86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2102      	movs	r1, #2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 fb8a 	bl	80033b4 <HAL_RCC_ClockConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001ca6:	f000 f96b 	bl	8001f80 <Error_Handler>
  }
}
 8001caa:	bf00      	nop
 8001cac:	3740      	adds	r7, #64	@ 0x40
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cb8:	4b17      	ldr	r3, [pc, #92]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cba:	4a18      	ldr	r2, [pc, #96]	@ (8001d1c <MX_SPI1_Init+0x68>)
 8001cbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cbe:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cc0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cc6:	4b14      	ldr	r3, [pc, #80]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ce4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001ce8:	2208      	movs	r2, #8
 8001cea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cfe:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001d00:	220a      	movs	r2, #10
 8001d02:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d04:	4804      	ldr	r0, [pc, #16]	@ (8001d18 <MX_SPI1_Init+0x64>)
 8001d06:	f001 fce3 	bl	80036d0 <HAL_SPI_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d10:	f000 f936 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	200001f8 	.word	0x200001f8
 8001d1c:	40013000 	.word	0x40013000

08001d20 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d24:	4b18      	ldr	r3, [pc, #96]	@ (8001d88 <MX_SPI2_Init+0x68>)
 8001d26:	4a19      	ldr	r2, [pc, #100]	@ (8001d8c <MX_SPI2_Init+0x6c>)
 8001d28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d2a:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <MX_SPI2_Init+0x68>)
 8001d2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001d32:	4b15      	ldr	r3, [pc, #84]	@ (8001d88 <MX_SPI2_Init+0x68>)
 8001d34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d38:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d3a:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <MX_SPI2_Init+0x68>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <MX_SPI2_Init+0x68>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d46:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <MX_SPI2_Init+0x68>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <MX_SPI2_Init+0x68>)
 8001d4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d52:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <MX_SPI2_Init+0x68>)
 8001d56:	2238      	movs	r2, #56	@ 0x38
 8001d58:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <MX_SPI2_Init+0x68>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d60:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <MX_SPI2_Init+0x68>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d66:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <MX_SPI2_Init+0x68>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <MX_SPI2_Init+0x68>)
 8001d6e:	220a      	movs	r2, #10
 8001d70:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d72:	4805      	ldr	r0, [pc, #20]	@ (8001d88 <MX_SPI2_Init+0x68>)
 8001d74:	f001 fcac 	bl	80036d0 <HAL_SPI_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001d7e:	f000 f8ff 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000250 	.word	0x20000250
 8001d8c:	40003800 	.word	0x40003800

08001d90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da4:	463b      	mov	r3, r7
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dac:	4b1d      	ldr	r3, [pc, #116]	@ (8001e24 <MX_TIM4_Init+0x94>)
 8001dae:	4a1e      	ldr	r2, [pc, #120]	@ (8001e28 <MX_TIM4_Init+0x98>)
 8001db0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8001db2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e24 <MX_TIM4_Init+0x94>)
 8001db4:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001db8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dba:	4b1a      	ldr	r3, [pc, #104]	@ (8001e24 <MX_TIM4_Init+0x94>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999-1;
 8001dc0:	4b18      	ldr	r3, [pc, #96]	@ (8001e24 <MX_TIM4_Init+0x94>)
 8001dc2:	f242 720e 	movw	r2, #9998	@ 0x270e
 8001dc6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc8:	4b16      	ldr	r3, [pc, #88]	@ (8001e24 <MX_TIM4_Init+0x94>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dce:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <MX_TIM4_Init+0x94>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001dd4:	4813      	ldr	r0, [pc, #76]	@ (8001e24 <MX_TIM4_Init+0x94>)
 8001dd6:	f002 fb49 	bl	800446c <HAL_TIM_Base_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001de0:	f000 f8ce 	bl	8001f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001de8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001dea:	f107 0308 	add.w	r3, r7, #8
 8001dee:	4619      	mov	r1, r3
 8001df0:	480c      	ldr	r0, [pc, #48]	@ (8001e24 <MX_TIM4_Init+0x94>)
 8001df2:	f002 fce5 	bl	80047c0 <HAL_TIM_ConfigClockSource>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001dfc:	f000 f8c0 	bl	8001f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e00:	2300      	movs	r3, #0
 8001e02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e08:	463b      	mov	r3, r7
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4805      	ldr	r0, [pc, #20]	@ (8001e24 <MX_TIM4_Init+0x94>)
 8001e0e:	f002 febb 	bl	8004b88 <HAL_TIMEx_MasterConfigSynchronization>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001e18:	f000 f8b2 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e1c:	bf00      	nop
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	200002ec 	.word	0x200002ec
 8001e28:	40000800 	.word	0x40000800

08001e2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <MX_USART2_UART_Init+0x4c>)
 8001e32:	4a12      	ldr	r2, [pc, #72]	@ (8001e7c <MX_USART2_UART_Init+0x50>)
 8001e34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e36:	4b10      	ldr	r3, [pc, #64]	@ (8001e78 <MX_USART2_UART_Init+0x4c>)
 8001e38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <MX_USART2_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <MX_USART2_UART_Init+0x4c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <MX_USART2_UART_Init+0x4c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e50:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <MX_USART2_UART_Init+0x4c>)
 8001e52:	220c      	movs	r2, #12
 8001e54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e56:	4b08      	ldr	r3, [pc, #32]	@ (8001e78 <MX_USART2_UART_Init+0x4c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <MX_USART2_UART_Init+0x4c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e62:	4805      	ldr	r0, [pc, #20]	@ (8001e78 <MX_USART2_UART_Init+0x4c>)
 8001e64:	f002 ff00 	bl	8004c68 <HAL_UART_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e6e:	f000 f887 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000334 	.word	0x20000334
 8001e7c:	40004400 	.word	0x40004400

08001e80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e86:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <MX_DMA_Init+0x38>)
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb8 <MX_DMA_Init+0x38>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6153      	str	r3, [r2, #20]
 8001e92:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <MX_DMA_Init+0x38>)
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	200d      	movs	r0, #13
 8001ea4:	f000 fc43 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001ea8:	200d      	movs	r0, #13
 8001eaa:	f000 fc5c 	bl	8002766 <HAL_NVIC_EnableIRQ>

}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000

08001ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec2:	f107 0310 	add.w	r3, r7, #16
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed0:	4b28      	ldr	r3, [pc, #160]	@ (8001f74 <MX_GPIO_Init+0xb8>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	4a27      	ldr	r2, [pc, #156]	@ (8001f74 <MX_GPIO_Init+0xb8>)
 8001ed6:	f043 0320 	orr.w	r3, r3, #32
 8001eda:	6193      	str	r3, [r2, #24]
 8001edc:	4b25      	ldr	r3, [pc, #148]	@ (8001f74 <MX_GPIO_Init+0xb8>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	4b22      	ldr	r3, [pc, #136]	@ (8001f74 <MX_GPIO_Init+0xb8>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a21      	ldr	r2, [pc, #132]	@ (8001f74 <MX_GPIO_Init+0xb8>)
 8001eee:	f043 0304 	orr.w	r3, r3, #4
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <MX_GPIO_Init+0xb8>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f00:	4b1c      	ldr	r3, [pc, #112]	@ (8001f74 <MX_GPIO_Init+0xb8>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	4a1b      	ldr	r2, [pc, #108]	@ (8001f74 <MX_GPIO_Init+0xb8>)
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	6193      	str	r3, [r2, #24]
 8001f0c:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <MX_GPIO_Init+0xb8>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f240 4103 	movw	r1, #1027	@ 0x403
 8001f1e:	4816      	ldr	r0, [pc, #88]	@ (8001f78 <MX_GPIO_Init+0xbc>)
 8001f20:	f000 ffae 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001f24:	2200      	movs	r2, #0
 8001f26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f2a:	4814      	ldr	r0, [pc, #80]	@ (8001f7c <MX_GPIO_Init+0xc0>)
 8001f2c:	f000 ffa8 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 8001f30:	f240 4303 	movw	r3, #1027	@ 0x403
 8001f34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f42:	f107 0310 	add.w	r3, r7, #16
 8001f46:	4619      	mov	r1, r3
 8001f48:	480b      	ldr	r0, [pc, #44]	@ (8001f78 <MX_GPIO_Init+0xbc>)
 8001f4a:	f000 fe15 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	4619      	mov	r1, r3
 8001f66:	4805      	ldr	r0, [pc, #20]	@ (8001f7c <MX_GPIO_Init+0xc0>)
 8001f68:	f000 fe06 	bl	8002b78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f6c:	bf00      	nop
 8001f6e:	3720      	adds	r7, #32
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40010c00 	.word	0x40010c00
 8001f7c:	40010800 	.word	0x40010800

08001f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f84:	b672      	cpsid	i
}
 8001f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <Error_Handler+0x8>

08001f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f92:	4b15      	ldr	r3, [pc, #84]	@ (8001fe8 <HAL_MspInit+0x5c>)
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	4a14      	ldr	r2, [pc, #80]	@ (8001fe8 <HAL_MspInit+0x5c>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6193      	str	r3, [r2, #24]
 8001f9e:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <HAL_MspInit+0x5c>)
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <HAL_MspInit+0x5c>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe8 <HAL_MspInit+0x5c>)
 8001fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb4:	61d3      	str	r3, [r2, #28]
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <HAL_MspInit+0x5c>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <HAL_MspInit+0x60>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	4a04      	ldr	r2, [pc, #16]	@ (8001fec <HAL_MspInit+0x60>)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40010000 	.word	0x40010000

08001ff0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	@ 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0318 	add.w	r3, r7, #24
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a44      	ldr	r2, [pc, #272]	@ (800211c <HAL_SPI_MspInit+0x12c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d14a      	bne.n	80020a6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002010:	4b43      	ldr	r3, [pc, #268]	@ (8002120 <HAL_SPI_MspInit+0x130>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	4a42      	ldr	r2, [pc, #264]	@ (8002120 <HAL_SPI_MspInit+0x130>)
 8002016:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800201a:	6193      	str	r3, [r2, #24]
 800201c:	4b40      	ldr	r3, [pc, #256]	@ (8002120 <HAL_SPI_MspInit+0x130>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002028:	4b3d      	ldr	r3, [pc, #244]	@ (8002120 <HAL_SPI_MspInit+0x130>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4a3c      	ldr	r2, [pc, #240]	@ (8002120 <HAL_SPI_MspInit+0x130>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	6193      	str	r3, [r2, #24]
 8002034:	4b3a      	ldr	r3, [pc, #232]	@ (8002120 <HAL_SPI_MspInit+0x130>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002040:	23a0      	movs	r3, #160	@ 0xa0
 8002042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f107 0318 	add.w	r3, r7, #24
 8002050:	4619      	mov	r1, r3
 8002052:	4834      	ldr	r0, [pc, #208]	@ (8002124 <HAL_SPI_MspInit+0x134>)
 8002054:	f000 fd90 	bl	8002b78 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002058:	4b33      	ldr	r3, [pc, #204]	@ (8002128 <HAL_SPI_MspInit+0x138>)
 800205a:	4a34      	ldr	r2, [pc, #208]	@ (800212c <HAL_SPI_MspInit+0x13c>)
 800205c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800205e:	4b32      	ldr	r3, [pc, #200]	@ (8002128 <HAL_SPI_MspInit+0x138>)
 8002060:	2210      	movs	r2, #16
 8002062:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002064:	4b30      	ldr	r3, [pc, #192]	@ (8002128 <HAL_SPI_MspInit+0x138>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800206a:	4b2f      	ldr	r3, [pc, #188]	@ (8002128 <HAL_SPI_MspInit+0x138>)
 800206c:	2280      	movs	r2, #128	@ 0x80
 800206e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002070:	4b2d      	ldr	r3, [pc, #180]	@ (8002128 <HAL_SPI_MspInit+0x138>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002076:	4b2c      	ldr	r3, [pc, #176]	@ (8002128 <HAL_SPI_MspInit+0x138>)
 8002078:	2200      	movs	r2, #0
 800207a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800207c:	4b2a      	ldr	r3, [pc, #168]	@ (8002128 <HAL_SPI_MspInit+0x138>)
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002082:	4b29      	ldr	r3, [pc, #164]	@ (8002128 <HAL_SPI_MspInit+0x138>)
 8002084:	2200      	movs	r2, #0
 8002086:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002088:	4827      	ldr	r0, [pc, #156]	@ (8002128 <HAL_SPI_MspInit+0x138>)
 800208a:	f000 fb87 	bl	800279c <HAL_DMA_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8002094:	f7ff ff74 	bl	8001f80 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a23      	ldr	r2, [pc, #140]	@ (8002128 <HAL_SPI_MspInit+0x138>)
 800209c:	649a      	str	r2, [r3, #72]	@ 0x48
 800209e:	4a22      	ldr	r2, [pc, #136]	@ (8002128 <HAL_SPI_MspInit+0x138>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020a4:	e036      	b.n	8002114 <HAL_SPI_MspInit+0x124>
  else if(hspi->Instance==SPI2)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a21      	ldr	r2, [pc, #132]	@ (8002130 <HAL_SPI_MspInit+0x140>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d131      	bne.n	8002114 <HAL_SPI_MspInit+0x124>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002120 <HAL_SPI_MspInit+0x130>)
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002120 <HAL_SPI_MspInit+0x130>)
 80020b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ba:	61d3      	str	r3, [r2, #28]
 80020bc:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <HAL_SPI_MspInit+0x130>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c8:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <HAL_SPI_MspInit+0x130>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4a14      	ldr	r2, [pc, #80]	@ (8002120 <HAL_SPI_MspInit+0x130>)
 80020ce:	f043 0308 	orr.w	r3, r3, #8
 80020d2:	6193      	str	r3, [r2, #24]
 80020d4:	4b12      	ldr	r3, [pc, #72]	@ (8002120 <HAL_SPI_MspInit+0x130>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80020e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ea:	2303      	movs	r3, #3
 80020ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ee:	f107 0318 	add.w	r3, r7, #24
 80020f2:	4619      	mov	r1, r3
 80020f4:	480f      	ldr	r0, [pc, #60]	@ (8002134 <HAL_SPI_MspInit+0x144>)
 80020f6:	f000 fd3f 	bl	8002b78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80020fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002100:	2300      	movs	r3, #0
 8002102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002108:	f107 0318 	add.w	r3, r7, #24
 800210c:	4619      	mov	r1, r3
 800210e:	4809      	ldr	r0, [pc, #36]	@ (8002134 <HAL_SPI_MspInit+0x144>)
 8002110:	f000 fd32 	bl	8002b78 <HAL_GPIO_Init>
}
 8002114:	bf00      	nop
 8002116:	3728      	adds	r7, #40	@ 0x28
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40013000 	.word	0x40013000
 8002120:	40021000 	.word	0x40021000
 8002124:	40010800 	.word	0x40010800
 8002128:	200002a8 	.word	0x200002a8
 800212c:	40020030 	.word	0x40020030
 8002130:	40003800 	.word	0x40003800
 8002134:	40010c00 	.word	0x40010c00

08002138 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0d      	ldr	r2, [pc, #52]	@ (800217c <HAL_TIM_Base_MspInit+0x44>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d113      	bne.n	8002172 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800214a:	4b0d      	ldr	r3, [pc, #52]	@ (8002180 <HAL_TIM_Base_MspInit+0x48>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	4a0c      	ldr	r2, [pc, #48]	@ (8002180 <HAL_TIM_Base_MspInit+0x48>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	61d3      	str	r3, [r2, #28]
 8002156:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <HAL_TIM_Base_MspInit+0x48>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002162:	2200      	movs	r2, #0
 8002164:	2100      	movs	r1, #0
 8002166:	201e      	movs	r0, #30
 8002168:	f000 fae1 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800216c:	201e      	movs	r0, #30
 800216e:	f000 fafa 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40000800 	.word	0x40000800
 8002180:	40021000 	.word	0x40021000

08002184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a1b      	ldr	r2, [pc, #108]	@ (800220c <HAL_UART_MspInit+0x88>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d12f      	bne.n	8002204 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002210 <HAL_UART_MspInit+0x8c>)
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	4a19      	ldr	r2, [pc, #100]	@ (8002210 <HAL_UART_MspInit+0x8c>)
 80021aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021ae:	61d3      	str	r3, [r2, #28]
 80021b0:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <HAL_UART_MspInit+0x8c>)
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021bc:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <HAL_UART_MspInit+0x8c>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	4a13      	ldr	r2, [pc, #76]	@ (8002210 <HAL_UART_MspInit+0x8c>)
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	6193      	str	r3, [r2, #24]
 80021c8:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <HAL_UART_MspInit+0x8c>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021d4:	2304      	movs	r3, #4
 80021d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021dc:	2303      	movs	r3, #3
 80021de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f107 0310 	add.w	r3, r7, #16
 80021e4:	4619      	mov	r1, r3
 80021e6:	480b      	ldr	r0, [pc, #44]	@ (8002214 <HAL_UART_MspInit+0x90>)
 80021e8:	f000 fcc6 	bl	8002b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021ec:	2308      	movs	r3, #8
 80021ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f8:	f107 0310 	add.w	r3, r7, #16
 80021fc:	4619      	mov	r1, r3
 80021fe:	4805      	ldr	r0, [pc, #20]	@ (8002214 <HAL_UART_MspInit+0x90>)
 8002200:	f000 fcba 	bl	8002b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002204:	bf00      	nop
 8002206:	3720      	adds	r7, #32
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40004400 	.word	0x40004400
 8002210:	40021000 	.word	0x40021000
 8002214:	40010800 	.word	0x40010800

08002218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <NMI_Handler+0x4>

08002220 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <HardFault_Handler+0x4>

08002228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <MemManage_Handler+0x4>

08002230 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <BusFault_Handler+0x4>

08002238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <UsageFault_Handler+0x4>

08002240 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002268:	f000 f94a 	bl	8002500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}

08002270 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002274:	4802      	ldr	r0, [pc, #8]	@ (8002280 <DMA1_Channel3_IRQHandler+0x10>)
 8002276:	f000 fb4b 	bl	8002910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	200002a8 	.word	0x200002a8

08002284 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002288:	4802      	ldr	r0, [pc, #8]	@ (8002294 <TIM4_IRQHandler+0x10>)
 800228a:	f002 f991 	bl	80045b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200002ec 	.word	0x200002ec

08002298 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return 1;
 800229c:	2301      	movs	r3, #1
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <_kill>:

int _kill(int pid, int sig)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022b0:	f003 fbc0 	bl	8005a34 <__errno>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2216      	movs	r2, #22
 80022b8:	601a      	str	r2, [r3, #0]
  return -1;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <_exit>:

void _exit (int status)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022ce:	f04f 31ff 	mov.w	r1, #4294967295
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffe7 	bl	80022a6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <_exit+0x12>

080022dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	e00a      	b.n	8002304 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022ee:	f3af 8000 	nop.w
 80022f2:	4601      	mov	r1, r0
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	60ba      	str	r2, [r7, #8]
 80022fa:	b2ca      	uxtb	r2, r1
 80022fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3301      	adds	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	dbf0      	blt.n	80022ee <_read+0x12>
  }

  return len;
 800230c:	687b      	ldr	r3, [r7, #4]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	e009      	b.n	800233c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	60ba      	str	r2, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	3301      	adds	r3, #1
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	429a      	cmp	r2, r3
 8002342:	dbf1      	blt.n	8002328 <_write+0x12>
  }
  return len;
 8002344:	687b      	ldr	r3, [r7, #4]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <_close>:

int _close(int file)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002374:	605a      	str	r2, [r3, #4]
  return 0;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr

08002382 <_isatty>:

int _isatty(int file)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800238a:	2301      	movs	r3, #1
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002396:	b480      	push	{r7}
 8002398:	b085      	sub	sp, #20
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
	...

080023b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b8:	4a14      	ldr	r2, [pc, #80]	@ (800240c <_sbrk+0x5c>)
 80023ba:	4b15      	ldr	r3, [pc, #84]	@ (8002410 <_sbrk+0x60>)
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c4:	4b13      	ldr	r3, [pc, #76]	@ (8002414 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d102      	bne.n	80023d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023cc:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <_sbrk+0x64>)
 80023ce:	4a12      	ldr	r2, [pc, #72]	@ (8002418 <_sbrk+0x68>)
 80023d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023d2:	4b10      	ldr	r3, [pc, #64]	@ (8002414 <_sbrk+0x64>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d207      	bcs.n	80023f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e0:	f003 fb28 	bl	8005a34 <__errno>
 80023e4:	4603      	mov	r3, r0
 80023e6:	220c      	movs	r2, #12
 80023e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
 80023ee:	e009      	b.n	8002404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f0:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023f6:	4b07      	ldr	r3, [pc, #28]	@ (8002414 <_sbrk+0x64>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	4a05      	ldr	r2, [pc, #20]	@ (8002414 <_sbrk+0x64>)
 8002400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002402:	68fb      	ldr	r3, [r7, #12]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20005000 	.word	0x20005000
 8002410:	00000400 	.word	0x00000400
 8002414:	20000380 	.word	0x20000380
 8002418:	200004d8 	.word	0x200004d8

0800241c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002428:	f7ff fff8 	bl	800241c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800242c:	480b      	ldr	r0, [pc, #44]	@ (800245c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800242e:	490c      	ldr	r1, [pc, #48]	@ (8002460 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002430:	4a0c      	ldr	r2, [pc, #48]	@ (8002464 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002434:	e002      	b.n	800243c <LoopCopyDataInit>

08002436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800243a:	3304      	adds	r3, #4

0800243c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800243c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800243e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002440:	d3f9      	bcc.n	8002436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002442:	4a09      	ldr	r2, [pc, #36]	@ (8002468 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002444:	4c09      	ldr	r4, [pc, #36]	@ (800246c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002448:	e001      	b.n	800244e <LoopFillZerobss>

0800244a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800244a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800244c:	3204      	adds	r2, #4

0800244e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800244e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002450:	d3fb      	bcc.n	800244a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002452:	f003 faf5 	bl	8005a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002456:	f7ff f95b 	bl	8001710 <main>
  bx lr
 800245a:	4770      	bx	lr
  ldr r0, =_sdata
 800245c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002460:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002464:	080090b8 	.word	0x080090b8
  ldr r2, =_sbss
 8002468:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800246c:	200004d4 	.word	0x200004d4

08002470 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002470:	e7fe      	b.n	8002470 <ADC1_2_IRQHandler>
	...

08002474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002478:	4b08      	ldr	r3, [pc, #32]	@ (800249c <HAL_Init+0x28>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a07      	ldr	r2, [pc, #28]	@ (800249c <HAL_Init+0x28>)
 800247e:	f043 0310 	orr.w	r3, r3, #16
 8002482:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002484:	2003      	movs	r0, #3
 8002486:	f000 f947 	bl	8002718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800248a:	200f      	movs	r0, #15
 800248c:	f000 f808 	bl	80024a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002490:	f7ff fd7c 	bl	8001f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40022000 	.word	0x40022000

080024a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024a8:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <HAL_InitTick+0x54>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b12      	ldr	r3, [pc, #72]	@ (80024f8 <HAL_InitTick+0x58>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	4619      	mov	r1, r3
 80024b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f95f 	bl	8002782 <HAL_SYSTICK_Config>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e00e      	b.n	80024ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b0f      	cmp	r3, #15
 80024d2:	d80a      	bhi.n	80024ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d4:	2200      	movs	r2, #0
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	f04f 30ff 	mov.w	r0, #4294967295
 80024dc:	f000 f927 	bl	800272e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024e0:	4a06      	ldr	r2, [pc, #24]	@ (80024fc <HAL_InitTick+0x5c>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	e000      	b.n	80024ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000008 	.word	0x20000008
 80024f8:	20000010 	.word	0x20000010
 80024fc:	2000000c 	.word	0x2000000c

08002500 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002504:	4b05      	ldr	r3, [pc, #20]	@ (800251c <HAL_IncTick+0x1c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <HAL_IncTick+0x20>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4413      	add	r3, r2
 8002510:	4a03      	ldr	r2, [pc, #12]	@ (8002520 <HAL_IncTick+0x20>)
 8002512:	6013      	str	r3, [r2, #0]
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	20000010 	.word	0x20000010
 8002520:	20000384 	.word	0x20000384

08002524 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return uwTick;
 8002528:	4b02      	ldr	r3, [pc, #8]	@ (8002534 <HAL_GetTick+0x10>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	20000384 	.word	0x20000384

08002538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002540:	f7ff fff0 	bl	8002524 <HAL_GetTick>
 8002544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d005      	beq.n	800255e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002552:	4b0a      	ldr	r3, [pc, #40]	@ (800257c <HAL_Delay+0x44>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4413      	add	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800255e:	bf00      	nop
 8002560:	f7ff ffe0 	bl	8002524 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	429a      	cmp	r2, r3
 800256e:	d8f7      	bhi.n	8002560 <HAL_Delay+0x28>
  {
  }
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000010 	.word	0x20000010

08002580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002590:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800259c:	4013      	ands	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b2:	4a04      	ldr	r2, [pc, #16]	@ (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	60d3      	str	r3, [r2, #12]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025cc:	4b04      	ldr	r3, [pc, #16]	@ (80025e0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	f003 0307 	and.w	r3, r3, #7
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	db0b      	blt.n	800260e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	4906      	ldr	r1, [pc, #24]	@ (8002618 <__NVIC_EnableIRQ+0x34>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2001      	movs	r0, #1
 8002606:	fa00 f202 	lsl.w	r2, r0, r2
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	e000e100 	.word	0xe000e100

0800261c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	6039      	str	r1, [r7, #0]
 8002626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	2b00      	cmp	r3, #0
 800262e:	db0a      	blt.n	8002646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	b2da      	uxtb	r2, r3
 8002634:	490c      	ldr	r1, [pc, #48]	@ (8002668 <__NVIC_SetPriority+0x4c>)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	0112      	lsls	r2, r2, #4
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	440b      	add	r3, r1
 8002640:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002644:	e00a      	b.n	800265c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4908      	ldr	r1, [pc, #32]	@ (800266c <__NVIC_SetPriority+0x50>)
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	3b04      	subs	r3, #4
 8002654:	0112      	lsls	r2, r2, #4
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	440b      	add	r3, r1
 800265a:	761a      	strb	r2, [r3, #24]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000e100 	.word	0xe000e100
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002670:	b480      	push	{r7}
 8002672:	b089      	sub	sp, #36	@ 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f1c3 0307 	rsb	r3, r3, #7
 800268a:	2b04      	cmp	r3, #4
 800268c:	bf28      	it	cs
 800268e:	2304      	movcs	r3, #4
 8002690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3304      	adds	r3, #4
 8002696:	2b06      	cmp	r3, #6
 8002698:	d902      	bls.n	80026a0 <NVIC_EncodePriority+0x30>
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3b03      	subs	r3, #3
 800269e:	e000      	b.n	80026a2 <NVIC_EncodePriority+0x32>
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	f04f 32ff 	mov.w	r2, #4294967295
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	401a      	ands	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	43d9      	mvns	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	4313      	orrs	r3, r2
         );
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3724      	adds	r7, #36	@ 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026e4:	d301      	bcc.n	80026ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00f      	b.n	800270a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002714 <SysTick_Config+0x40>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f2:	210f      	movs	r1, #15
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f7ff ff90 	bl	800261c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026fc:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <SysTick_Config+0x40>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002702:	4b04      	ldr	r3, [pc, #16]	@ (8002714 <SysTick_Config+0x40>)
 8002704:	2207      	movs	r2, #7
 8002706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	e000e010 	.word	0xe000e010

08002718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ff2d 	bl	8002580 <__NVIC_SetPriorityGrouping>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800272e:	b580      	push	{r7, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002740:	f7ff ff42 	bl	80025c8 <__NVIC_GetPriorityGrouping>
 8002744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	6978      	ldr	r0, [r7, #20]
 800274c:	f7ff ff90 	bl	8002670 <NVIC_EncodePriority>
 8002750:	4602      	mov	r2, r0
 8002752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff5f 	bl	800261c <__NVIC_SetPriority>
}
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff35 	bl	80025e4 <__NVIC_EnableIRQ>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff ffa2 	bl	80026d4 <SysTick_Config>
 8002790:	4603      	mov	r3, r0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e043      	b.n	800283a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	4b22      	ldr	r3, [pc, #136]	@ (8002844 <HAL_DMA_Init+0xa8>)
 80027ba:	4413      	add	r3, r2
 80027bc:	4a22      	ldr	r2, [pc, #136]	@ (8002848 <HAL_DMA_Init+0xac>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	091b      	lsrs	r3, r3, #4
 80027c4:	009a      	lsls	r2, r3, #2
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a1f      	ldr	r2, [pc, #124]	@ (800284c <HAL_DMA_Init+0xb0>)
 80027ce:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027e6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80027ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80027f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002800:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	bffdfff8 	.word	0xbffdfff8
 8002848:	cccccccd 	.word	0xcccccccd
 800284c:	40020000 	.word	0x40020000

08002850 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_DMA_Start_IT+0x20>
 800286c:	2302      	movs	r3, #2
 800286e:	e04b      	b.n	8002908 <HAL_DMA_Start_IT+0xb8>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d13a      	bne.n	80028fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0201 	bic.w	r2, r2, #1
 80028a0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f937 	bl	8002b1c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 020e 	orr.w	r2, r2, #14
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e00f      	b.n	80028e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0204 	bic.w	r2, r2, #4
 80028d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 020a 	orr.w	r2, r2, #10
 80028e6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e005      	b.n	8002906 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002902:	2302      	movs	r3, #2
 8002904:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002906:	7dfb      	ldrb	r3, [r7, #23]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	2204      	movs	r2, #4
 800292e:	409a      	lsls	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d04f      	beq.n	80029d8 <HAL_DMA_IRQHandler+0xc8>
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b00      	cmp	r3, #0
 8002940:	d04a      	beq.n	80029d8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b00      	cmp	r3, #0
 800294e:	d107      	bne.n	8002960 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0204 	bic.w	r2, r2, #4
 800295e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a66      	ldr	r2, [pc, #408]	@ (8002b00 <HAL_DMA_IRQHandler+0x1f0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d029      	beq.n	80029be <HAL_DMA_IRQHandler+0xae>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a65      	ldr	r2, [pc, #404]	@ (8002b04 <HAL_DMA_IRQHandler+0x1f4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d022      	beq.n	80029ba <HAL_DMA_IRQHandler+0xaa>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a63      	ldr	r2, [pc, #396]	@ (8002b08 <HAL_DMA_IRQHandler+0x1f8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01a      	beq.n	80029b4 <HAL_DMA_IRQHandler+0xa4>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a62      	ldr	r2, [pc, #392]	@ (8002b0c <HAL_DMA_IRQHandler+0x1fc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d012      	beq.n	80029ae <HAL_DMA_IRQHandler+0x9e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a60      	ldr	r2, [pc, #384]	@ (8002b10 <HAL_DMA_IRQHandler+0x200>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00a      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x98>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a5f      	ldr	r2, [pc, #380]	@ (8002b14 <HAL_DMA_IRQHandler+0x204>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d102      	bne.n	80029a2 <HAL_DMA_IRQHandler+0x92>
 800299c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80029a0:	e00e      	b.n	80029c0 <HAL_DMA_IRQHandler+0xb0>
 80029a2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80029a6:	e00b      	b.n	80029c0 <HAL_DMA_IRQHandler+0xb0>
 80029a8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80029ac:	e008      	b.n	80029c0 <HAL_DMA_IRQHandler+0xb0>
 80029ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029b2:	e005      	b.n	80029c0 <HAL_DMA_IRQHandler+0xb0>
 80029b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029b8:	e002      	b.n	80029c0 <HAL_DMA_IRQHandler+0xb0>
 80029ba:	2340      	movs	r3, #64	@ 0x40
 80029bc:	e000      	b.n	80029c0 <HAL_DMA_IRQHandler+0xb0>
 80029be:	2304      	movs	r3, #4
 80029c0:	4a55      	ldr	r2, [pc, #340]	@ (8002b18 <HAL_DMA_IRQHandler+0x208>)
 80029c2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 8094 	beq.w	8002af6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029d6:	e08e      	b.n	8002af6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029dc:	2202      	movs	r2, #2
 80029de:	409a      	lsls	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d056      	beq.n	8002a96 <HAL_DMA_IRQHandler+0x186>
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d051      	beq.n	8002a96 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10b      	bne.n	8002a18 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 020a 	bic.w	r2, r2, #10
 8002a0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a38      	ldr	r2, [pc, #224]	@ (8002b00 <HAL_DMA_IRQHandler+0x1f0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d029      	beq.n	8002a76 <HAL_DMA_IRQHandler+0x166>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a37      	ldr	r2, [pc, #220]	@ (8002b04 <HAL_DMA_IRQHandler+0x1f4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d022      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x162>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a35      	ldr	r2, [pc, #212]	@ (8002b08 <HAL_DMA_IRQHandler+0x1f8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d01a      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x15c>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a34      	ldr	r2, [pc, #208]	@ (8002b0c <HAL_DMA_IRQHandler+0x1fc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d012      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x156>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a32      	ldr	r2, [pc, #200]	@ (8002b10 <HAL_DMA_IRQHandler+0x200>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00a      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x150>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a31      	ldr	r2, [pc, #196]	@ (8002b14 <HAL_DMA_IRQHandler+0x204>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d102      	bne.n	8002a5a <HAL_DMA_IRQHandler+0x14a>
 8002a54:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a58:	e00e      	b.n	8002a78 <HAL_DMA_IRQHandler+0x168>
 8002a5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a5e:	e00b      	b.n	8002a78 <HAL_DMA_IRQHandler+0x168>
 8002a60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a64:	e008      	b.n	8002a78 <HAL_DMA_IRQHandler+0x168>
 8002a66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a6a:	e005      	b.n	8002a78 <HAL_DMA_IRQHandler+0x168>
 8002a6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a70:	e002      	b.n	8002a78 <HAL_DMA_IRQHandler+0x168>
 8002a72:	2320      	movs	r3, #32
 8002a74:	e000      	b.n	8002a78 <HAL_DMA_IRQHandler+0x168>
 8002a76:	2302      	movs	r3, #2
 8002a78:	4a27      	ldr	r2, [pc, #156]	@ (8002b18 <HAL_DMA_IRQHandler+0x208>)
 8002a7a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d034      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a94:	e02f      	b.n	8002af6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	2208      	movs	r2, #8
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d028      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x1e8>
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d023      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 020e 	bic.w	r2, r2, #14
 8002abe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac8:	2101      	movs	r1, #1
 8002aca:	fa01 f202 	lsl.w	r2, r1, r2
 8002ace:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d004      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	4798      	blx	r3
    }
  }
  return;
 8002af6:	bf00      	nop
 8002af8:	bf00      	nop
}
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40020008 	.word	0x40020008
 8002b04:	4002001c 	.word	0x4002001c
 8002b08:	40020030 	.word	0x40020030
 8002b0c:	40020044 	.word	0x40020044
 8002b10:	40020058 	.word	0x40020058
 8002b14:	4002006c 	.word	0x4002006c
 8002b18:	40020000 	.word	0x40020000

08002b1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b32:	2101      	movs	r1, #1
 8002b34:	fa01 f202 	lsl.w	r2, r1, r2
 8002b38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b10      	cmp	r3, #16
 8002b48:	d108      	bne.n	8002b5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b5a:	e007      	b.n	8002b6c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	60da      	str	r2, [r3, #12]
}
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
	...

08002b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b08b      	sub	sp, #44	@ 0x2c
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b82:	2300      	movs	r3, #0
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b86:	2300      	movs	r3, #0
 8002b88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b8a:	e169      	b.n	8002e60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69fa      	ldr	r2, [r7, #28]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	f040 8158 	bne.w	8002e5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4a9a      	ldr	r2, [pc, #616]	@ (8002e18 <HAL_GPIO_Init+0x2a0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d05e      	beq.n	8002c72 <HAL_GPIO_Init+0xfa>
 8002bb4:	4a98      	ldr	r2, [pc, #608]	@ (8002e18 <HAL_GPIO_Init+0x2a0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d875      	bhi.n	8002ca6 <HAL_GPIO_Init+0x12e>
 8002bba:	4a98      	ldr	r2, [pc, #608]	@ (8002e1c <HAL_GPIO_Init+0x2a4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d058      	beq.n	8002c72 <HAL_GPIO_Init+0xfa>
 8002bc0:	4a96      	ldr	r2, [pc, #600]	@ (8002e1c <HAL_GPIO_Init+0x2a4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d86f      	bhi.n	8002ca6 <HAL_GPIO_Init+0x12e>
 8002bc6:	4a96      	ldr	r2, [pc, #600]	@ (8002e20 <HAL_GPIO_Init+0x2a8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d052      	beq.n	8002c72 <HAL_GPIO_Init+0xfa>
 8002bcc:	4a94      	ldr	r2, [pc, #592]	@ (8002e20 <HAL_GPIO_Init+0x2a8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d869      	bhi.n	8002ca6 <HAL_GPIO_Init+0x12e>
 8002bd2:	4a94      	ldr	r2, [pc, #592]	@ (8002e24 <HAL_GPIO_Init+0x2ac>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d04c      	beq.n	8002c72 <HAL_GPIO_Init+0xfa>
 8002bd8:	4a92      	ldr	r2, [pc, #584]	@ (8002e24 <HAL_GPIO_Init+0x2ac>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d863      	bhi.n	8002ca6 <HAL_GPIO_Init+0x12e>
 8002bde:	4a92      	ldr	r2, [pc, #584]	@ (8002e28 <HAL_GPIO_Init+0x2b0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d046      	beq.n	8002c72 <HAL_GPIO_Init+0xfa>
 8002be4:	4a90      	ldr	r2, [pc, #576]	@ (8002e28 <HAL_GPIO_Init+0x2b0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d85d      	bhi.n	8002ca6 <HAL_GPIO_Init+0x12e>
 8002bea:	2b12      	cmp	r3, #18
 8002bec:	d82a      	bhi.n	8002c44 <HAL_GPIO_Init+0xcc>
 8002bee:	2b12      	cmp	r3, #18
 8002bf0:	d859      	bhi.n	8002ca6 <HAL_GPIO_Init+0x12e>
 8002bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf8 <HAL_GPIO_Init+0x80>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c73 	.word	0x08002c73
 8002bfc:	08002c4d 	.word	0x08002c4d
 8002c00:	08002c5f 	.word	0x08002c5f
 8002c04:	08002ca1 	.word	0x08002ca1
 8002c08:	08002ca7 	.word	0x08002ca7
 8002c0c:	08002ca7 	.word	0x08002ca7
 8002c10:	08002ca7 	.word	0x08002ca7
 8002c14:	08002ca7 	.word	0x08002ca7
 8002c18:	08002ca7 	.word	0x08002ca7
 8002c1c:	08002ca7 	.word	0x08002ca7
 8002c20:	08002ca7 	.word	0x08002ca7
 8002c24:	08002ca7 	.word	0x08002ca7
 8002c28:	08002ca7 	.word	0x08002ca7
 8002c2c:	08002ca7 	.word	0x08002ca7
 8002c30:	08002ca7 	.word	0x08002ca7
 8002c34:	08002ca7 	.word	0x08002ca7
 8002c38:	08002ca7 	.word	0x08002ca7
 8002c3c:	08002c55 	.word	0x08002c55
 8002c40:	08002c69 	.word	0x08002c69
 8002c44:	4a79      	ldr	r2, [pc, #484]	@ (8002e2c <HAL_GPIO_Init+0x2b4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c4a:	e02c      	b.n	8002ca6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	623b      	str	r3, [r7, #32]
          break;
 8002c52:	e029      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	623b      	str	r3, [r7, #32]
          break;
 8002c5c:	e024      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	3308      	adds	r3, #8
 8002c64:	623b      	str	r3, [r7, #32]
          break;
 8002c66:	e01f      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	330c      	adds	r3, #12
 8002c6e:	623b      	str	r3, [r7, #32]
          break;
 8002c70:	e01a      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d102      	bne.n	8002c80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	623b      	str	r3, [r7, #32]
          break;
 8002c7e:	e013      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d105      	bne.n	8002c94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c88:	2308      	movs	r3, #8
 8002c8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	611a      	str	r2, [r3, #16]
          break;
 8002c92:	e009      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c94:	2308      	movs	r3, #8
 8002c96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	615a      	str	r2, [r3, #20]
          break;
 8002c9e:	e003      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	623b      	str	r3, [r7, #32]
          break;
 8002ca4:	e000      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
          break;
 8002ca6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2bff      	cmp	r3, #255	@ 0xff
 8002cac:	d801      	bhi.n	8002cb2 <HAL_GPIO_Init+0x13a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	e001      	b.n	8002cb6 <HAL_GPIO_Init+0x13e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2bff      	cmp	r3, #255	@ 0xff
 8002cbc:	d802      	bhi.n	8002cc4 <HAL_GPIO_Init+0x14c>
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	e002      	b.n	8002cca <HAL_GPIO_Init+0x152>
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc6:	3b08      	subs	r3, #8
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	210f      	movs	r1, #15
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	401a      	ands	r2, r3
 8002cdc:	6a39      	ldr	r1, [r7, #32]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 80b1 	beq.w	8002e5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cf8:	4b4d      	ldr	r3, [pc, #308]	@ (8002e30 <HAL_GPIO_Init+0x2b8>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	4a4c      	ldr	r2, [pc, #304]	@ (8002e30 <HAL_GPIO_Init+0x2b8>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	6193      	str	r3, [r2, #24]
 8002d04:	4b4a      	ldr	r3, [pc, #296]	@ (8002e30 <HAL_GPIO_Init+0x2b8>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d10:	4a48      	ldr	r2, [pc, #288]	@ (8002e34 <HAL_GPIO_Init+0x2bc>)
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	089b      	lsrs	r3, r3, #2
 8002d16:	3302      	adds	r3, #2
 8002d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	220f      	movs	r2, #15
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4013      	ands	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a40      	ldr	r2, [pc, #256]	@ (8002e38 <HAL_GPIO_Init+0x2c0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d013      	beq.n	8002d64 <HAL_GPIO_Init+0x1ec>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a3f      	ldr	r2, [pc, #252]	@ (8002e3c <HAL_GPIO_Init+0x2c4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00d      	beq.n	8002d60 <HAL_GPIO_Init+0x1e8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a3e      	ldr	r2, [pc, #248]	@ (8002e40 <HAL_GPIO_Init+0x2c8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d007      	beq.n	8002d5c <HAL_GPIO_Init+0x1e4>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a3d      	ldr	r2, [pc, #244]	@ (8002e44 <HAL_GPIO_Init+0x2cc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d101      	bne.n	8002d58 <HAL_GPIO_Init+0x1e0>
 8002d54:	2303      	movs	r3, #3
 8002d56:	e006      	b.n	8002d66 <HAL_GPIO_Init+0x1ee>
 8002d58:	2304      	movs	r3, #4
 8002d5a:	e004      	b.n	8002d66 <HAL_GPIO_Init+0x1ee>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e002      	b.n	8002d66 <HAL_GPIO_Init+0x1ee>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <HAL_GPIO_Init+0x1ee>
 8002d64:	2300      	movs	r3, #0
 8002d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d68:	f002 0203 	and.w	r2, r2, #3
 8002d6c:	0092      	lsls	r2, r2, #2
 8002d6e:	4093      	lsls	r3, r2
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d76:	492f      	ldr	r1, [pc, #188]	@ (8002e34 <HAL_GPIO_Init+0x2bc>)
 8002d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7a:	089b      	lsrs	r3, r3, #2
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d006      	beq.n	8002d9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d90:	4b2d      	ldr	r3, [pc, #180]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	492c      	ldr	r1, [pc, #176]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	608b      	str	r3, [r1, #8]
 8002d9c:	e006      	b.n	8002dac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	4928      	ldr	r1, [pc, #160]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d006      	beq.n	8002dc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002db8:	4b23      	ldr	r3, [pc, #140]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	4922      	ldr	r1, [pc, #136]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60cb      	str	r3, [r1, #12]
 8002dc4:	e006      	b.n	8002dd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dc6:	4b20      	ldr	r3, [pc, #128]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	491e      	ldr	r1, [pc, #120]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d006      	beq.n	8002dee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002de0:	4b19      	ldr	r3, [pc, #100]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	4918      	ldr	r1, [pc, #96]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
 8002dec:	e006      	b.n	8002dfc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dee:	4b16      	ldr	r3, [pc, #88]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	43db      	mvns	r3, r3
 8002df6:	4914      	ldr	r1, [pc, #80]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d021      	beq.n	8002e4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e08:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	490e      	ldr	r1, [pc, #56]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	600b      	str	r3, [r1, #0]
 8002e14:	e021      	b.n	8002e5a <HAL_GPIO_Init+0x2e2>
 8002e16:	bf00      	nop
 8002e18:	10320000 	.word	0x10320000
 8002e1c:	10310000 	.word	0x10310000
 8002e20:	10220000 	.word	0x10220000
 8002e24:	10210000 	.word	0x10210000
 8002e28:	10120000 	.word	0x10120000
 8002e2c:	10110000 	.word	0x10110000
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40010000 	.word	0x40010000
 8002e38:	40010800 	.word	0x40010800
 8002e3c:	40010c00 	.word	0x40010c00
 8002e40:	40011000 	.word	0x40011000
 8002e44:	40011400 	.word	0x40011400
 8002e48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <HAL_GPIO_Init+0x304>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	4909      	ldr	r1, [pc, #36]	@ (8002e7c <HAL_GPIO_Init+0x304>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f47f ae8e 	bne.w	8002b8c <HAL_GPIO_Init+0x14>
  }
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	372c      	adds	r7, #44	@ 0x2c
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr
 8002e7c:	40010400 	.word	0x40010400

08002e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	807b      	strh	r3, [r7, #2]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e90:	787b      	ldrb	r3, [r7, #1]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e96:	887a      	ldrh	r2, [r7, #2]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e9c:	e003      	b.n	8002ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e9e:	887b      	ldrh	r3, [r7, #2]
 8002ea0:	041a      	lsls	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	611a      	str	r2, [r3, #16]
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e272      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8087 	beq.w	8002fde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ed0:	4b92      	ldr	r3, [pc, #584]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d00c      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002edc:	4b8f      	ldr	r3, [pc, #572]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d112      	bne.n	8002f0e <HAL_RCC_OscConfig+0x5e>
 8002ee8:	4b8c      	ldr	r3, [pc, #560]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef4:	d10b      	bne.n	8002f0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef6:	4b89      	ldr	r3, [pc, #548]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d06c      	beq.n	8002fdc <HAL_RCC_OscConfig+0x12c>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d168      	bne.n	8002fdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e24c      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f16:	d106      	bne.n	8002f26 <HAL_RCC_OscConfig+0x76>
 8002f18:	4b80      	ldr	r3, [pc, #512]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a7f      	ldr	r2, [pc, #508]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	e02e      	b.n	8002f84 <HAL_RCC_OscConfig+0xd4>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x98>
 8002f2e:	4b7b      	ldr	r3, [pc, #492]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a7a      	ldr	r2, [pc, #488]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4b78      	ldr	r3, [pc, #480]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a77      	ldr	r2, [pc, #476]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	e01d      	b.n	8002f84 <HAL_RCC_OscConfig+0xd4>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCC_OscConfig+0xbc>
 8002f52:	4b72      	ldr	r3, [pc, #456]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a71      	ldr	r2, [pc, #452]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	4b6f      	ldr	r3, [pc, #444]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a6e      	ldr	r2, [pc, #440]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e00b      	b.n	8002f84 <HAL_RCC_OscConfig+0xd4>
 8002f6c:	4b6b      	ldr	r3, [pc, #428]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a6a      	ldr	r2, [pc, #424]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	4b68      	ldr	r3, [pc, #416]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a67      	ldr	r2, [pc, #412]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d013      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8c:	f7ff faca 	bl	8002524 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f94:	f7ff fac6 	bl	8002524 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	@ 0x64
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e200      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa6:	4b5d      	ldr	r3, [pc, #372]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCC_OscConfig+0xe4>
 8002fb2:	e014      	b.n	8002fde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7ff fab6 	bl	8002524 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fbc:	f7ff fab2 	bl	8002524 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	@ 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e1ec      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fce:	4b53      	ldr	r3, [pc, #332]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x10c>
 8002fda:	e000      	b.n	8002fde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d063      	beq.n	80030b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fea:	4b4c      	ldr	r3, [pc, #304]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00b      	beq.n	800300e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ff6:	4b49      	ldr	r3, [pc, #292]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d11c      	bne.n	800303c <HAL_RCC_OscConfig+0x18c>
 8003002:	4b46      	ldr	r3, [pc, #280]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d116      	bne.n	800303c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300e:	4b43      	ldr	r3, [pc, #268]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <HAL_RCC_OscConfig+0x176>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d001      	beq.n	8003026 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e1c0      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003026:	4b3d      	ldr	r3, [pc, #244]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4939      	ldr	r1, [pc, #228]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8003036:	4313      	orrs	r3, r2
 8003038:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303a:	e03a      	b.n	80030b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d020      	beq.n	8003086 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003044:	4b36      	ldr	r3, [pc, #216]	@ (8003120 <HAL_RCC_OscConfig+0x270>)
 8003046:	2201      	movs	r2, #1
 8003048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7ff fa6b 	bl	8002524 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003052:	f7ff fa67 	bl	8002524 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e1a1      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003064:	4b2d      	ldr	r3, [pc, #180]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0f0      	beq.n	8003052 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003070:	4b2a      	ldr	r3, [pc, #168]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	4927      	ldr	r1, [pc, #156]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8003080:	4313      	orrs	r3, r2
 8003082:	600b      	str	r3, [r1, #0]
 8003084:	e015      	b.n	80030b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003086:	4b26      	ldr	r3, [pc, #152]	@ (8003120 <HAL_RCC_OscConfig+0x270>)
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7ff fa4a 	bl	8002524 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003094:	f7ff fa46 	bl	8002524 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e180      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a6:	4b1d      	ldr	r3, [pc, #116]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d03a      	beq.n	8003134 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d019      	beq.n	80030fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c6:	4b17      	ldr	r3, [pc, #92]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030cc:	f7ff fa2a 	bl	8002524 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d4:	f7ff fa26 	bl	8002524 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e160      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e6:	4b0d      	ldr	r3, [pc, #52]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030f2:	2001      	movs	r0, #1
 80030f4:	f000 face 	bl	8003694 <RCC_Delay>
 80030f8:	e01c      	b.n	8003134 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003100:	f7ff fa10 	bl	8002524 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003106:	e00f      	b.n	8003128 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003108:	f7ff fa0c 	bl	8002524 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d908      	bls.n	8003128 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e146      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000
 8003120:	42420000 	.word	0x42420000
 8003124:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003128:	4b92      	ldr	r3, [pc, #584]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 800312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1e9      	bne.n	8003108 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 80a6 	beq.w	800328e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003142:	2300      	movs	r3, #0
 8003144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003146:	4b8b      	ldr	r3, [pc, #556]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10d      	bne.n	800316e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003152:	4b88      	ldr	r3, [pc, #544]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	4a87      	ldr	r2, [pc, #540]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800315c:	61d3      	str	r3, [r2, #28]
 800315e:	4b85      	ldr	r3, [pc, #532]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316a:	2301      	movs	r3, #1
 800316c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316e:	4b82      	ldr	r3, [pc, #520]	@ (8003378 <HAL_RCC_OscConfig+0x4c8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d118      	bne.n	80031ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800317a:	4b7f      	ldr	r3, [pc, #508]	@ (8003378 <HAL_RCC_OscConfig+0x4c8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a7e      	ldr	r2, [pc, #504]	@ (8003378 <HAL_RCC_OscConfig+0x4c8>)
 8003180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003186:	f7ff f9cd 	bl	8002524 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318e:	f7ff f9c9 	bl	8002524 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b64      	cmp	r3, #100	@ 0x64
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e103      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a0:	4b75      	ldr	r3, [pc, #468]	@ (8003378 <HAL_RCC_OscConfig+0x4c8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d106      	bne.n	80031c2 <HAL_RCC_OscConfig+0x312>
 80031b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4a6e      	ldr	r2, [pc, #440]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6213      	str	r3, [r2, #32]
 80031c0:	e02d      	b.n	800321e <HAL_RCC_OscConfig+0x36e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x334>
 80031ca:	4b6a      	ldr	r3, [pc, #424]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	4a69      	ldr	r2, [pc, #420]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	6213      	str	r3, [r2, #32]
 80031d6:	4b67      	ldr	r3, [pc, #412]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	4a66      	ldr	r2, [pc, #408]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	f023 0304 	bic.w	r3, r3, #4
 80031e0:	6213      	str	r3, [r2, #32]
 80031e2:	e01c      	b.n	800321e <HAL_RCC_OscConfig+0x36e>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b05      	cmp	r3, #5
 80031ea:	d10c      	bne.n	8003206 <HAL_RCC_OscConfig+0x356>
 80031ec:	4b61      	ldr	r3, [pc, #388]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	4a60      	ldr	r2, [pc, #384]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	f043 0304 	orr.w	r3, r3, #4
 80031f6:	6213      	str	r3, [r2, #32]
 80031f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4a5d      	ldr	r2, [pc, #372]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	6213      	str	r3, [r2, #32]
 8003204:	e00b      	b.n	800321e <HAL_RCC_OscConfig+0x36e>
 8003206:	4b5b      	ldr	r3, [pc, #364]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	4a5a      	ldr	r2, [pc, #360]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	6213      	str	r3, [r2, #32]
 8003212:	4b58      	ldr	r3, [pc, #352]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	4a57      	ldr	r2, [pc, #348]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	f023 0304 	bic.w	r3, r3, #4
 800321c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d015      	beq.n	8003252 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003226:	f7ff f97d 	bl	8002524 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322c:	e00a      	b.n	8003244 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322e:	f7ff f979 	bl	8002524 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323c:	4293      	cmp	r3, r2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e0b1      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003244:	4b4b      	ldr	r3, [pc, #300]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0ee      	beq.n	800322e <HAL_RCC_OscConfig+0x37e>
 8003250:	e014      	b.n	800327c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003252:	f7ff f967 	bl	8002524 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003258:	e00a      	b.n	8003270 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325a:	f7ff f963 	bl	8002524 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e09b      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003270:	4b40      	ldr	r3, [pc, #256]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1ee      	bne.n	800325a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800327c:	7dfb      	ldrb	r3, [r7, #23]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d105      	bne.n	800328e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003282:	4b3c      	ldr	r3, [pc, #240]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	4a3b      	ldr	r2, [pc, #236]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800328c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8087 	beq.w	80033a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003298:	4b36      	ldr	r3, [pc, #216]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d061      	beq.n	8003368 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d146      	bne.n	800333a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ac:	4b33      	ldr	r3, [pc, #204]	@ (800337c <HAL_RCC_OscConfig+0x4cc>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b2:	f7ff f937 	bl	8002524 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ba:	f7ff f933 	bl	8002524 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e06d      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032cc:	4b29      	ldr	r3, [pc, #164]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f0      	bne.n	80032ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032e0:	d108      	bne.n	80032f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032e2:	4b24      	ldr	r3, [pc, #144]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	4921      	ldr	r1, [pc, #132]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a19      	ldr	r1, [r3, #32]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	430b      	orrs	r3, r1
 8003306:	491b      	ldr	r1, [pc, #108]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003308:	4313      	orrs	r3, r2
 800330a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800330c:	4b1b      	ldr	r3, [pc, #108]	@ (800337c <HAL_RCC_OscConfig+0x4cc>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003312:	f7ff f907 	bl	8002524 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331a:	f7ff f903 	bl	8002524 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e03d      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800332c:	4b11      	ldr	r3, [pc, #68]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0x46a>
 8003338:	e035      	b.n	80033a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333a:	4b10      	ldr	r3, [pc, #64]	@ (800337c <HAL_RCC_OscConfig+0x4cc>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7ff f8f0 	bl	8002524 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003348:	f7ff f8ec 	bl	8002524 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e026      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800335a:	4b06      	ldr	r3, [pc, #24]	@ (8003374 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x498>
 8003366:	e01e      	b.n	80033a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d107      	bne.n	8003380 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e019      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
 8003374:	40021000 	.word	0x40021000
 8003378:	40007000 	.word	0x40007000
 800337c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003380:	4b0b      	ldr	r3, [pc, #44]	@ (80033b0 <HAL_RCC_OscConfig+0x500>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	429a      	cmp	r2, r3
 8003392:	d106      	bne.n	80033a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d001      	beq.n	80033a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40021000 	.word	0x40021000

080033b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0d0      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d910      	bls.n	80033f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b67      	ldr	r3, [pc, #412]	@ (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 0207 	bic.w	r2, r3, #7
 80033de:	4965      	ldr	r1, [pc, #404]	@ (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b63      	ldr	r3, [pc, #396]	@ (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0b8      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d020      	beq.n	8003446 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003410:	4b59      	ldr	r3, [pc, #356]	@ (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4a58      	ldr	r2, [pc, #352]	@ (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800341a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003428:	4b53      	ldr	r3, [pc, #332]	@ (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4a52      	ldr	r2, [pc, #328]	@ (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003432:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003434:	4b50      	ldr	r3, [pc, #320]	@ (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	494d      	ldr	r1, [pc, #308]	@ (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003442:	4313      	orrs	r3, r2
 8003444:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d040      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	4b47      	ldr	r3, [pc, #284]	@ (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d115      	bne.n	8003492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e07f      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003472:	4b41      	ldr	r3, [pc, #260]	@ (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e073      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003482:	4b3d      	ldr	r3, [pc, #244]	@ (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e06b      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003492:	4b39      	ldr	r3, [pc, #228]	@ (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f023 0203 	bic.w	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4936      	ldr	r1, [pc, #216]	@ (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a4:	f7ff f83e 	bl	8002524 <HAL_GetTick>
 80034a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ac:	f7ff f83a 	bl	8002524 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e053      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 020c 	and.w	r2, r3, #12
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d1eb      	bne.n	80034ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034d4:	4b27      	ldr	r3, [pc, #156]	@ (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d210      	bcs.n	8003504 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b24      	ldr	r3, [pc, #144]	@ (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 0207 	bic.w	r2, r3, #7
 80034ea:	4922      	ldr	r1, [pc, #136]	@ (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b20      	ldr	r3, [pc, #128]	@ (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e032      	b.n	800356a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003510:	4b19      	ldr	r3, [pc, #100]	@ (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4916      	ldr	r1, [pc, #88]	@ (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 800351e:	4313      	orrs	r3, r2
 8003520:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800352e:	4b12      	ldr	r3, [pc, #72]	@ (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	490e      	ldr	r1, [pc, #56]	@ (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003542:	f000 f821 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8003546:	4602      	mov	r2, r0
 8003548:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	490a      	ldr	r1, [pc, #40]	@ (800357c <HAL_RCC_ClockConfig+0x1c8>)
 8003554:	5ccb      	ldrb	r3, [r1, r3]
 8003556:	fa22 f303 	lsr.w	r3, r2, r3
 800355a:	4a09      	ldr	r2, [pc, #36]	@ (8003580 <HAL_RCC_ClockConfig+0x1cc>)
 800355c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800355e:	4b09      	ldr	r3, [pc, #36]	@ (8003584 <HAL_RCC_ClockConfig+0x1d0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe ff9c 	bl	80024a0 <HAL_InitTick>

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40022000 	.word	0x40022000
 8003578:	40021000 	.word	0x40021000
 800357c:	08008d0c 	.word	0x08008d0c
 8003580:	20000008 	.word	0x20000008
 8003584:	2000000c 	.word	0x2000000c

08003588 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	2300      	movs	r3, #0
 800359c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035a2:	4b1e      	ldr	r3, [pc, #120]	@ (800361c <HAL_RCC_GetSysClockFreq+0x94>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d002      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0x30>
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d003      	beq.n	80035be <HAL_RCC_GetSysClockFreq+0x36>
 80035b6:	e027      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035b8:	4b19      	ldr	r3, [pc, #100]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ba:	613b      	str	r3, [r7, #16]
      break;
 80035bc:	e027      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	0c9b      	lsrs	r3, r3, #18
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	4a17      	ldr	r2, [pc, #92]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035c8:	5cd3      	ldrb	r3, [r2, r3]
 80035ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d010      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035d6:	4b11      	ldr	r3, [pc, #68]	@ (800361c <HAL_RCC_GetSysClockFreq+0x94>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	0c5b      	lsrs	r3, r3, #17
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	4a11      	ldr	r2, [pc, #68]	@ (8003628 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035e2:	5cd3      	ldrb	r3, [r2, r3]
 80035e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ea:	fb03 f202 	mul.w	r2, r3, r2
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	e004      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a0c      	ldr	r2, [pc, #48]	@ (800362c <HAL_RCC_GetSysClockFreq+0xa4>)
 80035fc:	fb02 f303 	mul.w	r3, r2, r3
 8003600:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	613b      	str	r3, [r7, #16]
      break;
 8003606:	e002      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003608:	4b05      	ldr	r3, [pc, #20]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x98>)
 800360a:	613b      	str	r3, [r7, #16]
      break;
 800360c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800360e:	693b      	ldr	r3, [r7, #16]
}
 8003610:	4618      	mov	r0, r3
 8003612:	371c      	adds	r7, #28
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	007a1200 	.word	0x007a1200
 8003624:	08008d24 	.word	0x08008d24
 8003628:	08008d34 	.word	0x08008d34
 800362c:	003d0900 	.word	0x003d0900

08003630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003634:	4b02      	ldr	r3, [pc, #8]	@ (8003640 <HAL_RCC_GetHCLKFreq+0x10>)
 8003636:	681b      	ldr	r3, [r3, #0]
}
 8003638:	4618      	mov	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr
 8003640:	20000008 	.word	0x20000008

08003644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003648:	f7ff fff2 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 800364c:	4602      	mov	r2, r0
 800364e:	4b05      	ldr	r3, [pc, #20]	@ (8003664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	0a1b      	lsrs	r3, r3, #8
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	4903      	ldr	r1, [pc, #12]	@ (8003668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800365a:	5ccb      	ldrb	r3, [r1, r3]
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40021000 	.word	0x40021000
 8003668:	08008d1c 	.word	0x08008d1c

0800366c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003670:	f7ff ffde 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 8003674:	4602      	mov	r2, r0
 8003676:	4b05      	ldr	r3, [pc, #20]	@ (800368c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	0adb      	lsrs	r3, r3, #11
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	4903      	ldr	r1, [pc, #12]	@ (8003690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003682:	5ccb      	ldrb	r3, [r1, r3]
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003688:	4618      	mov	r0, r3
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000
 8003690:	08008d1c 	.word	0x08008d1c

08003694 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800369c:	4b0a      	ldr	r3, [pc, #40]	@ (80036c8 <RCC_Delay+0x34>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0a      	ldr	r2, [pc, #40]	@ (80036cc <RCC_Delay+0x38>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	0a5b      	lsrs	r3, r3, #9
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036b0:	bf00      	nop
  }
  while (Delay --);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1e5a      	subs	r2, r3, #1
 80036b6:	60fa      	str	r2, [r7, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f9      	bne.n	80036b0 <RCC_Delay+0x1c>
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr
 80036c8:	20000008 	.word	0x20000008
 80036cc:	10624dd3 	.word	0x10624dd3

080036d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e076      	b.n	80037d0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d108      	bne.n	80036fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036f2:	d009      	beq.n	8003708 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	61da      	str	r2, [r3, #28]
 80036fa:	e005      	b.n	8003708 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fe fc64 	bl	8001ff0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800373e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800378c:	ea42 0103 	orr.w	r1, r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003794:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	0c1a      	lsrs	r2, r3, #16
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f002 0204 	and.w	r2, r2, #4
 80037ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69da      	ldr	r2, [r3, #28]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	4613      	mov	r3, r2
 80037e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_SPI_Transmit+0x22>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e12d      	b.n	8003a56 <HAL_SPI_Transmit+0x27e>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003802:	f7fe fe8f 	bl	8002524 <HAL_GetTick>
 8003806:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003808:	88fb      	ldrh	r3, [r7, #6]
 800380a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b01      	cmp	r3, #1
 8003816:	d002      	beq.n	800381e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003818:	2302      	movs	r3, #2
 800381a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800381c:	e116      	b.n	8003a4c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_SPI_Transmit+0x52>
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d102      	bne.n	8003830 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800382e:	e10d      	b.n	8003a4c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2203      	movs	r2, #3
 8003834:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	88fa      	ldrh	r2, [r7, #6]
 8003848:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	88fa      	ldrh	r2, [r7, #6]
 800384e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003876:	d10f      	bne.n	8003898 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003886:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003896:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a2:	2b40      	cmp	r3, #64	@ 0x40
 80038a4:	d007      	beq.n	80038b6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038be:	d14f      	bne.n	8003960 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <HAL_SPI_Transmit+0xf6>
 80038c8:	8afb      	ldrh	r3, [r7, #22]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d142      	bne.n	8003954 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d2:	881a      	ldrh	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038de:	1c9a      	adds	r2, r3, #2
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038f2:	e02f      	b.n	8003954 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d112      	bne.n	8003928 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003906:	881a      	ldrh	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003912:	1c9a      	adds	r2, r3, #2
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003926:	e015      	b.n	8003954 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003928:	f7fe fdfc 	bl	8002524 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d803      	bhi.n	8003940 <HAL_SPI_Transmit+0x168>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393e:	d102      	bne.n	8003946 <HAL_SPI_Transmit+0x16e>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003952:	e07b      	b.n	8003a4c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1ca      	bne.n	80038f4 <HAL_SPI_Transmit+0x11c>
 800395e:	e050      	b.n	8003a02 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <HAL_SPI_Transmit+0x196>
 8003968:	8afb      	ldrh	r3, [r7, #22]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d144      	bne.n	80039f8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	330c      	adds	r3, #12
 8003978:	7812      	ldrb	r2, [r2, #0]
 800397a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003994:	e030      	b.n	80039f8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d113      	bne.n	80039cc <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	7812      	ldrb	r2, [r2, #0]
 80039b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80039ca:	e015      	b.n	80039f8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039cc:	f7fe fdaa 	bl	8002524 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d803      	bhi.n	80039e4 <HAL_SPI_Transmit+0x20c>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e2:	d102      	bne.n	80039ea <HAL_SPI_Transmit+0x212>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80039f6:	e029      	b.n	8003a4c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1c9      	bne.n	8003996 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	6839      	ldr	r1, [r7, #0]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 fd12 	bl	8004430 <SPI_EndRxTxTransaction>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2220      	movs	r2, #32
 8003a16:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a20:	2300      	movs	r3, #0
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	77fb      	strb	r3, [r7, #31]
 8003a42:	e003      	b.n	8003a4c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003a54:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3720      	adds	r7, #32
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b088      	sub	sp, #32
 8003a62:	af02      	add	r7, sp, #8
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	603b      	str	r3, [r7, #0]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d002      	beq.n	8003a84 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a82:	e0fb      	b.n	8003c7c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a8c:	d112      	bne.n	8003ab4 <HAL_SPI_Receive+0x56>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10e      	bne.n	8003ab4 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2204      	movs	r2, #4
 8003a9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a9e:	88fa      	ldrh	r2, [r7, #6]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f8ef 	bl	8003c8e <HAL_SPI_TransmitReceive>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	e0e8      	b.n	8003c86 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_SPI_Receive+0x64>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e0e1      	b.n	8003c86 <HAL_SPI_Receive+0x228>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003aca:	f7fe fd2b 	bl	8002524 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_SPI_Receive+0x7e>
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d102      	bne.n	8003ae2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ae0:	e0cc      	b.n	8003c7c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	88fa      	ldrh	r2, [r7, #6]
 8003afa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	88fa      	ldrh	r2, [r7, #6]
 8003b00:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b28:	d10f      	bne.n	8003b4a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b48:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b54:	2b40      	cmp	r3, #64	@ 0x40
 8003b56:	d007      	beq.n	8003b68 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b66:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d16a      	bne.n	8003c46 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b70:	e032      	b.n	8003bd8 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d115      	bne.n	8003bac <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f103 020c 	add.w	r2, r3, #12
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8c:	7812      	ldrb	r2, [r2, #0]
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003baa:	e015      	b.n	8003bd8 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bac:	f7fe fcba 	bl	8002524 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d803      	bhi.n	8003bc4 <HAL_SPI_Receive+0x166>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc2:	d102      	bne.n	8003bca <HAL_SPI_Receive+0x16c>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d106      	bne.n	8003bd8 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003bd6:	e051      	b.n	8003c7c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1c7      	bne.n	8003b72 <HAL_SPI_Receive+0x114>
 8003be2:	e035      	b.n	8003c50 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d113      	bne.n	8003c1a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfc:	b292      	uxth	r2, r2
 8003bfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c04:	1c9a      	adds	r2, r3, #2
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c18:	e015      	b.n	8003c46 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c1a:	f7fe fc83 	bl	8002524 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d803      	bhi.n	8003c32 <HAL_SPI_Receive+0x1d4>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d102      	bne.n	8003c38 <HAL_SPI_Receive+0x1da>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003c44:	e01a      	b.n	8003c7c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1c9      	bne.n	8003be4 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	6839      	ldr	r1, [r7, #0]
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 fb99 	bl	800438c <SPI_EndRxTransaction>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	75fb      	strb	r3, [r7, #23]
 8003c72:	e003      	b.n	8003c7c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b08c      	sub	sp, #48	@ 0x30
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_SPI_TransmitReceive+0x26>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e198      	b.n	8003fe6 <HAL_SPI_TransmitReceive+0x358>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cbc:	f7fe fc32 	bl	8002524 <HAL_GetTick>
 8003cc0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003cd2:	887b      	ldrh	r3, [r7, #2]
 8003cd4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d00f      	beq.n	8003cfe <HAL_SPI_TransmitReceive+0x70>
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ce4:	d107      	bne.n	8003cf6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d103      	bne.n	8003cf6 <HAL_SPI_TransmitReceive+0x68>
 8003cee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d003      	beq.n	8003cfe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003cfc:	e16d      	b.n	8003fda <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_SPI_TransmitReceive+0x82>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <HAL_SPI_TransmitReceive+0x82>
 8003d0a:	887b      	ldrh	r3, [r7, #2]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d103      	bne.n	8003d18 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003d16:	e160      	b.n	8003fda <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d003      	beq.n	8003d2c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2205      	movs	r2, #5
 8003d28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	887a      	ldrh	r2, [r7, #2]
 8003d3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	887a      	ldrh	r2, [r7, #2]
 8003d42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	887a      	ldrh	r2, [r7, #2]
 8003d4e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	887a      	ldrh	r2, [r7, #2]
 8003d54:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6c:	2b40      	cmp	r3, #64	@ 0x40
 8003d6e:	d007      	beq.n	8003d80 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d88:	d17c      	bne.n	8003e84 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <HAL_SPI_TransmitReceive+0x10a>
 8003d92:	8b7b      	ldrh	r3, [r7, #26]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d16a      	bne.n	8003e6e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9c:	881a      	ldrh	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da8:	1c9a      	adds	r2, r3, #2
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dbc:	e057      	b.n	8003e6e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d11b      	bne.n	8003e04 <HAL_SPI_TransmitReceive+0x176>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d016      	beq.n	8003e04 <HAL_SPI_TransmitReceive+0x176>
 8003dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d113      	bne.n	8003e04 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de0:	881a      	ldrh	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dec:	1c9a      	adds	r2, r3, #2
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d119      	bne.n	8003e46 <HAL_SPI_TransmitReceive+0x1b8>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d014      	beq.n	8003e46 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e26:	b292      	uxth	r2, r2
 8003e28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2e:	1c9a      	adds	r2, r3, #2
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e42:	2301      	movs	r3, #1
 8003e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e46:	f7fe fb6d 	bl	8002524 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d80b      	bhi.n	8003e6e <HAL_SPI_TransmitReceive+0x1e0>
 8003e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d007      	beq.n	8003e6e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003e6c:	e0b5      	b.n	8003fda <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1a2      	bne.n	8003dbe <HAL_SPI_TransmitReceive+0x130>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d19d      	bne.n	8003dbe <HAL_SPI_TransmitReceive+0x130>
 8003e82:	e080      	b.n	8003f86 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <HAL_SPI_TransmitReceive+0x204>
 8003e8c:	8b7b      	ldrh	r3, [r7, #26]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d16f      	bne.n	8003f72 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	330c      	adds	r3, #12
 8003e9c:	7812      	ldrb	r2, [r2, #0]
 8003e9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eb8:	e05b      	b.n	8003f72 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d11c      	bne.n	8003f02 <HAL_SPI_TransmitReceive+0x274>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d017      	beq.n	8003f02 <HAL_SPI_TransmitReceive+0x274>
 8003ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d114      	bne.n	8003f02 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	330c      	adds	r3, #12
 8003ee2:	7812      	ldrb	r2, [r2, #0]
 8003ee4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d119      	bne.n	8003f44 <HAL_SPI_TransmitReceive+0x2b6>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d014      	beq.n	8003f44 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f40:	2301      	movs	r3, #1
 8003f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f44:	f7fe faee 	bl	8002524 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d803      	bhi.n	8003f5c <HAL_SPI_TransmitReceive+0x2ce>
 8003f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5a:	d102      	bne.n	8003f62 <HAL_SPI_TransmitReceive+0x2d4>
 8003f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d107      	bne.n	8003f72 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003f70:	e033      	b.n	8003fda <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d19e      	bne.n	8003eba <HAL_SPI_TransmitReceive+0x22c>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d199      	bne.n	8003eba <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f88:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 fa50 	bl	8004430 <SPI_EndRxTxTransaction>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d006      	beq.n	8003fa4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003fa2:	e01a      	b.n	8003fda <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10a      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fd0:	e003      	b.n	8003fda <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003fe2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3730      	adds	r7, #48	@ 0x30
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_SPI_Transmit_DMA+0x20>
 800400c:	2302      	movs	r3, #2
 800400e:	e097      	b.n	8004140 <HAL_SPI_Transmit_DMA+0x150>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	d002      	beq.n	800402a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004024:	2302      	movs	r3, #2
 8004026:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004028:	e085      	b.n	8004136 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_SPI_Transmit_DMA+0x46>
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d102      	bne.n	800403c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	75fb      	strb	r3, [r7, #23]
    goto error;
 800403a:	e07c      	b.n	8004136 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2203      	movs	r2, #3
 8004040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	88fa      	ldrh	r2, [r7, #6]
 8004054:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	88fa      	ldrh	r2, [r7, #6]
 800405a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004082:	d10f      	bne.n	80040a4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004092:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a8:	4a27      	ldr	r2, [pc, #156]	@ (8004148 <HAL_SPI_Transmit_DMA+0x158>)
 80040aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040b0:	4a26      	ldr	r2, [pc, #152]	@ (800414c <HAL_SPI_Transmit_DMA+0x15c>)
 80040b2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040b8:	4a25      	ldr	r2, [pc, #148]	@ (8004150 <HAL_SPI_Transmit_DMA+0x160>)
 80040ba:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040c0:	2200      	movs	r2, #0
 80040c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040cc:	4619      	mov	r1, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	330c      	adds	r3, #12
 80040d4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040da:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80040dc:	f7fe fbb8 	bl	8002850 <HAL_DMA_Start_IT>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ea:	f043 0210 	orr.w	r2, r3, #16
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	75fb      	strb	r3, [r7, #23]

    goto error;
 80040f6:	e01e      	b.n	8004136 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004102:	2b40      	cmp	r3, #64	@ 0x40
 8004104:	d007      	beq.n	8004116 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004114:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0220 	orr.w	r2, r2, #32
 8004124:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0202 	orr.w	r2, r2, #2
 8004134:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800413e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	0800421f 	.word	0x0800421f
 800414c:	08004179 	.word	0x08004179
 8004150:	0800423b 	.word	0x0800423b

08004154 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr

08004166 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr

08004178 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004186:	f7fe f9cd 	bl	8002524 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b20      	cmp	r3, #32
 8004198:	d03b      	beq.n	8004212 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0220 	bic.w	r2, r2, #32
 80041a8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0202 	bic.w	r2, r2, #2
 80041b8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	2164      	movs	r1, #100	@ 0x64
 80041be:	6978      	ldr	r0, [r7, #20]
 80041c0:	f000 f936 	bl	8004430 <SPI_EndRxTxTransaction>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ce:	f043 0220 	orr.w	r2, r3, #32
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10a      	bne.n	80041f4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2200      	movs	r2, #0
 80041f8:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800420a:	6978      	ldr	r0, [r7, #20]
 800420c:	f7ff ffab 	bl	8004166 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004210:	e002      	b.n	8004218 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004212:	6978      	ldr	r0, [r7, #20]
 8004214:	f7fc fd4a 	bl	8000cac <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f7ff ff91 	bl	8004154 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0203 	bic.w	r2, r2, #3
 8004256:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425c:	f043 0210 	orr.w	r2, r3, #16
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f7ff ff7a 	bl	8004166 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004272:	bf00      	nop
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	4613      	mov	r3, r2
 800428a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800428c:	f7fe f94a 	bl	8002524 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	4413      	add	r3, r2
 800429a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800429c:	f7fe f942 	bl	8002524 <HAL_GetTick>
 80042a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042a2:	4b39      	ldr	r3, [pc, #228]	@ (8004388 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	015b      	lsls	r3, r3, #5
 80042a8:	0d1b      	lsrs	r3, r3, #20
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	fb02 f303 	mul.w	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042b2:	e054      	b.n	800435e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d050      	beq.n	800435e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042bc:	f7fe f932 	bl	8002524 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d902      	bls.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d13d      	bne.n	800434e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80042e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042ea:	d111      	bne.n	8004310 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042f4:	d004      	beq.n	8004300 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042fe:	d107      	bne.n	8004310 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800430e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004314:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004318:	d10f      	bne.n	800433a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004338:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e017      	b.n	800437e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	3b01      	subs	r3, #1
 800435c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4013      	ands	r3, r2
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	429a      	cmp	r2, r3
 800436c:	bf0c      	ite	eq
 800436e:	2301      	moveq	r3, #1
 8004370:	2300      	movne	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	461a      	mov	r2, r3
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	429a      	cmp	r2, r3
 800437a:	d19b      	bne.n	80042b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3720      	adds	r7, #32
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20000008 	.word	0x20000008

0800438c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af02      	add	r7, sp, #8
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043a0:	d111      	bne.n	80043c6 <SPI_EndRxTransaction+0x3a>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043aa:	d004      	beq.n	80043b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043b4:	d107      	bne.n	80043c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043c4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043ce:	d117      	bne.n	8004400 <SPI_EndRxTransaction+0x74>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043d8:	d112      	bne.n	8004400 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2200      	movs	r2, #0
 80043e2:	2101      	movs	r1, #1
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f7ff ff49 	bl	800427c <SPI_WaitFlagStateUntilTimeout>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01a      	beq.n	8004426 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f4:	f043 0220 	orr.w	r2, r3, #32
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e013      	b.n	8004428 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2200      	movs	r2, #0
 8004408:	2180      	movs	r1, #128	@ 0x80
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f7ff ff36 	bl	800427c <SPI_WaitFlagStateUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441a:	f043 0220 	orr.w	r2, r3, #32
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e000      	b.n	8004428 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2200      	movs	r2, #0
 8004444:	2180      	movs	r1, #128	@ 0x80
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f7ff ff18 	bl	800427c <SPI_WaitFlagStateUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d007      	beq.n	8004462 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004456:	f043 0220 	orr.w	r2, r3, #32
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e000      	b.n	8004464 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e041      	b.n	8004502 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fd fe50 	bl	8002138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3304      	adds	r3, #4
 80044a8:	4619      	mov	r1, r3
 80044aa:	4610      	mov	r0, r2
 80044ac:	f000 fa74 	bl	8004998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	d001      	beq.n	8004524 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e03a      	b.n	800459a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a18      	ldr	r2, [pc, #96]	@ (80045a4 <HAL_TIM_Base_Start_IT+0x98>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00e      	beq.n	8004564 <HAL_TIM_Base_Start_IT+0x58>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800454e:	d009      	beq.n	8004564 <HAL_TIM_Base_Start_IT+0x58>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a14      	ldr	r2, [pc, #80]	@ (80045a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d004      	beq.n	8004564 <HAL_TIM_Base_Start_IT+0x58>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a13      	ldr	r2, [pc, #76]	@ (80045ac <HAL_TIM_Base_Start_IT+0xa0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d111      	bne.n	8004588 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b06      	cmp	r3, #6
 8004574:	d010      	beq.n	8004598 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 0201 	orr.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004586:	e007      	b.n	8004598 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr
 80045a4:	40012c00 	.word	0x40012c00
 80045a8:	40000400 	.word	0x40000400
 80045ac:	40000800 	.word	0x40000800

080045b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d122      	bne.n	800460c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d11b      	bne.n	800460c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0202 	mvn.w	r2, #2
 80045dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f9b4 	bl	8004960 <HAL_TIM_IC_CaptureCallback>
 80045f8:	e005      	b.n	8004606 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f9a7 	bl	800494e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f9b6 	bl	8004972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b04      	cmp	r3, #4
 8004618:	d122      	bne.n	8004660 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b04      	cmp	r3, #4
 8004626:	d11b      	bne.n	8004660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0204 	mvn.w	r2, #4
 8004630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2202      	movs	r2, #2
 8004636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f98a 	bl	8004960 <HAL_TIM_IC_CaptureCallback>
 800464c:	e005      	b.n	800465a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f97d 	bl	800494e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f98c 	bl	8004972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b08      	cmp	r3, #8
 800466c:	d122      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b08      	cmp	r3, #8
 800467a:	d11b      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0208 	mvn.w	r2, #8
 8004684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2204      	movs	r2, #4
 800468a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f960 	bl	8004960 <HAL_TIM_IC_CaptureCallback>
 80046a0:	e005      	b.n	80046ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f953 	bl	800494e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f962 	bl	8004972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b10      	cmp	r3, #16
 80046c0:	d122      	bne.n	8004708 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	2b10      	cmp	r3, #16
 80046ce:	d11b      	bne.n	8004708 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0210 	mvn.w	r2, #16
 80046d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2208      	movs	r2, #8
 80046de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f936 	bl	8004960 <HAL_TIM_IC_CaptureCallback>
 80046f4:	e005      	b.n	8004702 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f929 	bl	800494e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f938 	bl	8004972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b01      	cmp	r3, #1
 8004714:	d10e      	bne.n	8004734 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b01      	cmp	r3, #1
 8004722:	d107      	bne.n	8004734 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 0201 	mvn.w	r2, #1
 800472c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fc ff26 	bl	8001580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473e:	2b80      	cmp	r3, #128	@ 0x80
 8004740:	d10e      	bne.n	8004760 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474c:	2b80      	cmp	r3, #128	@ 0x80
 800474e:	d107      	bne.n	8004760 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fa7b 	bl	8004c56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476a:	2b40      	cmp	r3, #64	@ 0x40
 800476c:	d10e      	bne.n	800478c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004778:	2b40      	cmp	r3, #64	@ 0x40
 800477a:	d107      	bne.n	800478c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f8fc 	bl	8004984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b20      	cmp	r3, #32
 8004798:	d10e      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0320 	and.w	r3, r3, #32
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	d107      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0220 	mvn.w	r2, #32
 80047b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fa46 	bl	8004c44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047b8:	bf00      	nop
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_TIM_ConfigClockSource+0x1c>
 80047d8:	2302      	movs	r3, #2
 80047da:	e0b4      	b.n	8004946 <HAL_TIM_ConfigClockSource+0x186>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80047fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004802:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004814:	d03e      	beq.n	8004894 <HAL_TIM_ConfigClockSource+0xd4>
 8004816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800481a:	f200 8087 	bhi.w	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800481e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004822:	f000 8086 	beq.w	8004932 <HAL_TIM_ConfigClockSource+0x172>
 8004826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800482a:	d87f      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800482c:	2b70      	cmp	r3, #112	@ 0x70
 800482e:	d01a      	beq.n	8004866 <HAL_TIM_ConfigClockSource+0xa6>
 8004830:	2b70      	cmp	r3, #112	@ 0x70
 8004832:	d87b      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 8004834:	2b60      	cmp	r3, #96	@ 0x60
 8004836:	d050      	beq.n	80048da <HAL_TIM_ConfigClockSource+0x11a>
 8004838:	2b60      	cmp	r3, #96	@ 0x60
 800483a:	d877      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800483c:	2b50      	cmp	r3, #80	@ 0x50
 800483e:	d03c      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0xfa>
 8004840:	2b50      	cmp	r3, #80	@ 0x50
 8004842:	d873      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 8004844:	2b40      	cmp	r3, #64	@ 0x40
 8004846:	d058      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0x13a>
 8004848:	2b40      	cmp	r3, #64	@ 0x40
 800484a:	d86f      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800484c:	2b30      	cmp	r3, #48	@ 0x30
 800484e:	d064      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x15a>
 8004850:	2b30      	cmp	r3, #48	@ 0x30
 8004852:	d86b      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 8004854:	2b20      	cmp	r3, #32
 8004856:	d060      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x15a>
 8004858:	2b20      	cmp	r3, #32
 800485a:	d867      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800485c:	2b00      	cmp	r3, #0
 800485e:	d05c      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x15a>
 8004860:	2b10      	cmp	r3, #16
 8004862:	d05a      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x15a>
 8004864:	e062      	b.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004876:	f000 f968 	bl	8004b4a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004888:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	609a      	str	r2, [r3, #8]
      break;
 8004892:	e04f      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048a4:	f000 f951 	bl	8004b4a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048b6:	609a      	str	r2, [r3, #8]
      break;
 80048b8:	e03c      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c6:	461a      	mov	r2, r3
 80048c8:	f000 f8c8 	bl	8004a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2150      	movs	r1, #80	@ 0x50
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f91f 	bl	8004b16 <TIM_ITRx_SetConfig>
      break;
 80048d8:	e02c      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048e6:	461a      	mov	r2, r3
 80048e8:	f000 f8e6 	bl	8004ab8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2160      	movs	r1, #96	@ 0x60
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 f90f 	bl	8004b16 <TIM_ITRx_SetConfig>
      break;
 80048f8:	e01c      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004906:	461a      	mov	r2, r3
 8004908:	f000 f8a8 	bl	8004a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2140      	movs	r1, #64	@ 0x40
 8004912:	4618      	mov	r0, r3
 8004914:	f000 f8ff 	bl	8004b16 <TIM_ITRx_SetConfig>
      break;
 8004918:	e00c      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4619      	mov	r1, r3
 8004924:	4610      	mov	r0, r2
 8004926:	f000 f8f6 	bl	8004b16 <TIM_ITRx_SetConfig>
      break;
 800492a:	e003      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
      break;
 8004930:	e000      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004944:	7bfb      	ldrb	r3, [r7, #15]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr

08004960 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	bc80      	pop	{r7}
 8004970:	4770      	bx	lr

08004972 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr
	...

08004998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a29      	ldr	r2, [pc, #164]	@ (8004a50 <TIM_Base_SetConfig+0xb8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00b      	beq.n	80049c8 <TIM_Base_SetConfig+0x30>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049b6:	d007      	beq.n	80049c8 <TIM_Base_SetConfig+0x30>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a26      	ldr	r2, [pc, #152]	@ (8004a54 <TIM_Base_SetConfig+0xbc>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_Base_SetConfig+0x30>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a25      	ldr	r2, [pc, #148]	@ (8004a58 <TIM_Base_SetConfig+0xc0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d108      	bne.n	80049da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004a50 <TIM_Base_SetConfig+0xb8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00b      	beq.n	80049fa <TIM_Base_SetConfig+0x62>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e8:	d007      	beq.n	80049fa <TIM_Base_SetConfig+0x62>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a19      	ldr	r2, [pc, #100]	@ (8004a54 <TIM_Base_SetConfig+0xbc>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d003      	beq.n	80049fa <TIM_Base_SetConfig+0x62>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a18      	ldr	r2, [pc, #96]	@ (8004a58 <TIM_Base_SetConfig+0xc0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d108      	bne.n	8004a0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a07      	ldr	r2, [pc, #28]	@ (8004a50 <TIM_Base_SetConfig+0xb8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d103      	bne.n	8004a40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	615a      	str	r2, [r3, #20]
}
 8004a46:	bf00      	nop
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr
 8004a50:	40012c00 	.word	0x40012c00
 8004a54:	40000400 	.word	0x40000400
 8004a58:	40000800 	.word	0x40000800

08004a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	f023 0201 	bic.w	r2, r3, #1
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f023 030a 	bic.w	r3, r3, #10
 8004a98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	621a      	str	r2, [r3, #32]
}
 8004aae:	bf00      	nop
 8004ab0:	371c      	adds	r7, #28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	f023 0210 	bic.w	r2, r3, #16
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	031b      	lsls	r3, r3, #12
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004af4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	621a      	str	r2, [r3, #32]
}
 8004b0c:	bf00      	nop
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr

08004b16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b085      	sub	sp, #20
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f043 0307 	orr.w	r3, r3, #7
 8004b38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	609a      	str	r2, [r3, #8]
}
 8004b40:	bf00      	nop
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr

08004b4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b087      	sub	sp, #28
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	607a      	str	r2, [r7, #4]
 8004b56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	021a      	lsls	r2, r3, #8
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	609a      	str	r2, [r3, #8]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e046      	b.n	8004c2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a16      	ldr	r2, [pc, #88]	@ (8004c38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00e      	beq.n	8004c02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bec:	d009      	beq.n	8004c02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a12      	ldr	r2, [pc, #72]	@ (8004c3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d004      	beq.n	8004c02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a10      	ldr	r2, [pc, #64]	@ (8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d10c      	bne.n	8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr
 8004c38:	40012c00 	.word	0x40012c00
 8004c3c:	40000400 	.word	0x40000400
 8004c40:	40000800 	.word	0x40000800

08004c44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr

08004c56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr

08004c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e042      	b.n	8004d00 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fd fa78 	bl	8002184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2224      	movs	r2, #36	@ 0x24
 8004c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f82b 	bl	8004d08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	695a      	ldr	r2, [r3, #20]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004d42:	f023 030c 	bic.w	r3, r3, #12
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6812      	ldr	r2, [r2, #0]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8004e1c <UART_SetConfig+0x114>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d103      	bne.n	8004d78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d70:	f7fe fc7c 	bl	800366c <HAL_RCC_GetPCLK2Freq>
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	e002      	b.n	8004d7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d78:	f7fe fc64 	bl	8003644 <HAL_RCC_GetPCLK1Freq>
 8004d7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	009a      	lsls	r2, r3, #2
 8004d88:	441a      	add	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d94:	4a22      	ldr	r2, [pc, #136]	@ (8004e20 <UART_SetConfig+0x118>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	0119      	lsls	r1, r3, #4
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	009a      	lsls	r2, r3, #2
 8004da8:	441a      	add	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004db4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e20 <UART_SetConfig+0x118>)
 8004db6:	fba3 0302 	umull	r0, r3, r3, r2
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	2064      	movs	r0, #100	@ 0x64
 8004dbe:	fb00 f303 	mul.w	r3, r0, r3
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	011b      	lsls	r3, r3, #4
 8004dc6:	3332      	adds	r3, #50	@ 0x32
 8004dc8:	4a15      	ldr	r2, [pc, #84]	@ (8004e20 <UART_SetConfig+0x118>)
 8004dca:	fba2 2303 	umull	r2, r3, r2, r3
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dd4:	4419      	add	r1, r3
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	009a      	lsls	r2, r3, #2
 8004de0:	441a      	add	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dec:	4b0c      	ldr	r3, [pc, #48]	@ (8004e20 <UART_SetConfig+0x118>)
 8004dee:	fba3 0302 	umull	r0, r3, r3, r2
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	2064      	movs	r0, #100	@ 0x64
 8004df6:	fb00 f303 	mul.w	r3, r0, r3
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	3332      	adds	r3, #50	@ 0x32
 8004e00:	4a07      	ldr	r2, [pc, #28]	@ (8004e20 <UART_SetConfig+0x118>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	f003 020f 	and.w	r2, r3, #15
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	440a      	add	r2, r1
 8004e12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e14:	bf00      	nop
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40013800 	.word	0x40013800
 8004e20:	51eb851f 	.word	0x51eb851f

08004e24 <__cvt>:
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e2a:	461d      	mov	r5, r3
 8004e2c:	bfbb      	ittet	lt
 8004e2e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004e32:	461d      	movlt	r5, r3
 8004e34:	2300      	movge	r3, #0
 8004e36:	232d      	movlt	r3, #45	@ 0x2d
 8004e38:	b088      	sub	sp, #32
 8004e3a:	4614      	mov	r4, r2
 8004e3c:	bfb8      	it	lt
 8004e3e:	4614      	movlt	r4, r2
 8004e40:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004e42:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004e44:	7013      	strb	r3, [r2, #0]
 8004e46:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004e48:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004e4c:	f023 0820 	bic.w	r8, r3, #32
 8004e50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e54:	d005      	beq.n	8004e62 <__cvt+0x3e>
 8004e56:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004e5a:	d100      	bne.n	8004e5e <__cvt+0x3a>
 8004e5c:	3601      	adds	r6, #1
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e000      	b.n	8004e64 <__cvt+0x40>
 8004e62:	2303      	movs	r3, #3
 8004e64:	aa07      	add	r2, sp, #28
 8004e66:	9204      	str	r2, [sp, #16]
 8004e68:	aa06      	add	r2, sp, #24
 8004e6a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004e6e:	e9cd 3600 	strd	r3, r6, [sp]
 8004e72:	4622      	mov	r2, r4
 8004e74:	462b      	mov	r3, r5
 8004e76:	f000 fea3 	bl	8005bc0 <_dtoa_r>
 8004e7a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004e7e:	4607      	mov	r7, r0
 8004e80:	d119      	bne.n	8004eb6 <__cvt+0x92>
 8004e82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004e84:	07db      	lsls	r3, r3, #31
 8004e86:	d50e      	bpl.n	8004ea6 <__cvt+0x82>
 8004e88:	eb00 0906 	add.w	r9, r0, r6
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2300      	movs	r3, #0
 8004e90:	4620      	mov	r0, r4
 8004e92:	4629      	mov	r1, r5
 8004e94:	f7fb fd88 	bl	80009a8 <__aeabi_dcmpeq>
 8004e98:	b108      	cbz	r0, 8004e9e <__cvt+0x7a>
 8004e9a:	f8cd 901c 	str.w	r9, [sp, #28]
 8004e9e:	2230      	movs	r2, #48	@ 0x30
 8004ea0:	9b07      	ldr	r3, [sp, #28]
 8004ea2:	454b      	cmp	r3, r9
 8004ea4:	d31e      	bcc.n	8004ee4 <__cvt+0xc0>
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	9b07      	ldr	r3, [sp, #28]
 8004eaa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004eac:	1bdb      	subs	r3, r3, r7
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	b008      	add	sp, #32
 8004eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004eba:	eb00 0906 	add.w	r9, r0, r6
 8004ebe:	d1e5      	bne.n	8004e8c <__cvt+0x68>
 8004ec0:	7803      	ldrb	r3, [r0, #0]
 8004ec2:	2b30      	cmp	r3, #48	@ 0x30
 8004ec4:	d10a      	bne.n	8004edc <__cvt+0xb8>
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2300      	movs	r3, #0
 8004eca:	4620      	mov	r0, r4
 8004ecc:	4629      	mov	r1, r5
 8004ece:	f7fb fd6b 	bl	80009a8 <__aeabi_dcmpeq>
 8004ed2:	b918      	cbnz	r0, 8004edc <__cvt+0xb8>
 8004ed4:	f1c6 0601 	rsb	r6, r6, #1
 8004ed8:	f8ca 6000 	str.w	r6, [sl]
 8004edc:	f8da 3000 	ldr.w	r3, [sl]
 8004ee0:	4499      	add	r9, r3
 8004ee2:	e7d3      	b.n	8004e8c <__cvt+0x68>
 8004ee4:	1c59      	adds	r1, r3, #1
 8004ee6:	9107      	str	r1, [sp, #28]
 8004ee8:	701a      	strb	r2, [r3, #0]
 8004eea:	e7d9      	b.n	8004ea0 <__cvt+0x7c>

08004eec <__exponent>:
 8004eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004eee:	2900      	cmp	r1, #0
 8004ef0:	bfb6      	itet	lt
 8004ef2:	232d      	movlt	r3, #45	@ 0x2d
 8004ef4:	232b      	movge	r3, #43	@ 0x2b
 8004ef6:	4249      	neglt	r1, r1
 8004ef8:	2909      	cmp	r1, #9
 8004efa:	7002      	strb	r2, [r0, #0]
 8004efc:	7043      	strb	r3, [r0, #1]
 8004efe:	dd29      	ble.n	8004f54 <__exponent+0x68>
 8004f00:	f10d 0307 	add.w	r3, sp, #7
 8004f04:	461d      	mov	r5, r3
 8004f06:	270a      	movs	r7, #10
 8004f08:	fbb1 f6f7 	udiv	r6, r1, r7
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	fb07 1416 	mls	r4, r7, r6, r1
 8004f12:	3430      	adds	r4, #48	@ 0x30
 8004f14:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004f18:	460c      	mov	r4, r1
 8004f1a:	2c63      	cmp	r4, #99	@ 0x63
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f22:	dcf1      	bgt.n	8004f08 <__exponent+0x1c>
 8004f24:	3130      	adds	r1, #48	@ 0x30
 8004f26:	1e94      	subs	r4, r2, #2
 8004f28:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004f2c:	4623      	mov	r3, r4
 8004f2e:	1c41      	adds	r1, r0, #1
 8004f30:	42ab      	cmp	r3, r5
 8004f32:	d30a      	bcc.n	8004f4a <__exponent+0x5e>
 8004f34:	f10d 0309 	add.w	r3, sp, #9
 8004f38:	1a9b      	subs	r3, r3, r2
 8004f3a:	42ac      	cmp	r4, r5
 8004f3c:	bf88      	it	hi
 8004f3e:	2300      	movhi	r3, #0
 8004f40:	3302      	adds	r3, #2
 8004f42:	4403      	add	r3, r0
 8004f44:	1a18      	subs	r0, r3, r0
 8004f46:	b003      	add	sp, #12
 8004f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f4a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004f4e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004f52:	e7ed      	b.n	8004f30 <__exponent+0x44>
 8004f54:	2330      	movs	r3, #48	@ 0x30
 8004f56:	3130      	adds	r1, #48	@ 0x30
 8004f58:	7083      	strb	r3, [r0, #2]
 8004f5a:	70c1      	strb	r1, [r0, #3]
 8004f5c:	1d03      	adds	r3, r0, #4
 8004f5e:	e7f1      	b.n	8004f44 <__exponent+0x58>

08004f60 <_printf_float>:
 8004f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f64:	b091      	sub	sp, #68	@ 0x44
 8004f66:	460c      	mov	r4, r1
 8004f68:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004f6c:	4616      	mov	r6, r2
 8004f6e:	461f      	mov	r7, r3
 8004f70:	4605      	mov	r5, r0
 8004f72:	f000 fd15 	bl	80059a0 <_localeconv_r>
 8004f76:	6803      	ldr	r3, [r0, #0]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	9308      	str	r3, [sp, #32]
 8004f7c:	f7fb f8e8 	bl	8000150 <strlen>
 8004f80:	2300      	movs	r3, #0
 8004f82:	930e      	str	r3, [sp, #56]	@ 0x38
 8004f84:	f8d8 3000 	ldr.w	r3, [r8]
 8004f88:	9009      	str	r0, [sp, #36]	@ 0x24
 8004f8a:	3307      	adds	r3, #7
 8004f8c:	f023 0307 	bic.w	r3, r3, #7
 8004f90:	f103 0208 	add.w	r2, r3, #8
 8004f94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004f98:	f8d4 b000 	ldr.w	fp, [r4]
 8004f9c:	f8c8 2000 	str.w	r2, [r8]
 8004fa0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fa4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004fa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004faa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004fae:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004fb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004fba:	4b9c      	ldr	r3, [pc, #624]	@ (800522c <_printf_float+0x2cc>)
 8004fbc:	f7fb fd26 	bl	8000a0c <__aeabi_dcmpun>
 8004fc0:	bb70      	cbnz	r0, 8005020 <_printf_float+0xc0>
 8004fc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8004fca:	4b98      	ldr	r3, [pc, #608]	@ (800522c <_printf_float+0x2cc>)
 8004fcc:	f7fb fd00 	bl	80009d0 <__aeabi_dcmple>
 8004fd0:	bb30      	cbnz	r0, 8005020 <_printf_float+0xc0>
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	4640      	mov	r0, r8
 8004fd8:	4649      	mov	r1, r9
 8004fda:	f7fb fcef 	bl	80009bc <__aeabi_dcmplt>
 8004fde:	b110      	cbz	r0, 8004fe6 <_printf_float+0x86>
 8004fe0:	232d      	movs	r3, #45	@ 0x2d
 8004fe2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fe6:	4a92      	ldr	r2, [pc, #584]	@ (8005230 <_printf_float+0x2d0>)
 8004fe8:	4b92      	ldr	r3, [pc, #584]	@ (8005234 <_printf_float+0x2d4>)
 8004fea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004fee:	bf94      	ite	ls
 8004ff0:	4690      	movls	r8, r2
 8004ff2:	4698      	movhi	r8, r3
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	f04f 0900 	mov.w	r9, #0
 8004ffa:	6123      	str	r3, [r4, #16]
 8004ffc:	f02b 0304 	bic.w	r3, fp, #4
 8005000:	6023      	str	r3, [r4, #0]
 8005002:	4633      	mov	r3, r6
 8005004:	4621      	mov	r1, r4
 8005006:	4628      	mov	r0, r5
 8005008:	9700      	str	r7, [sp, #0]
 800500a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800500c:	f000 f9d4 	bl	80053b8 <_printf_common>
 8005010:	3001      	adds	r0, #1
 8005012:	f040 8090 	bne.w	8005136 <_printf_float+0x1d6>
 8005016:	f04f 30ff 	mov.w	r0, #4294967295
 800501a:	b011      	add	sp, #68	@ 0x44
 800501c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005020:	4642      	mov	r2, r8
 8005022:	464b      	mov	r3, r9
 8005024:	4640      	mov	r0, r8
 8005026:	4649      	mov	r1, r9
 8005028:	f7fb fcf0 	bl	8000a0c <__aeabi_dcmpun>
 800502c:	b148      	cbz	r0, 8005042 <_printf_float+0xe2>
 800502e:	464b      	mov	r3, r9
 8005030:	2b00      	cmp	r3, #0
 8005032:	bfb8      	it	lt
 8005034:	232d      	movlt	r3, #45	@ 0x2d
 8005036:	4a80      	ldr	r2, [pc, #512]	@ (8005238 <_printf_float+0x2d8>)
 8005038:	bfb8      	it	lt
 800503a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800503e:	4b7f      	ldr	r3, [pc, #508]	@ (800523c <_printf_float+0x2dc>)
 8005040:	e7d3      	b.n	8004fea <_printf_float+0x8a>
 8005042:	6863      	ldr	r3, [r4, #4]
 8005044:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	d13f      	bne.n	80050cc <_printf_float+0x16c>
 800504c:	2306      	movs	r3, #6
 800504e:	6063      	str	r3, [r4, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005056:	6023      	str	r3, [r4, #0]
 8005058:	9206      	str	r2, [sp, #24]
 800505a:	aa0e      	add	r2, sp, #56	@ 0x38
 800505c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005060:	aa0d      	add	r2, sp, #52	@ 0x34
 8005062:	9203      	str	r2, [sp, #12]
 8005064:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005068:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800506c:	6863      	ldr	r3, [r4, #4]
 800506e:	4642      	mov	r2, r8
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	4628      	mov	r0, r5
 8005074:	464b      	mov	r3, r9
 8005076:	910a      	str	r1, [sp, #40]	@ 0x28
 8005078:	f7ff fed4 	bl	8004e24 <__cvt>
 800507c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800507e:	4680      	mov	r8, r0
 8005080:	2947      	cmp	r1, #71	@ 0x47
 8005082:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005084:	d128      	bne.n	80050d8 <_printf_float+0x178>
 8005086:	1cc8      	adds	r0, r1, #3
 8005088:	db02      	blt.n	8005090 <_printf_float+0x130>
 800508a:	6863      	ldr	r3, [r4, #4]
 800508c:	4299      	cmp	r1, r3
 800508e:	dd40      	ble.n	8005112 <_printf_float+0x1b2>
 8005090:	f1aa 0a02 	sub.w	sl, sl, #2
 8005094:	fa5f fa8a 	uxtb.w	sl, sl
 8005098:	4652      	mov	r2, sl
 800509a:	3901      	subs	r1, #1
 800509c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80050a0:	910d      	str	r1, [sp, #52]	@ 0x34
 80050a2:	f7ff ff23 	bl	8004eec <__exponent>
 80050a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80050a8:	4681      	mov	r9, r0
 80050aa:	1813      	adds	r3, r2, r0
 80050ac:	2a01      	cmp	r2, #1
 80050ae:	6123      	str	r3, [r4, #16]
 80050b0:	dc02      	bgt.n	80050b8 <_printf_float+0x158>
 80050b2:	6822      	ldr	r2, [r4, #0]
 80050b4:	07d2      	lsls	r2, r2, #31
 80050b6:	d501      	bpl.n	80050bc <_printf_float+0x15c>
 80050b8:	3301      	adds	r3, #1
 80050ba:	6123      	str	r3, [r4, #16]
 80050bc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d09e      	beq.n	8005002 <_printf_float+0xa2>
 80050c4:	232d      	movs	r3, #45	@ 0x2d
 80050c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050ca:	e79a      	b.n	8005002 <_printf_float+0xa2>
 80050cc:	2947      	cmp	r1, #71	@ 0x47
 80050ce:	d1bf      	bne.n	8005050 <_printf_float+0xf0>
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1bd      	bne.n	8005050 <_printf_float+0xf0>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e7ba      	b.n	800504e <_printf_float+0xee>
 80050d8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80050dc:	d9dc      	bls.n	8005098 <_printf_float+0x138>
 80050de:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80050e2:	d118      	bne.n	8005116 <_printf_float+0x1b6>
 80050e4:	2900      	cmp	r1, #0
 80050e6:	6863      	ldr	r3, [r4, #4]
 80050e8:	dd0b      	ble.n	8005102 <_printf_float+0x1a2>
 80050ea:	6121      	str	r1, [r4, #16]
 80050ec:	b913      	cbnz	r3, 80050f4 <_printf_float+0x194>
 80050ee:	6822      	ldr	r2, [r4, #0]
 80050f0:	07d0      	lsls	r0, r2, #31
 80050f2:	d502      	bpl.n	80050fa <_printf_float+0x19a>
 80050f4:	3301      	adds	r3, #1
 80050f6:	440b      	add	r3, r1
 80050f8:	6123      	str	r3, [r4, #16]
 80050fa:	f04f 0900 	mov.w	r9, #0
 80050fe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005100:	e7dc      	b.n	80050bc <_printf_float+0x15c>
 8005102:	b913      	cbnz	r3, 800510a <_printf_float+0x1aa>
 8005104:	6822      	ldr	r2, [r4, #0]
 8005106:	07d2      	lsls	r2, r2, #31
 8005108:	d501      	bpl.n	800510e <_printf_float+0x1ae>
 800510a:	3302      	adds	r3, #2
 800510c:	e7f4      	b.n	80050f8 <_printf_float+0x198>
 800510e:	2301      	movs	r3, #1
 8005110:	e7f2      	b.n	80050f8 <_printf_float+0x198>
 8005112:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005116:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005118:	4299      	cmp	r1, r3
 800511a:	db05      	blt.n	8005128 <_printf_float+0x1c8>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	6121      	str	r1, [r4, #16]
 8005120:	07d8      	lsls	r0, r3, #31
 8005122:	d5ea      	bpl.n	80050fa <_printf_float+0x19a>
 8005124:	1c4b      	adds	r3, r1, #1
 8005126:	e7e7      	b.n	80050f8 <_printf_float+0x198>
 8005128:	2900      	cmp	r1, #0
 800512a:	bfcc      	ite	gt
 800512c:	2201      	movgt	r2, #1
 800512e:	f1c1 0202 	rsble	r2, r1, #2
 8005132:	4413      	add	r3, r2
 8005134:	e7e0      	b.n	80050f8 <_printf_float+0x198>
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	055a      	lsls	r2, r3, #21
 800513a:	d407      	bmi.n	800514c <_printf_float+0x1ec>
 800513c:	6923      	ldr	r3, [r4, #16]
 800513e:	4642      	mov	r2, r8
 8005140:	4631      	mov	r1, r6
 8005142:	4628      	mov	r0, r5
 8005144:	47b8      	blx	r7
 8005146:	3001      	adds	r0, #1
 8005148:	d12b      	bne.n	80051a2 <_printf_float+0x242>
 800514a:	e764      	b.n	8005016 <_printf_float+0xb6>
 800514c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005150:	f240 80dc 	bls.w	800530c <_printf_float+0x3ac>
 8005154:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005158:	2200      	movs	r2, #0
 800515a:	2300      	movs	r3, #0
 800515c:	f7fb fc24 	bl	80009a8 <__aeabi_dcmpeq>
 8005160:	2800      	cmp	r0, #0
 8005162:	d033      	beq.n	80051cc <_printf_float+0x26c>
 8005164:	2301      	movs	r3, #1
 8005166:	4631      	mov	r1, r6
 8005168:	4628      	mov	r0, r5
 800516a:	4a35      	ldr	r2, [pc, #212]	@ (8005240 <_printf_float+0x2e0>)
 800516c:	47b8      	blx	r7
 800516e:	3001      	adds	r0, #1
 8005170:	f43f af51 	beq.w	8005016 <_printf_float+0xb6>
 8005174:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005178:	4543      	cmp	r3, r8
 800517a:	db02      	blt.n	8005182 <_printf_float+0x222>
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	07d8      	lsls	r0, r3, #31
 8005180:	d50f      	bpl.n	80051a2 <_printf_float+0x242>
 8005182:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005186:	4631      	mov	r1, r6
 8005188:	4628      	mov	r0, r5
 800518a:	47b8      	blx	r7
 800518c:	3001      	adds	r0, #1
 800518e:	f43f af42 	beq.w	8005016 <_printf_float+0xb6>
 8005192:	f04f 0900 	mov.w	r9, #0
 8005196:	f108 38ff 	add.w	r8, r8, #4294967295
 800519a:	f104 0a1a 	add.w	sl, r4, #26
 800519e:	45c8      	cmp	r8, r9
 80051a0:	dc09      	bgt.n	80051b6 <_printf_float+0x256>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	079b      	lsls	r3, r3, #30
 80051a6:	f100 8102 	bmi.w	80053ae <_printf_float+0x44e>
 80051aa:	68e0      	ldr	r0, [r4, #12]
 80051ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80051ae:	4298      	cmp	r0, r3
 80051b0:	bfb8      	it	lt
 80051b2:	4618      	movlt	r0, r3
 80051b4:	e731      	b.n	800501a <_printf_float+0xba>
 80051b6:	2301      	movs	r3, #1
 80051b8:	4652      	mov	r2, sl
 80051ba:	4631      	mov	r1, r6
 80051bc:	4628      	mov	r0, r5
 80051be:	47b8      	blx	r7
 80051c0:	3001      	adds	r0, #1
 80051c2:	f43f af28 	beq.w	8005016 <_printf_float+0xb6>
 80051c6:	f109 0901 	add.w	r9, r9, #1
 80051ca:	e7e8      	b.n	800519e <_printf_float+0x23e>
 80051cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	dc38      	bgt.n	8005244 <_printf_float+0x2e4>
 80051d2:	2301      	movs	r3, #1
 80051d4:	4631      	mov	r1, r6
 80051d6:	4628      	mov	r0, r5
 80051d8:	4a19      	ldr	r2, [pc, #100]	@ (8005240 <_printf_float+0x2e0>)
 80051da:	47b8      	blx	r7
 80051dc:	3001      	adds	r0, #1
 80051de:	f43f af1a 	beq.w	8005016 <_printf_float+0xb6>
 80051e2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80051e6:	ea59 0303 	orrs.w	r3, r9, r3
 80051ea:	d102      	bne.n	80051f2 <_printf_float+0x292>
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	07d9      	lsls	r1, r3, #31
 80051f0:	d5d7      	bpl.n	80051a2 <_printf_float+0x242>
 80051f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80051f6:	4631      	mov	r1, r6
 80051f8:	4628      	mov	r0, r5
 80051fa:	47b8      	blx	r7
 80051fc:	3001      	adds	r0, #1
 80051fe:	f43f af0a 	beq.w	8005016 <_printf_float+0xb6>
 8005202:	f04f 0a00 	mov.w	sl, #0
 8005206:	f104 0b1a 	add.w	fp, r4, #26
 800520a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800520c:	425b      	negs	r3, r3
 800520e:	4553      	cmp	r3, sl
 8005210:	dc01      	bgt.n	8005216 <_printf_float+0x2b6>
 8005212:	464b      	mov	r3, r9
 8005214:	e793      	b.n	800513e <_printf_float+0x1de>
 8005216:	2301      	movs	r3, #1
 8005218:	465a      	mov	r2, fp
 800521a:	4631      	mov	r1, r6
 800521c:	4628      	mov	r0, r5
 800521e:	47b8      	blx	r7
 8005220:	3001      	adds	r0, #1
 8005222:	f43f aef8 	beq.w	8005016 <_printf_float+0xb6>
 8005226:	f10a 0a01 	add.w	sl, sl, #1
 800522a:	e7ee      	b.n	800520a <_printf_float+0x2aa>
 800522c:	7fefffff 	.word	0x7fefffff
 8005230:	08008d36 	.word	0x08008d36
 8005234:	08008d3a 	.word	0x08008d3a
 8005238:	08008d3e 	.word	0x08008d3e
 800523c:	08008d42 	.word	0x08008d42
 8005240:	08008d46 	.word	0x08008d46
 8005244:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005246:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800524a:	4553      	cmp	r3, sl
 800524c:	bfa8      	it	ge
 800524e:	4653      	movge	r3, sl
 8005250:	2b00      	cmp	r3, #0
 8005252:	4699      	mov	r9, r3
 8005254:	dc36      	bgt.n	80052c4 <_printf_float+0x364>
 8005256:	f04f 0b00 	mov.w	fp, #0
 800525a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800525e:	f104 021a 	add.w	r2, r4, #26
 8005262:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005264:	930a      	str	r3, [sp, #40]	@ 0x28
 8005266:	eba3 0309 	sub.w	r3, r3, r9
 800526a:	455b      	cmp	r3, fp
 800526c:	dc31      	bgt.n	80052d2 <_printf_float+0x372>
 800526e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005270:	459a      	cmp	sl, r3
 8005272:	dc3a      	bgt.n	80052ea <_printf_float+0x38a>
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	07da      	lsls	r2, r3, #31
 8005278:	d437      	bmi.n	80052ea <_printf_float+0x38a>
 800527a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800527c:	ebaa 0903 	sub.w	r9, sl, r3
 8005280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005282:	ebaa 0303 	sub.w	r3, sl, r3
 8005286:	4599      	cmp	r9, r3
 8005288:	bfa8      	it	ge
 800528a:	4699      	movge	r9, r3
 800528c:	f1b9 0f00 	cmp.w	r9, #0
 8005290:	dc33      	bgt.n	80052fa <_printf_float+0x39a>
 8005292:	f04f 0800 	mov.w	r8, #0
 8005296:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800529a:	f104 0b1a 	add.w	fp, r4, #26
 800529e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052a0:	ebaa 0303 	sub.w	r3, sl, r3
 80052a4:	eba3 0309 	sub.w	r3, r3, r9
 80052a8:	4543      	cmp	r3, r8
 80052aa:	f77f af7a 	ble.w	80051a2 <_printf_float+0x242>
 80052ae:	2301      	movs	r3, #1
 80052b0:	465a      	mov	r2, fp
 80052b2:	4631      	mov	r1, r6
 80052b4:	4628      	mov	r0, r5
 80052b6:	47b8      	blx	r7
 80052b8:	3001      	adds	r0, #1
 80052ba:	f43f aeac 	beq.w	8005016 <_printf_float+0xb6>
 80052be:	f108 0801 	add.w	r8, r8, #1
 80052c2:	e7ec      	b.n	800529e <_printf_float+0x33e>
 80052c4:	4642      	mov	r2, r8
 80052c6:	4631      	mov	r1, r6
 80052c8:	4628      	mov	r0, r5
 80052ca:	47b8      	blx	r7
 80052cc:	3001      	adds	r0, #1
 80052ce:	d1c2      	bne.n	8005256 <_printf_float+0x2f6>
 80052d0:	e6a1      	b.n	8005016 <_printf_float+0xb6>
 80052d2:	2301      	movs	r3, #1
 80052d4:	4631      	mov	r1, r6
 80052d6:	4628      	mov	r0, r5
 80052d8:	920a      	str	r2, [sp, #40]	@ 0x28
 80052da:	47b8      	blx	r7
 80052dc:	3001      	adds	r0, #1
 80052de:	f43f ae9a 	beq.w	8005016 <_printf_float+0xb6>
 80052e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80052e4:	f10b 0b01 	add.w	fp, fp, #1
 80052e8:	e7bb      	b.n	8005262 <_printf_float+0x302>
 80052ea:	4631      	mov	r1, r6
 80052ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80052f0:	4628      	mov	r0, r5
 80052f2:	47b8      	blx	r7
 80052f4:	3001      	adds	r0, #1
 80052f6:	d1c0      	bne.n	800527a <_printf_float+0x31a>
 80052f8:	e68d      	b.n	8005016 <_printf_float+0xb6>
 80052fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80052fc:	464b      	mov	r3, r9
 80052fe:	4631      	mov	r1, r6
 8005300:	4628      	mov	r0, r5
 8005302:	4442      	add	r2, r8
 8005304:	47b8      	blx	r7
 8005306:	3001      	adds	r0, #1
 8005308:	d1c3      	bne.n	8005292 <_printf_float+0x332>
 800530a:	e684      	b.n	8005016 <_printf_float+0xb6>
 800530c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005310:	f1ba 0f01 	cmp.w	sl, #1
 8005314:	dc01      	bgt.n	800531a <_printf_float+0x3ba>
 8005316:	07db      	lsls	r3, r3, #31
 8005318:	d536      	bpl.n	8005388 <_printf_float+0x428>
 800531a:	2301      	movs	r3, #1
 800531c:	4642      	mov	r2, r8
 800531e:	4631      	mov	r1, r6
 8005320:	4628      	mov	r0, r5
 8005322:	47b8      	blx	r7
 8005324:	3001      	adds	r0, #1
 8005326:	f43f ae76 	beq.w	8005016 <_printf_float+0xb6>
 800532a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800532e:	4631      	mov	r1, r6
 8005330:	4628      	mov	r0, r5
 8005332:	47b8      	blx	r7
 8005334:	3001      	adds	r0, #1
 8005336:	f43f ae6e 	beq.w	8005016 <_printf_float+0xb6>
 800533a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800533e:	2200      	movs	r2, #0
 8005340:	2300      	movs	r3, #0
 8005342:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005346:	f7fb fb2f 	bl	80009a8 <__aeabi_dcmpeq>
 800534a:	b9c0      	cbnz	r0, 800537e <_printf_float+0x41e>
 800534c:	4653      	mov	r3, sl
 800534e:	f108 0201 	add.w	r2, r8, #1
 8005352:	4631      	mov	r1, r6
 8005354:	4628      	mov	r0, r5
 8005356:	47b8      	blx	r7
 8005358:	3001      	adds	r0, #1
 800535a:	d10c      	bne.n	8005376 <_printf_float+0x416>
 800535c:	e65b      	b.n	8005016 <_printf_float+0xb6>
 800535e:	2301      	movs	r3, #1
 8005360:	465a      	mov	r2, fp
 8005362:	4631      	mov	r1, r6
 8005364:	4628      	mov	r0, r5
 8005366:	47b8      	blx	r7
 8005368:	3001      	adds	r0, #1
 800536a:	f43f ae54 	beq.w	8005016 <_printf_float+0xb6>
 800536e:	f108 0801 	add.w	r8, r8, #1
 8005372:	45d0      	cmp	r8, sl
 8005374:	dbf3      	blt.n	800535e <_printf_float+0x3fe>
 8005376:	464b      	mov	r3, r9
 8005378:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800537c:	e6e0      	b.n	8005140 <_printf_float+0x1e0>
 800537e:	f04f 0800 	mov.w	r8, #0
 8005382:	f104 0b1a 	add.w	fp, r4, #26
 8005386:	e7f4      	b.n	8005372 <_printf_float+0x412>
 8005388:	2301      	movs	r3, #1
 800538a:	4642      	mov	r2, r8
 800538c:	e7e1      	b.n	8005352 <_printf_float+0x3f2>
 800538e:	2301      	movs	r3, #1
 8005390:	464a      	mov	r2, r9
 8005392:	4631      	mov	r1, r6
 8005394:	4628      	mov	r0, r5
 8005396:	47b8      	blx	r7
 8005398:	3001      	adds	r0, #1
 800539a:	f43f ae3c 	beq.w	8005016 <_printf_float+0xb6>
 800539e:	f108 0801 	add.w	r8, r8, #1
 80053a2:	68e3      	ldr	r3, [r4, #12]
 80053a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80053a6:	1a5b      	subs	r3, r3, r1
 80053a8:	4543      	cmp	r3, r8
 80053aa:	dcf0      	bgt.n	800538e <_printf_float+0x42e>
 80053ac:	e6fd      	b.n	80051aa <_printf_float+0x24a>
 80053ae:	f04f 0800 	mov.w	r8, #0
 80053b2:	f104 0919 	add.w	r9, r4, #25
 80053b6:	e7f4      	b.n	80053a2 <_printf_float+0x442>

080053b8 <_printf_common>:
 80053b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053bc:	4616      	mov	r6, r2
 80053be:	4698      	mov	r8, r3
 80053c0:	688a      	ldr	r2, [r1, #8]
 80053c2:	690b      	ldr	r3, [r1, #16]
 80053c4:	4607      	mov	r7, r0
 80053c6:	4293      	cmp	r3, r2
 80053c8:	bfb8      	it	lt
 80053ca:	4613      	movlt	r3, r2
 80053cc:	6033      	str	r3, [r6, #0]
 80053ce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80053d2:	460c      	mov	r4, r1
 80053d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053d8:	b10a      	cbz	r2, 80053de <_printf_common+0x26>
 80053da:	3301      	adds	r3, #1
 80053dc:	6033      	str	r3, [r6, #0]
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	0699      	lsls	r1, r3, #26
 80053e2:	bf42      	ittt	mi
 80053e4:	6833      	ldrmi	r3, [r6, #0]
 80053e6:	3302      	addmi	r3, #2
 80053e8:	6033      	strmi	r3, [r6, #0]
 80053ea:	6825      	ldr	r5, [r4, #0]
 80053ec:	f015 0506 	ands.w	r5, r5, #6
 80053f0:	d106      	bne.n	8005400 <_printf_common+0x48>
 80053f2:	f104 0a19 	add.w	sl, r4, #25
 80053f6:	68e3      	ldr	r3, [r4, #12]
 80053f8:	6832      	ldr	r2, [r6, #0]
 80053fa:	1a9b      	subs	r3, r3, r2
 80053fc:	42ab      	cmp	r3, r5
 80053fe:	dc2b      	bgt.n	8005458 <_printf_common+0xa0>
 8005400:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005404:	6822      	ldr	r2, [r4, #0]
 8005406:	3b00      	subs	r3, #0
 8005408:	bf18      	it	ne
 800540a:	2301      	movne	r3, #1
 800540c:	0692      	lsls	r2, r2, #26
 800540e:	d430      	bmi.n	8005472 <_printf_common+0xba>
 8005410:	4641      	mov	r1, r8
 8005412:	4638      	mov	r0, r7
 8005414:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005418:	47c8      	blx	r9
 800541a:	3001      	adds	r0, #1
 800541c:	d023      	beq.n	8005466 <_printf_common+0xae>
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	6922      	ldr	r2, [r4, #16]
 8005422:	f003 0306 	and.w	r3, r3, #6
 8005426:	2b04      	cmp	r3, #4
 8005428:	bf14      	ite	ne
 800542a:	2500      	movne	r5, #0
 800542c:	6833      	ldreq	r3, [r6, #0]
 800542e:	f04f 0600 	mov.w	r6, #0
 8005432:	bf08      	it	eq
 8005434:	68e5      	ldreq	r5, [r4, #12]
 8005436:	f104 041a 	add.w	r4, r4, #26
 800543a:	bf08      	it	eq
 800543c:	1aed      	subeq	r5, r5, r3
 800543e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005442:	bf08      	it	eq
 8005444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005448:	4293      	cmp	r3, r2
 800544a:	bfc4      	itt	gt
 800544c:	1a9b      	subgt	r3, r3, r2
 800544e:	18ed      	addgt	r5, r5, r3
 8005450:	42b5      	cmp	r5, r6
 8005452:	d11a      	bne.n	800548a <_printf_common+0xd2>
 8005454:	2000      	movs	r0, #0
 8005456:	e008      	b.n	800546a <_printf_common+0xb2>
 8005458:	2301      	movs	r3, #1
 800545a:	4652      	mov	r2, sl
 800545c:	4641      	mov	r1, r8
 800545e:	4638      	mov	r0, r7
 8005460:	47c8      	blx	r9
 8005462:	3001      	adds	r0, #1
 8005464:	d103      	bne.n	800546e <_printf_common+0xb6>
 8005466:	f04f 30ff 	mov.w	r0, #4294967295
 800546a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800546e:	3501      	adds	r5, #1
 8005470:	e7c1      	b.n	80053f6 <_printf_common+0x3e>
 8005472:	2030      	movs	r0, #48	@ 0x30
 8005474:	18e1      	adds	r1, r4, r3
 8005476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005480:	4422      	add	r2, r4
 8005482:	3302      	adds	r3, #2
 8005484:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005488:	e7c2      	b.n	8005410 <_printf_common+0x58>
 800548a:	2301      	movs	r3, #1
 800548c:	4622      	mov	r2, r4
 800548e:	4641      	mov	r1, r8
 8005490:	4638      	mov	r0, r7
 8005492:	47c8      	blx	r9
 8005494:	3001      	adds	r0, #1
 8005496:	d0e6      	beq.n	8005466 <_printf_common+0xae>
 8005498:	3601      	adds	r6, #1
 800549a:	e7d9      	b.n	8005450 <_printf_common+0x98>

0800549c <_printf_i>:
 800549c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054a0:	7e0f      	ldrb	r7, [r1, #24]
 80054a2:	4691      	mov	r9, r2
 80054a4:	2f78      	cmp	r7, #120	@ 0x78
 80054a6:	4680      	mov	r8, r0
 80054a8:	460c      	mov	r4, r1
 80054aa:	469a      	mov	sl, r3
 80054ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054b2:	d807      	bhi.n	80054c4 <_printf_i+0x28>
 80054b4:	2f62      	cmp	r7, #98	@ 0x62
 80054b6:	d80a      	bhi.n	80054ce <_printf_i+0x32>
 80054b8:	2f00      	cmp	r7, #0
 80054ba:	f000 80d3 	beq.w	8005664 <_printf_i+0x1c8>
 80054be:	2f58      	cmp	r7, #88	@ 0x58
 80054c0:	f000 80ba 	beq.w	8005638 <_printf_i+0x19c>
 80054c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054cc:	e03a      	b.n	8005544 <_printf_i+0xa8>
 80054ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054d2:	2b15      	cmp	r3, #21
 80054d4:	d8f6      	bhi.n	80054c4 <_printf_i+0x28>
 80054d6:	a101      	add	r1, pc, #4	@ (adr r1, 80054dc <_printf_i+0x40>)
 80054d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054dc:	08005535 	.word	0x08005535
 80054e0:	08005549 	.word	0x08005549
 80054e4:	080054c5 	.word	0x080054c5
 80054e8:	080054c5 	.word	0x080054c5
 80054ec:	080054c5 	.word	0x080054c5
 80054f0:	080054c5 	.word	0x080054c5
 80054f4:	08005549 	.word	0x08005549
 80054f8:	080054c5 	.word	0x080054c5
 80054fc:	080054c5 	.word	0x080054c5
 8005500:	080054c5 	.word	0x080054c5
 8005504:	080054c5 	.word	0x080054c5
 8005508:	0800564b 	.word	0x0800564b
 800550c:	08005573 	.word	0x08005573
 8005510:	08005605 	.word	0x08005605
 8005514:	080054c5 	.word	0x080054c5
 8005518:	080054c5 	.word	0x080054c5
 800551c:	0800566d 	.word	0x0800566d
 8005520:	080054c5 	.word	0x080054c5
 8005524:	08005573 	.word	0x08005573
 8005528:	080054c5 	.word	0x080054c5
 800552c:	080054c5 	.word	0x080054c5
 8005530:	0800560d 	.word	0x0800560d
 8005534:	6833      	ldr	r3, [r6, #0]
 8005536:	1d1a      	adds	r2, r3, #4
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6032      	str	r2, [r6, #0]
 800553c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005544:	2301      	movs	r3, #1
 8005546:	e09e      	b.n	8005686 <_printf_i+0x1ea>
 8005548:	6833      	ldr	r3, [r6, #0]
 800554a:	6820      	ldr	r0, [r4, #0]
 800554c:	1d19      	adds	r1, r3, #4
 800554e:	6031      	str	r1, [r6, #0]
 8005550:	0606      	lsls	r6, r0, #24
 8005552:	d501      	bpl.n	8005558 <_printf_i+0xbc>
 8005554:	681d      	ldr	r5, [r3, #0]
 8005556:	e003      	b.n	8005560 <_printf_i+0xc4>
 8005558:	0645      	lsls	r5, r0, #25
 800555a:	d5fb      	bpl.n	8005554 <_printf_i+0xb8>
 800555c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005560:	2d00      	cmp	r5, #0
 8005562:	da03      	bge.n	800556c <_printf_i+0xd0>
 8005564:	232d      	movs	r3, #45	@ 0x2d
 8005566:	426d      	negs	r5, r5
 8005568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800556c:	230a      	movs	r3, #10
 800556e:	4859      	ldr	r0, [pc, #356]	@ (80056d4 <_printf_i+0x238>)
 8005570:	e011      	b.n	8005596 <_printf_i+0xfa>
 8005572:	6821      	ldr	r1, [r4, #0]
 8005574:	6833      	ldr	r3, [r6, #0]
 8005576:	0608      	lsls	r0, r1, #24
 8005578:	f853 5b04 	ldr.w	r5, [r3], #4
 800557c:	d402      	bmi.n	8005584 <_printf_i+0xe8>
 800557e:	0649      	lsls	r1, r1, #25
 8005580:	bf48      	it	mi
 8005582:	b2ad      	uxthmi	r5, r5
 8005584:	2f6f      	cmp	r7, #111	@ 0x6f
 8005586:	6033      	str	r3, [r6, #0]
 8005588:	bf14      	ite	ne
 800558a:	230a      	movne	r3, #10
 800558c:	2308      	moveq	r3, #8
 800558e:	4851      	ldr	r0, [pc, #324]	@ (80056d4 <_printf_i+0x238>)
 8005590:	2100      	movs	r1, #0
 8005592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005596:	6866      	ldr	r6, [r4, #4]
 8005598:	2e00      	cmp	r6, #0
 800559a:	bfa8      	it	ge
 800559c:	6821      	ldrge	r1, [r4, #0]
 800559e:	60a6      	str	r6, [r4, #8]
 80055a0:	bfa4      	itt	ge
 80055a2:	f021 0104 	bicge.w	r1, r1, #4
 80055a6:	6021      	strge	r1, [r4, #0]
 80055a8:	b90d      	cbnz	r5, 80055ae <_printf_i+0x112>
 80055aa:	2e00      	cmp	r6, #0
 80055ac:	d04b      	beq.n	8005646 <_printf_i+0x1aa>
 80055ae:	4616      	mov	r6, r2
 80055b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80055b4:	fb03 5711 	mls	r7, r3, r1, r5
 80055b8:	5dc7      	ldrb	r7, [r0, r7]
 80055ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055be:	462f      	mov	r7, r5
 80055c0:	42bb      	cmp	r3, r7
 80055c2:	460d      	mov	r5, r1
 80055c4:	d9f4      	bls.n	80055b0 <_printf_i+0x114>
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	d10b      	bne.n	80055e2 <_printf_i+0x146>
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	07df      	lsls	r7, r3, #31
 80055ce:	d508      	bpl.n	80055e2 <_printf_i+0x146>
 80055d0:	6923      	ldr	r3, [r4, #16]
 80055d2:	6861      	ldr	r1, [r4, #4]
 80055d4:	4299      	cmp	r1, r3
 80055d6:	bfde      	ittt	le
 80055d8:	2330      	movle	r3, #48	@ 0x30
 80055da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055e2:	1b92      	subs	r2, r2, r6
 80055e4:	6122      	str	r2, [r4, #16]
 80055e6:	464b      	mov	r3, r9
 80055e8:	4621      	mov	r1, r4
 80055ea:	4640      	mov	r0, r8
 80055ec:	f8cd a000 	str.w	sl, [sp]
 80055f0:	aa03      	add	r2, sp, #12
 80055f2:	f7ff fee1 	bl	80053b8 <_printf_common>
 80055f6:	3001      	adds	r0, #1
 80055f8:	d14a      	bne.n	8005690 <_printf_i+0x1f4>
 80055fa:	f04f 30ff 	mov.w	r0, #4294967295
 80055fe:	b004      	add	sp, #16
 8005600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	f043 0320 	orr.w	r3, r3, #32
 800560a:	6023      	str	r3, [r4, #0]
 800560c:	2778      	movs	r7, #120	@ 0x78
 800560e:	4832      	ldr	r0, [pc, #200]	@ (80056d8 <_printf_i+0x23c>)
 8005610:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	6831      	ldr	r1, [r6, #0]
 8005618:	061f      	lsls	r7, r3, #24
 800561a:	f851 5b04 	ldr.w	r5, [r1], #4
 800561e:	d402      	bmi.n	8005626 <_printf_i+0x18a>
 8005620:	065f      	lsls	r7, r3, #25
 8005622:	bf48      	it	mi
 8005624:	b2ad      	uxthmi	r5, r5
 8005626:	6031      	str	r1, [r6, #0]
 8005628:	07d9      	lsls	r1, r3, #31
 800562a:	bf44      	itt	mi
 800562c:	f043 0320 	orrmi.w	r3, r3, #32
 8005630:	6023      	strmi	r3, [r4, #0]
 8005632:	b11d      	cbz	r5, 800563c <_printf_i+0x1a0>
 8005634:	2310      	movs	r3, #16
 8005636:	e7ab      	b.n	8005590 <_printf_i+0xf4>
 8005638:	4826      	ldr	r0, [pc, #152]	@ (80056d4 <_printf_i+0x238>)
 800563a:	e7e9      	b.n	8005610 <_printf_i+0x174>
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	f023 0320 	bic.w	r3, r3, #32
 8005642:	6023      	str	r3, [r4, #0]
 8005644:	e7f6      	b.n	8005634 <_printf_i+0x198>
 8005646:	4616      	mov	r6, r2
 8005648:	e7bd      	b.n	80055c6 <_printf_i+0x12a>
 800564a:	6833      	ldr	r3, [r6, #0]
 800564c:	6825      	ldr	r5, [r4, #0]
 800564e:	1d18      	adds	r0, r3, #4
 8005650:	6961      	ldr	r1, [r4, #20]
 8005652:	6030      	str	r0, [r6, #0]
 8005654:	062e      	lsls	r6, r5, #24
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	d501      	bpl.n	800565e <_printf_i+0x1c2>
 800565a:	6019      	str	r1, [r3, #0]
 800565c:	e002      	b.n	8005664 <_printf_i+0x1c8>
 800565e:	0668      	lsls	r0, r5, #25
 8005660:	d5fb      	bpl.n	800565a <_printf_i+0x1be>
 8005662:	8019      	strh	r1, [r3, #0]
 8005664:	2300      	movs	r3, #0
 8005666:	4616      	mov	r6, r2
 8005668:	6123      	str	r3, [r4, #16]
 800566a:	e7bc      	b.n	80055e6 <_printf_i+0x14a>
 800566c:	6833      	ldr	r3, [r6, #0]
 800566e:	2100      	movs	r1, #0
 8005670:	1d1a      	adds	r2, r3, #4
 8005672:	6032      	str	r2, [r6, #0]
 8005674:	681e      	ldr	r6, [r3, #0]
 8005676:	6862      	ldr	r2, [r4, #4]
 8005678:	4630      	mov	r0, r6
 800567a:	f000 fa08 	bl	8005a8e <memchr>
 800567e:	b108      	cbz	r0, 8005684 <_printf_i+0x1e8>
 8005680:	1b80      	subs	r0, r0, r6
 8005682:	6060      	str	r0, [r4, #4]
 8005684:	6863      	ldr	r3, [r4, #4]
 8005686:	6123      	str	r3, [r4, #16]
 8005688:	2300      	movs	r3, #0
 800568a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800568e:	e7aa      	b.n	80055e6 <_printf_i+0x14a>
 8005690:	4632      	mov	r2, r6
 8005692:	4649      	mov	r1, r9
 8005694:	4640      	mov	r0, r8
 8005696:	6923      	ldr	r3, [r4, #16]
 8005698:	47d0      	blx	sl
 800569a:	3001      	adds	r0, #1
 800569c:	d0ad      	beq.n	80055fa <_printf_i+0x15e>
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	079b      	lsls	r3, r3, #30
 80056a2:	d413      	bmi.n	80056cc <_printf_i+0x230>
 80056a4:	68e0      	ldr	r0, [r4, #12]
 80056a6:	9b03      	ldr	r3, [sp, #12]
 80056a8:	4298      	cmp	r0, r3
 80056aa:	bfb8      	it	lt
 80056ac:	4618      	movlt	r0, r3
 80056ae:	e7a6      	b.n	80055fe <_printf_i+0x162>
 80056b0:	2301      	movs	r3, #1
 80056b2:	4632      	mov	r2, r6
 80056b4:	4649      	mov	r1, r9
 80056b6:	4640      	mov	r0, r8
 80056b8:	47d0      	blx	sl
 80056ba:	3001      	adds	r0, #1
 80056bc:	d09d      	beq.n	80055fa <_printf_i+0x15e>
 80056be:	3501      	adds	r5, #1
 80056c0:	68e3      	ldr	r3, [r4, #12]
 80056c2:	9903      	ldr	r1, [sp, #12]
 80056c4:	1a5b      	subs	r3, r3, r1
 80056c6:	42ab      	cmp	r3, r5
 80056c8:	dcf2      	bgt.n	80056b0 <_printf_i+0x214>
 80056ca:	e7eb      	b.n	80056a4 <_printf_i+0x208>
 80056cc:	2500      	movs	r5, #0
 80056ce:	f104 0619 	add.w	r6, r4, #25
 80056d2:	e7f5      	b.n	80056c0 <_printf_i+0x224>
 80056d4:	08008d48 	.word	0x08008d48
 80056d8:	08008d59 	.word	0x08008d59

080056dc <std>:
 80056dc:	2300      	movs	r3, #0
 80056de:	b510      	push	{r4, lr}
 80056e0:	4604      	mov	r4, r0
 80056e2:	e9c0 3300 	strd	r3, r3, [r0]
 80056e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056ea:	6083      	str	r3, [r0, #8]
 80056ec:	8181      	strh	r1, [r0, #12]
 80056ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80056f0:	81c2      	strh	r2, [r0, #14]
 80056f2:	6183      	str	r3, [r0, #24]
 80056f4:	4619      	mov	r1, r3
 80056f6:	2208      	movs	r2, #8
 80056f8:	305c      	adds	r0, #92	@ 0x5c
 80056fa:	f000 f948 	bl	800598e <memset>
 80056fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005734 <std+0x58>)
 8005700:	6224      	str	r4, [r4, #32]
 8005702:	6263      	str	r3, [r4, #36]	@ 0x24
 8005704:	4b0c      	ldr	r3, [pc, #48]	@ (8005738 <std+0x5c>)
 8005706:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005708:	4b0c      	ldr	r3, [pc, #48]	@ (800573c <std+0x60>)
 800570a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800570c:	4b0c      	ldr	r3, [pc, #48]	@ (8005740 <std+0x64>)
 800570e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005710:	4b0c      	ldr	r3, [pc, #48]	@ (8005744 <std+0x68>)
 8005712:	429c      	cmp	r4, r3
 8005714:	d006      	beq.n	8005724 <std+0x48>
 8005716:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800571a:	4294      	cmp	r4, r2
 800571c:	d002      	beq.n	8005724 <std+0x48>
 800571e:	33d0      	adds	r3, #208	@ 0xd0
 8005720:	429c      	cmp	r4, r3
 8005722:	d105      	bne.n	8005730 <std+0x54>
 8005724:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800572c:	f000 b9ac 	b.w	8005a88 <__retarget_lock_init_recursive>
 8005730:	bd10      	pop	{r4, pc}
 8005732:	bf00      	nop
 8005734:	08005909 	.word	0x08005909
 8005738:	0800592b 	.word	0x0800592b
 800573c:	08005963 	.word	0x08005963
 8005740:	08005987 	.word	0x08005987
 8005744:	20000388 	.word	0x20000388

08005748 <stdio_exit_handler>:
 8005748:	4a02      	ldr	r2, [pc, #8]	@ (8005754 <stdio_exit_handler+0xc>)
 800574a:	4903      	ldr	r1, [pc, #12]	@ (8005758 <stdio_exit_handler+0x10>)
 800574c:	4803      	ldr	r0, [pc, #12]	@ (800575c <stdio_exit_handler+0x14>)
 800574e:	f000 b869 	b.w	8005824 <_fwalk_sglue>
 8005752:	bf00      	nop
 8005754:	20000014 	.word	0x20000014
 8005758:	080073fd 	.word	0x080073fd
 800575c:	20000024 	.word	0x20000024

08005760 <cleanup_stdio>:
 8005760:	6841      	ldr	r1, [r0, #4]
 8005762:	4b0c      	ldr	r3, [pc, #48]	@ (8005794 <cleanup_stdio+0x34>)
 8005764:	b510      	push	{r4, lr}
 8005766:	4299      	cmp	r1, r3
 8005768:	4604      	mov	r4, r0
 800576a:	d001      	beq.n	8005770 <cleanup_stdio+0x10>
 800576c:	f001 fe46 	bl	80073fc <_fflush_r>
 8005770:	68a1      	ldr	r1, [r4, #8]
 8005772:	4b09      	ldr	r3, [pc, #36]	@ (8005798 <cleanup_stdio+0x38>)
 8005774:	4299      	cmp	r1, r3
 8005776:	d002      	beq.n	800577e <cleanup_stdio+0x1e>
 8005778:	4620      	mov	r0, r4
 800577a:	f001 fe3f 	bl	80073fc <_fflush_r>
 800577e:	68e1      	ldr	r1, [r4, #12]
 8005780:	4b06      	ldr	r3, [pc, #24]	@ (800579c <cleanup_stdio+0x3c>)
 8005782:	4299      	cmp	r1, r3
 8005784:	d004      	beq.n	8005790 <cleanup_stdio+0x30>
 8005786:	4620      	mov	r0, r4
 8005788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800578c:	f001 be36 	b.w	80073fc <_fflush_r>
 8005790:	bd10      	pop	{r4, pc}
 8005792:	bf00      	nop
 8005794:	20000388 	.word	0x20000388
 8005798:	200003f0 	.word	0x200003f0
 800579c:	20000458 	.word	0x20000458

080057a0 <global_stdio_init.part.0>:
 80057a0:	b510      	push	{r4, lr}
 80057a2:	4b0b      	ldr	r3, [pc, #44]	@ (80057d0 <global_stdio_init.part.0+0x30>)
 80057a4:	4c0b      	ldr	r4, [pc, #44]	@ (80057d4 <global_stdio_init.part.0+0x34>)
 80057a6:	4a0c      	ldr	r2, [pc, #48]	@ (80057d8 <global_stdio_init.part.0+0x38>)
 80057a8:	4620      	mov	r0, r4
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	2104      	movs	r1, #4
 80057ae:	2200      	movs	r2, #0
 80057b0:	f7ff ff94 	bl	80056dc <std>
 80057b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80057b8:	2201      	movs	r2, #1
 80057ba:	2109      	movs	r1, #9
 80057bc:	f7ff ff8e 	bl	80056dc <std>
 80057c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80057c4:	2202      	movs	r2, #2
 80057c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057ca:	2112      	movs	r1, #18
 80057cc:	f7ff bf86 	b.w	80056dc <std>
 80057d0:	200004c0 	.word	0x200004c0
 80057d4:	20000388 	.word	0x20000388
 80057d8:	08005749 	.word	0x08005749

080057dc <__sfp_lock_acquire>:
 80057dc:	4801      	ldr	r0, [pc, #4]	@ (80057e4 <__sfp_lock_acquire+0x8>)
 80057de:	f000 b954 	b.w	8005a8a <__retarget_lock_acquire_recursive>
 80057e2:	bf00      	nop
 80057e4:	200004c9 	.word	0x200004c9

080057e8 <__sfp_lock_release>:
 80057e8:	4801      	ldr	r0, [pc, #4]	@ (80057f0 <__sfp_lock_release+0x8>)
 80057ea:	f000 b94f 	b.w	8005a8c <__retarget_lock_release_recursive>
 80057ee:	bf00      	nop
 80057f0:	200004c9 	.word	0x200004c9

080057f4 <__sinit>:
 80057f4:	b510      	push	{r4, lr}
 80057f6:	4604      	mov	r4, r0
 80057f8:	f7ff fff0 	bl	80057dc <__sfp_lock_acquire>
 80057fc:	6a23      	ldr	r3, [r4, #32]
 80057fe:	b11b      	cbz	r3, 8005808 <__sinit+0x14>
 8005800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005804:	f7ff bff0 	b.w	80057e8 <__sfp_lock_release>
 8005808:	4b04      	ldr	r3, [pc, #16]	@ (800581c <__sinit+0x28>)
 800580a:	6223      	str	r3, [r4, #32]
 800580c:	4b04      	ldr	r3, [pc, #16]	@ (8005820 <__sinit+0x2c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1f5      	bne.n	8005800 <__sinit+0xc>
 8005814:	f7ff ffc4 	bl	80057a0 <global_stdio_init.part.0>
 8005818:	e7f2      	b.n	8005800 <__sinit+0xc>
 800581a:	bf00      	nop
 800581c:	08005761 	.word	0x08005761
 8005820:	200004c0 	.word	0x200004c0

08005824 <_fwalk_sglue>:
 8005824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005828:	4607      	mov	r7, r0
 800582a:	4688      	mov	r8, r1
 800582c:	4614      	mov	r4, r2
 800582e:	2600      	movs	r6, #0
 8005830:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005834:	f1b9 0901 	subs.w	r9, r9, #1
 8005838:	d505      	bpl.n	8005846 <_fwalk_sglue+0x22>
 800583a:	6824      	ldr	r4, [r4, #0]
 800583c:	2c00      	cmp	r4, #0
 800583e:	d1f7      	bne.n	8005830 <_fwalk_sglue+0xc>
 8005840:	4630      	mov	r0, r6
 8005842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005846:	89ab      	ldrh	r3, [r5, #12]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d907      	bls.n	800585c <_fwalk_sglue+0x38>
 800584c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005850:	3301      	adds	r3, #1
 8005852:	d003      	beq.n	800585c <_fwalk_sglue+0x38>
 8005854:	4629      	mov	r1, r5
 8005856:	4638      	mov	r0, r7
 8005858:	47c0      	blx	r8
 800585a:	4306      	orrs	r6, r0
 800585c:	3568      	adds	r5, #104	@ 0x68
 800585e:	e7e9      	b.n	8005834 <_fwalk_sglue+0x10>

08005860 <sniprintf>:
 8005860:	b40c      	push	{r2, r3}
 8005862:	b530      	push	{r4, r5, lr}
 8005864:	4b17      	ldr	r3, [pc, #92]	@ (80058c4 <sniprintf+0x64>)
 8005866:	1e0c      	subs	r4, r1, #0
 8005868:	681d      	ldr	r5, [r3, #0]
 800586a:	b09d      	sub	sp, #116	@ 0x74
 800586c:	da08      	bge.n	8005880 <sniprintf+0x20>
 800586e:	238b      	movs	r3, #139	@ 0x8b
 8005870:	f04f 30ff 	mov.w	r0, #4294967295
 8005874:	602b      	str	r3, [r5, #0]
 8005876:	b01d      	add	sp, #116	@ 0x74
 8005878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800587c:	b002      	add	sp, #8
 800587e:	4770      	bx	lr
 8005880:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005884:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005888:	bf0c      	ite	eq
 800588a:	4623      	moveq	r3, r4
 800588c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005890:	9304      	str	r3, [sp, #16]
 8005892:	9307      	str	r3, [sp, #28]
 8005894:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005898:	9002      	str	r0, [sp, #8]
 800589a:	9006      	str	r0, [sp, #24]
 800589c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80058a0:	4628      	mov	r0, r5
 80058a2:	ab21      	add	r3, sp, #132	@ 0x84
 80058a4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80058a6:	a902      	add	r1, sp, #8
 80058a8:	9301      	str	r3, [sp, #4]
 80058aa:	f001 fc2b 	bl	8007104 <_svfiprintf_r>
 80058ae:	1c43      	adds	r3, r0, #1
 80058b0:	bfbc      	itt	lt
 80058b2:	238b      	movlt	r3, #139	@ 0x8b
 80058b4:	602b      	strlt	r3, [r5, #0]
 80058b6:	2c00      	cmp	r4, #0
 80058b8:	d0dd      	beq.n	8005876 <sniprintf+0x16>
 80058ba:	2200      	movs	r2, #0
 80058bc:	9b02      	ldr	r3, [sp, #8]
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	e7d9      	b.n	8005876 <sniprintf+0x16>
 80058c2:	bf00      	nop
 80058c4:	20000020 	.word	0x20000020

080058c8 <siprintf>:
 80058c8:	b40e      	push	{r1, r2, r3}
 80058ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80058ce:	b500      	push	{lr}
 80058d0:	b09c      	sub	sp, #112	@ 0x70
 80058d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80058d4:	9002      	str	r0, [sp, #8]
 80058d6:	9006      	str	r0, [sp, #24]
 80058d8:	9107      	str	r1, [sp, #28]
 80058da:	9104      	str	r1, [sp, #16]
 80058dc:	4808      	ldr	r0, [pc, #32]	@ (8005900 <siprintf+0x38>)
 80058de:	4909      	ldr	r1, [pc, #36]	@ (8005904 <siprintf+0x3c>)
 80058e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80058e4:	9105      	str	r1, [sp, #20]
 80058e6:	6800      	ldr	r0, [r0, #0]
 80058e8:	a902      	add	r1, sp, #8
 80058ea:	9301      	str	r3, [sp, #4]
 80058ec:	f001 fc0a 	bl	8007104 <_svfiprintf_r>
 80058f0:	2200      	movs	r2, #0
 80058f2:	9b02      	ldr	r3, [sp, #8]
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	b01c      	add	sp, #112	@ 0x70
 80058f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058fc:	b003      	add	sp, #12
 80058fe:	4770      	bx	lr
 8005900:	20000020 	.word	0x20000020
 8005904:	ffff0208 	.word	0xffff0208

08005908 <__sread>:
 8005908:	b510      	push	{r4, lr}
 800590a:	460c      	mov	r4, r1
 800590c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005910:	f000 f86c 	bl	80059ec <_read_r>
 8005914:	2800      	cmp	r0, #0
 8005916:	bfab      	itete	ge
 8005918:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800591a:	89a3      	ldrhlt	r3, [r4, #12]
 800591c:	181b      	addge	r3, r3, r0
 800591e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005922:	bfac      	ite	ge
 8005924:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005926:	81a3      	strhlt	r3, [r4, #12]
 8005928:	bd10      	pop	{r4, pc}

0800592a <__swrite>:
 800592a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800592e:	461f      	mov	r7, r3
 8005930:	898b      	ldrh	r3, [r1, #12]
 8005932:	4605      	mov	r5, r0
 8005934:	05db      	lsls	r3, r3, #23
 8005936:	460c      	mov	r4, r1
 8005938:	4616      	mov	r6, r2
 800593a:	d505      	bpl.n	8005948 <__swrite+0x1e>
 800593c:	2302      	movs	r3, #2
 800593e:	2200      	movs	r2, #0
 8005940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005944:	f000 f840 	bl	80059c8 <_lseek_r>
 8005948:	89a3      	ldrh	r3, [r4, #12]
 800594a:	4632      	mov	r2, r6
 800594c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005950:	81a3      	strh	r3, [r4, #12]
 8005952:	4628      	mov	r0, r5
 8005954:	463b      	mov	r3, r7
 8005956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800595a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800595e:	f000 b857 	b.w	8005a10 <_write_r>

08005962 <__sseek>:
 8005962:	b510      	push	{r4, lr}
 8005964:	460c      	mov	r4, r1
 8005966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800596a:	f000 f82d 	bl	80059c8 <_lseek_r>
 800596e:	1c43      	adds	r3, r0, #1
 8005970:	89a3      	ldrh	r3, [r4, #12]
 8005972:	bf15      	itete	ne
 8005974:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005976:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800597a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800597e:	81a3      	strheq	r3, [r4, #12]
 8005980:	bf18      	it	ne
 8005982:	81a3      	strhne	r3, [r4, #12]
 8005984:	bd10      	pop	{r4, pc}

08005986 <__sclose>:
 8005986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800598a:	f000 b80d 	b.w	80059a8 <_close_r>

0800598e <memset>:
 800598e:	4603      	mov	r3, r0
 8005990:	4402      	add	r2, r0
 8005992:	4293      	cmp	r3, r2
 8005994:	d100      	bne.n	8005998 <memset+0xa>
 8005996:	4770      	bx	lr
 8005998:	f803 1b01 	strb.w	r1, [r3], #1
 800599c:	e7f9      	b.n	8005992 <memset+0x4>
	...

080059a0 <_localeconv_r>:
 80059a0:	4800      	ldr	r0, [pc, #0]	@ (80059a4 <_localeconv_r+0x4>)
 80059a2:	4770      	bx	lr
 80059a4:	20000160 	.word	0x20000160

080059a8 <_close_r>:
 80059a8:	b538      	push	{r3, r4, r5, lr}
 80059aa:	2300      	movs	r3, #0
 80059ac:	4d05      	ldr	r5, [pc, #20]	@ (80059c4 <_close_r+0x1c>)
 80059ae:	4604      	mov	r4, r0
 80059b0:	4608      	mov	r0, r1
 80059b2:	602b      	str	r3, [r5, #0]
 80059b4:	f7fc fccb 	bl	800234e <_close>
 80059b8:	1c43      	adds	r3, r0, #1
 80059ba:	d102      	bne.n	80059c2 <_close_r+0x1a>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	b103      	cbz	r3, 80059c2 <_close_r+0x1a>
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	bd38      	pop	{r3, r4, r5, pc}
 80059c4:	200004c4 	.word	0x200004c4

080059c8 <_lseek_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	4604      	mov	r4, r0
 80059cc:	4608      	mov	r0, r1
 80059ce:	4611      	mov	r1, r2
 80059d0:	2200      	movs	r2, #0
 80059d2:	4d05      	ldr	r5, [pc, #20]	@ (80059e8 <_lseek_r+0x20>)
 80059d4:	602a      	str	r2, [r5, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	f7fc fcdd 	bl	8002396 <_lseek>
 80059dc:	1c43      	adds	r3, r0, #1
 80059de:	d102      	bne.n	80059e6 <_lseek_r+0x1e>
 80059e0:	682b      	ldr	r3, [r5, #0]
 80059e2:	b103      	cbz	r3, 80059e6 <_lseek_r+0x1e>
 80059e4:	6023      	str	r3, [r4, #0]
 80059e6:	bd38      	pop	{r3, r4, r5, pc}
 80059e8:	200004c4 	.word	0x200004c4

080059ec <_read_r>:
 80059ec:	b538      	push	{r3, r4, r5, lr}
 80059ee:	4604      	mov	r4, r0
 80059f0:	4608      	mov	r0, r1
 80059f2:	4611      	mov	r1, r2
 80059f4:	2200      	movs	r2, #0
 80059f6:	4d05      	ldr	r5, [pc, #20]	@ (8005a0c <_read_r+0x20>)
 80059f8:	602a      	str	r2, [r5, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	f7fc fc6e 	bl	80022dc <_read>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	d102      	bne.n	8005a0a <_read_r+0x1e>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	b103      	cbz	r3, 8005a0a <_read_r+0x1e>
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	200004c4 	.word	0x200004c4

08005a10 <_write_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	4604      	mov	r4, r0
 8005a14:	4608      	mov	r0, r1
 8005a16:	4611      	mov	r1, r2
 8005a18:	2200      	movs	r2, #0
 8005a1a:	4d05      	ldr	r5, [pc, #20]	@ (8005a30 <_write_r+0x20>)
 8005a1c:	602a      	str	r2, [r5, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f7fc fc79 	bl	8002316 <_write>
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	d102      	bne.n	8005a2e <_write_r+0x1e>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	b103      	cbz	r3, 8005a2e <_write_r+0x1e>
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	bd38      	pop	{r3, r4, r5, pc}
 8005a30:	200004c4 	.word	0x200004c4

08005a34 <__errno>:
 8005a34:	4b01      	ldr	r3, [pc, #4]	@ (8005a3c <__errno+0x8>)
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	20000020 	.word	0x20000020

08005a40 <__libc_init_array>:
 8005a40:	b570      	push	{r4, r5, r6, lr}
 8005a42:	2600      	movs	r6, #0
 8005a44:	4d0c      	ldr	r5, [pc, #48]	@ (8005a78 <__libc_init_array+0x38>)
 8005a46:	4c0d      	ldr	r4, [pc, #52]	@ (8005a7c <__libc_init_array+0x3c>)
 8005a48:	1b64      	subs	r4, r4, r5
 8005a4a:	10a4      	asrs	r4, r4, #2
 8005a4c:	42a6      	cmp	r6, r4
 8005a4e:	d109      	bne.n	8005a64 <__libc_init_array+0x24>
 8005a50:	f002 f870 	bl	8007b34 <_init>
 8005a54:	2600      	movs	r6, #0
 8005a56:	4d0a      	ldr	r5, [pc, #40]	@ (8005a80 <__libc_init_array+0x40>)
 8005a58:	4c0a      	ldr	r4, [pc, #40]	@ (8005a84 <__libc_init_array+0x44>)
 8005a5a:	1b64      	subs	r4, r4, r5
 8005a5c:	10a4      	asrs	r4, r4, #2
 8005a5e:	42a6      	cmp	r6, r4
 8005a60:	d105      	bne.n	8005a6e <__libc_init_array+0x2e>
 8005a62:	bd70      	pop	{r4, r5, r6, pc}
 8005a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a68:	4798      	blx	r3
 8005a6a:	3601      	adds	r6, #1
 8005a6c:	e7ee      	b.n	8005a4c <__libc_init_array+0xc>
 8005a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a72:	4798      	blx	r3
 8005a74:	3601      	adds	r6, #1
 8005a76:	e7f2      	b.n	8005a5e <__libc_init_array+0x1e>
 8005a78:	080090b0 	.word	0x080090b0
 8005a7c:	080090b0 	.word	0x080090b0
 8005a80:	080090b0 	.word	0x080090b0
 8005a84:	080090b4 	.word	0x080090b4

08005a88 <__retarget_lock_init_recursive>:
 8005a88:	4770      	bx	lr

08005a8a <__retarget_lock_acquire_recursive>:
 8005a8a:	4770      	bx	lr

08005a8c <__retarget_lock_release_recursive>:
 8005a8c:	4770      	bx	lr

08005a8e <memchr>:
 8005a8e:	4603      	mov	r3, r0
 8005a90:	b510      	push	{r4, lr}
 8005a92:	b2c9      	uxtb	r1, r1
 8005a94:	4402      	add	r2, r0
 8005a96:	4293      	cmp	r3, r2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	d101      	bne.n	8005aa0 <memchr+0x12>
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	e003      	b.n	8005aa8 <memchr+0x1a>
 8005aa0:	7804      	ldrb	r4, [r0, #0]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	428c      	cmp	r4, r1
 8005aa6:	d1f6      	bne.n	8005a96 <memchr+0x8>
 8005aa8:	bd10      	pop	{r4, pc}

08005aaa <quorem>:
 8005aaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aae:	6903      	ldr	r3, [r0, #16]
 8005ab0:	690c      	ldr	r4, [r1, #16]
 8005ab2:	4607      	mov	r7, r0
 8005ab4:	42a3      	cmp	r3, r4
 8005ab6:	db7e      	blt.n	8005bb6 <quorem+0x10c>
 8005ab8:	3c01      	subs	r4, #1
 8005aba:	00a3      	lsls	r3, r4, #2
 8005abc:	f100 0514 	add.w	r5, r0, #20
 8005ac0:	f101 0814 	add.w	r8, r1, #20
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005aca:	9301      	str	r3, [sp, #4]
 8005acc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ad0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	fbb2 f6f3 	udiv	r6, r2, r3
 8005adc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ae0:	d32e      	bcc.n	8005b40 <quorem+0x96>
 8005ae2:	f04f 0a00 	mov.w	sl, #0
 8005ae6:	46c4      	mov	ip, r8
 8005ae8:	46ae      	mov	lr, r5
 8005aea:	46d3      	mov	fp, sl
 8005aec:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005af0:	b298      	uxth	r0, r3
 8005af2:	fb06 a000 	mla	r0, r6, r0, sl
 8005af6:	0c1b      	lsrs	r3, r3, #16
 8005af8:	0c02      	lsrs	r2, r0, #16
 8005afa:	fb06 2303 	mla	r3, r6, r3, r2
 8005afe:	f8de 2000 	ldr.w	r2, [lr]
 8005b02:	b280      	uxth	r0, r0
 8005b04:	b292      	uxth	r2, r2
 8005b06:	1a12      	subs	r2, r2, r0
 8005b08:	445a      	add	r2, fp
 8005b0a:	f8de 0000 	ldr.w	r0, [lr]
 8005b0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b18:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b1c:	b292      	uxth	r2, r2
 8005b1e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b22:	45e1      	cmp	r9, ip
 8005b24:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b28:	f84e 2b04 	str.w	r2, [lr], #4
 8005b2c:	d2de      	bcs.n	8005aec <quorem+0x42>
 8005b2e:	9b00      	ldr	r3, [sp, #0]
 8005b30:	58eb      	ldr	r3, [r5, r3]
 8005b32:	b92b      	cbnz	r3, 8005b40 <quorem+0x96>
 8005b34:	9b01      	ldr	r3, [sp, #4]
 8005b36:	3b04      	subs	r3, #4
 8005b38:	429d      	cmp	r5, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	d32f      	bcc.n	8005b9e <quorem+0xf4>
 8005b3e:	613c      	str	r4, [r7, #16]
 8005b40:	4638      	mov	r0, r7
 8005b42:	f001 f97b 	bl	8006e3c <__mcmp>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	db25      	blt.n	8005b96 <quorem+0xec>
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b52:	f8d1 c000 	ldr.w	ip, [r1]
 8005b56:	fa1f fe82 	uxth.w	lr, r2
 8005b5a:	fa1f f38c 	uxth.w	r3, ip
 8005b5e:	eba3 030e 	sub.w	r3, r3, lr
 8005b62:	4403      	add	r3, r0
 8005b64:	0c12      	lsrs	r2, r2, #16
 8005b66:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005b6a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b74:	45c1      	cmp	r9, r8
 8005b76:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005b7a:	f841 3b04 	str.w	r3, [r1], #4
 8005b7e:	d2e6      	bcs.n	8005b4e <quorem+0xa4>
 8005b80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b88:	b922      	cbnz	r2, 8005b94 <quorem+0xea>
 8005b8a:	3b04      	subs	r3, #4
 8005b8c:	429d      	cmp	r5, r3
 8005b8e:	461a      	mov	r2, r3
 8005b90:	d30b      	bcc.n	8005baa <quorem+0x100>
 8005b92:	613c      	str	r4, [r7, #16]
 8005b94:	3601      	adds	r6, #1
 8005b96:	4630      	mov	r0, r6
 8005b98:	b003      	add	sp, #12
 8005b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b9e:	6812      	ldr	r2, [r2, #0]
 8005ba0:	3b04      	subs	r3, #4
 8005ba2:	2a00      	cmp	r2, #0
 8005ba4:	d1cb      	bne.n	8005b3e <quorem+0x94>
 8005ba6:	3c01      	subs	r4, #1
 8005ba8:	e7c6      	b.n	8005b38 <quorem+0x8e>
 8005baa:	6812      	ldr	r2, [r2, #0]
 8005bac:	3b04      	subs	r3, #4
 8005bae:	2a00      	cmp	r2, #0
 8005bb0:	d1ef      	bne.n	8005b92 <quorem+0xe8>
 8005bb2:	3c01      	subs	r4, #1
 8005bb4:	e7ea      	b.n	8005b8c <quorem+0xe2>
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	e7ee      	b.n	8005b98 <quorem+0xee>
 8005bba:	0000      	movs	r0, r0
 8005bbc:	0000      	movs	r0, r0
	...

08005bc0 <_dtoa_r>:
 8005bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc4:	4614      	mov	r4, r2
 8005bc6:	461d      	mov	r5, r3
 8005bc8:	69c7      	ldr	r7, [r0, #28]
 8005bca:	b097      	sub	sp, #92	@ 0x5c
 8005bcc:	4683      	mov	fp, r0
 8005bce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005bd2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005bd4:	b97f      	cbnz	r7, 8005bf6 <_dtoa_r+0x36>
 8005bd6:	2010      	movs	r0, #16
 8005bd8:	f000 fe02 	bl	80067e0 <malloc>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	f8cb 001c 	str.w	r0, [fp, #28]
 8005be2:	b920      	cbnz	r0, 8005bee <_dtoa_r+0x2e>
 8005be4:	21ef      	movs	r1, #239	@ 0xef
 8005be6:	4ba8      	ldr	r3, [pc, #672]	@ (8005e88 <_dtoa_r+0x2c8>)
 8005be8:	48a8      	ldr	r0, [pc, #672]	@ (8005e8c <_dtoa_r+0x2cc>)
 8005bea:	f001 fc67 	bl	80074bc <__assert_func>
 8005bee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005bf2:	6007      	str	r7, [r0, #0]
 8005bf4:	60c7      	str	r7, [r0, #12]
 8005bf6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005bfa:	6819      	ldr	r1, [r3, #0]
 8005bfc:	b159      	cbz	r1, 8005c16 <_dtoa_r+0x56>
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	2301      	movs	r3, #1
 8005c02:	4093      	lsls	r3, r2
 8005c04:	604a      	str	r2, [r1, #4]
 8005c06:	608b      	str	r3, [r1, #8]
 8005c08:	4658      	mov	r0, fp
 8005c0a:	f000 fedf 	bl	80069cc <_Bfree>
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	1e2b      	subs	r3, r5, #0
 8005c18:	bfaf      	iteee	ge
 8005c1a:	2300      	movge	r3, #0
 8005c1c:	2201      	movlt	r2, #1
 8005c1e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c22:	9303      	strlt	r3, [sp, #12]
 8005c24:	bfa8      	it	ge
 8005c26:	6033      	strge	r3, [r6, #0]
 8005c28:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c2c:	4b98      	ldr	r3, [pc, #608]	@ (8005e90 <_dtoa_r+0x2d0>)
 8005c2e:	bfb8      	it	lt
 8005c30:	6032      	strlt	r2, [r6, #0]
 8005c32:	ea33 0308 	bics.w	r3, r3, r8
 8005c36:	d112      	bne.n	8005c5e <_dtoa_r+0x9e>
 8005c38:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005c3c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005c44:	4323      	orrs	r3, r4
 8005c46:	f000 8550 	beq.w	80066ea <_dtoa_r+0xb2a>
 8005c4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c4c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005e94 <_dtoa_r+0x2d4>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 8552 	beq.w	80066fa <_dtoa_r+0xb3a>
 8005c56:	f10a 0303 	add.w	r3, sl, #3
 8005c5a:	f000 bd4c 	b.w	80066f6 <_dtoa_r+0xb36>
 8005c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c62:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005c66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f7fa fe9b 	bl	80009a8 <__aeabi_dcmpeq>
 8005c72:	4607      	mov	r7, r0
 8005c74:	b158      	cbz	r0, 8005c8e <_dtoa_r+0xce>
 8005c76:	2301      	movs	r3, #1
 8005c78:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c7e:	b113      	cbz	r3, 8005c86 <_dtoa_r+0xc6>
 8005c80:	4b85      	ldr	r3, [pc, #532]	@ (8005e98 <_dtoa_r+0x2d8>)
 8005c82:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005c84:	6013      	str	r3, [r2, #0]
 8005c86:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005e9c <_dtoa_r+0x2dc>
 8005c8a:	f000 bd36 	b.w	80066fa <_dtoa_r+0xb3a>
 8005c8e:	ab14      	add	r3, sp, #80	@ 0x50
 8005c90:	9301      	str	r3, [sp, #4]
 8005c92:	ab15      	add	r3, sp, #84	@ 0x54
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	4658      	mov	r0, fp
 8005c98:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005c9c:	f001 f97e 	bl	8006f9c <__d2b>
 8005ca0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005ca4:	4681      	mov	r9, r0
 8005ca6:	2e00      	cmp	r6, #0
 8005ca8:	d077      	beq.n	8005d9a <_dtoa_r+0x1da>
 8005caa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cb0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cb8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005cbc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005cc0:	9712      	str	r7, [sp, #72]	@ 0x48
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	4b76      	ldr	r3, [pc, #472]	@ (8005ea0 <_dtoa_r+0x2e0>)
 8005cc8:	f7fa fa4e 	bl	8000168 <__aeabi_dsub>
 8005ccc:	a368      	add	r3, pc, #416	@ (adr r3, 8005e70 <_dtoa_r+0x2b0>)
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	f7fa fc01 	bl	80004d8 <__aeabi_dmul>
 8005cd6:	a368      	add	r3, pc, #416	@ (adr r3, 8005e78 <_dtoa_r+0x2b8>)
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	f7fa fa46 	bl	800016c <__adddf3>
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	460d      	mov	r5, r1
 8005ce6:	f7fa fb8d 	bl	8000404 <__aeabi_i2d>
 8005cea:	a365      	add	r3, pc, #404	@ (adr r3, 8005e80 <_dtoa_r+0x2c0>)
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f7fa fbf2 	bl	80004d8 <__aeabi_dmul>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	f7fa fa36 	bl	800016c <__adddf3>
 8005d00:	4604      	mov	r4, r0
 8005d02:	460d      	mov	r5, r1
 8005d04:	f7fa fe98 	bl	8000a38 <__aeabi_d2iz>
 8005d08:	2200      	movs	r2, #0
 8005d0a:	4607      	mov	r7, r0
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	4620      	mov	r0, r4
 8005d10:	4629      	mov	r1, r5
 8005d12:	f7fa fe53 	bl	80009bc <__aeabi_dcmplt>
 8005d16:	b140      	cbz	r0, 8005d2a <_dtoa_r+0x16a>
 8005d18:	4638      	mov	r0, r7
 8005d1a:	f7fa fb73 	bl	8000404 <__aeabi_i2d>
 8005d1e:	4622      	mov	r2, r4
 8005d20:	462b      	mov	r3, r5
 8005d22:	f7fa fe41 	bl	80009a8 <__aeabi_dcmpeq>
 8005d26:	b900      	cbnz	r0, 8005d2a <_dtoa_r+0x16a>
 8005d28:	3f01      	subs	r7, #1
 8005d2a:	2f16      	cmp	r7, #22
 8005d2c:	d853      	bhi.n	8005dd6 <_dtoa_r+0x216>
 8005d2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d32:	4b5c      	ldr	r3, [pc, #368]	@ (8005ea4 <_dtoa_r+0x2e4>)
 8005d34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	f7fa fe3e 	bl	80009bc <__aeabi_dcmplt>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d04a      	beq.n	8005dda <_dtoa_r+0x21a>
 8005d44:	2300      	movs	r3, #0
 8005d46:	3f01      	subs	r7, #1
 8005d48:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005d4a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005d4c:	1b9b      	subs	r3, r3, r6
 8005d4e:	1e5a      	subs	r2, r3, #1
 8005d50:	bf46      	itte	mi
 8005d52:	f1c3 0801 	rsbmi	r8, r3, #1
 8005d56:	2300      	movmi	r3, #0
 8005d58:	f04f 0800 	movpl.w	r8, #0
 8005d5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d5e:	bf48      	it	mi
 8005d60:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005d62:	2f00      	cmp	r7, #0
 8005d64:	db3b      	blt.n	8005dde <_dtoa_r+0x21e>
 8005d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d68:	970e      	str	r7, [sp, #56]	@ 0x38
 8005d6a:	443b      	add	r3, r7
 8005d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d6e:	2300      	movs	r3, #0
 8005d70:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d74:	2b09      	cmp	r3, #9
 8005d76:	d866      	bhi.n	8005e46 <_dtoa_r+0x286>
 8005d78:	2b05      	cmp	r3, #5
 8005d7a:	bfc4      	itt	gt
 8005d7c:	3b04      	subgt	r3, #4
 8005d7e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005d80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d82:	bfc8      	it	gt
 8005d84:	2400      	movgt	r4, #0
 8005d86:	f1a3 0302 	sub.w	r3, r3, #2
 8005d8a:	bfd8      	it	le
 8005d8c:	2401      	movle	r4, #1
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d864      	bhi.n	8005e5c <_dtoa_r+0x29c>
 8005d92:	e8df f003 	tbb	[pc, r3]
 8005d96:	382b      	.short	0x382b
 8005d98:	5636      	.short	0x5636
 8005d9a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005d9e:	441e      	add	r6, r3
 8005da0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	bfc1      	itttt	gt
 8005da8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005dac:	fa08 f803 	lslgt.w	r8, r8, r3
 8005db0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005db4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005db8:	bfd6      	itet	le
 8005dba:	f1c3 0320 	rsble	r3, r3, #32
 8005dbe:	ea48 0003 	orrgt.w	r0, r8, r3
 8005dc2:	fa04 f003 	lslle.w	r0, r4, r3
 8005dc6:	f7fa fb0d 	bl	80003e4 <__aeabi_ui2d>
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005dd0:	3e01      	subs	r6, #1
 8005dd2:	9212      	str	r2, [sp, #72]	@ 0x48
 8005dd4:	e775      	b.n	8005cc2 <_dtoa_r+0x102>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e7b6      	b.n	8005d48 <_dtoa_r+0x188>
 8005dda:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005ddc:	e7b5      	b.n	8005d4a <_dtoa_r+0x18a>
 8005dde:	427b      	negs	r3, r7
 8005de0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005de2:	2300      	movs	r3, #0
 8005de4:	eba8 0807 	sub.w	r8, r8, r7
 8005de8:	930e      	str	r3, [sp, #56]	@ 0x38
 8005dea:	e7c2      	b.n	8005d72 <_dtoa_r+0x1b2>
 8005dec:	2300      	movs	r3, #0
 8005dee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005df0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	dc35      	bgt.n	8005e62 <_dtoa_r+0x2a2>
 8005df6:	2301      	movs	r3, #1
 8005df8:	461a      	mov	r2, r3
 8005dfa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005dfe:	9221      	str	r2, [sp, #132]	@ 0x84
 8005e00:	e00b      	b.n	8005e1a <_dtoa_r+0x25a>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e7f3      	b.n	8005dee <_dtoa_r+0x22e>
 8005e06:	2300      	movs	r3, #0
 8005e08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e0c:	18fb      	adds	r3, r7, r3
 8005e0e:	9308      	str	r3, [sp, #32]
 8005e10:	3301      	adds	r3, #1
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	9307      	str	r3, [sp, #28]
 8005e16:	bfb8      	it	lt
 8005e18:	2301      	movlt	r3, #1
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	2204      	movs	r2, #4
 8005e1e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005e22:	f102 0514 	add.w	r5, r2, #20
 8005e26:	429d      	cmp	r5, r3
 8005e28:	d91f      	bls.n	8005e6a <_dtoa_r+0x2aa>
 8005e2a:	6041      	str	r1, [r0, #4]
 8005e2c:	4658      	mov	r0, fp
 8005e2e:	f000 fd8d 	bl	800694c <_Balloc>
 8005e32:	4682      	mov	sl, r0
 8005e34:	2800      	cmp	r0, #0
 8005e36:	d139      	bne.n	8005eac <_dtoa_r+0x2ec>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	f240 11af 	movw	r1, #431	@ 0x1af
 8005e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea8 <_dtoa_r+0x2e8>)
 8005e40:	e6d2      	b.n	8005be8 <_dtoa_r+0x28>
 8005e42:	2301      	movs	r3, #1
 8005e44:	e7e0      	b.n	8005e08 <_dtoa_r+0x248>
 8005e46:	2401      	movs	r4, #1
 8005e48:	2300      	movs	r3, #0
 8005e4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005e4c:	9320      	str	r3, [sp, #128]	@ 0x80
 8005e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e52:	2200      	movs	r2, #0
 8005e54:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005e58:	2312      	movs	r3, #18
 8005e5a:	e7d0      	b.n	8005dfe <_dtoa_r+0x23e>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e60:	e7f5      	b.n	8005e4e <_dtoa_r+0x28e>
 8005e62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e64:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005e68:	e7d7      	b.n	8005e1a <_dtoa_r+0x25a>
 8005e6a:	3101      	adds	r1, #1
 8005e6c:	0052      	lsls	r2, r2, #1
 8005e6e:	e7d8      	b.n	8005e22 <_dtoa_r+0x262>
 8005e70:	636f4361 	.word	0x636f4361
 8005e74:	3fd287a7 	.word	0x3fd287a7
 8005e78:	8b60c8b3 	.word	0x8b60c8b3
 8005e7c:	3fc68a28 	.word	0x3fc68a28
 8005e80:	509f79fb 	.word	0x509f79fb
 8005e84:	3fd34413 	.word	0x3fd34413
 8005e88:	08008d77 	.word	0x08008d77
 8005e8c:	08008d8e 	.word	0x08008d8e
 8005e90:	7ff00000 	.word	0x7ff00000
 8005e94:	08008d73 	.word	0x08008d73
 8005e98:	08008d47 	.word	0x08008d47
 8005e9c:	08008d46 	.word	0x08008d46
 8005ea0:	3ff80000 	.word	0x3ff80000
 8005ea4:	08008e88 	.word	0x08008e88
 8005ea8:	08008de6 	.word	0x08008de6
 8005eac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005eb0:	6018      	str	r0, [r3, #0]
 8005eb2:	9b07      	ldr	r3, [sp, #28]
 8005eb4:	2b0e      	cmp	r3, #14
 8005eb6:	f200 80a4 	bhi.w	8006002 <_dtoa_r+0x442>
 8005eba:	2c00      	cmp	r4, #0
 8005ebc:	f000 80a1 	beq.w	8006002 <_dtoa_r+0x442>
 8005ec0:	2f00      	cmp	r7, #0
 8005ec2:	dd33      	ble.n	8005f2c <_dtoa_r+0x36c>
 8005ec4:	4b86      	ldr	r3, [pc, #536]	@ (80060e0 <_dtoa_r+0x520>)
 8005ec6:	f007 020f 	and.w	r2, r7, #15
 8005eca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ece:	05f8      	lsls	r0, r7, #23
 8005ed0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ed4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ed8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005edc:	d516      	bpl.n	8005f0c <_dtoa_r+0x34c>
 8005ede:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ee2:	4b80      	ldr	r3, [pc, #512]	@ (80060e4 <_dtoa_r+0x524>)
 8005ee4:	2603      	movs	r6, #3
 8005ee6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005eea:	f7fa fc1f 	bl	800072c <__aeabi_ddiv>
 8005eee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ef2:	f004 040f 	and.w	r4, r4, #15
 8005ef6:	4d7b      	ldr	r5, [pc, #492]	@ (80060e4 <_dtoa_r+0x524>)
 8005ef8:	b954      	cbnz	r4, 8005f10 <_dtoa_r+0x350>
 8005efa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f02:	f7fa fc13 	bl	800072c <__aeabi_ddiv>
 8005f06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f0a:	e028      	b.n	8005f5e <_dtoa_r+0x39e>
 8005f0c:	2602      	movs	r6, #2
 8005f0e:	e7f2      	b.n	8005ef6 <_dtoa_r+0x336>
 8005f10:	07e1      	lsls	r1, r4, #31
 8005f12:	d508      	bpl.n	8005f26 <_dtoa_r+0x366>
 8005f14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f1c:	f7fa fadc 	bl	80004d8 <__aeabi_dmul>
 8005f20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f24:	3601      	adds	r6, #1
 8005f26:	1064      	asrs	r4, r4, #1
 8005f28:	3508      	adds	r5, #8
 8005f2a:	e7e5      	b.n	8005ef8 <_dtoa_r+0x338>
 8005f2c:	f000 80d2 	beq.w	80060d4 <_dtoa_r+0x514>
 8005f30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f34:	427c      	negs	r4, r7
 8005f36:	4b6a      	ldr	r3, [pc, #424]	@ (80060e0 <_dtoa_r+0x520>)
 8005f38:	f004 020f 	and.w	r2, r4, #15
 8005f3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f7fa fac8 	bl	80004d8 <__aeabi_dmul>
 8005f48:	2602      	movs	r6, #2
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f50:	4d64      	ldr	r5, [pc, #400]	@ (80060e4 <_dtoa_r+0x524>)
 8005f52:	1124      	asrs	r4, r4, #4
 8005f54:	2c00      	cmp	r4, #0
 8005f56:	f040 80b2 	bne.w	80060be <_dtoa_r+0x4fe>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1d3      	bne.n	8005f06 <_dtoa_r+0x346>
 8005f5e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005f62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 80b7 	beq.w	80060d8 <_dtoa_r+0x518>
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	4629      	mov	r1, r5
 8005f70:	4b5d      	ldr	r3, [pc, #372]	@ (80060e8 <_dtoa_r+0x528>)
 8005f72:	f7fa fd23 	bl	80009bc <__aeabi_dcmplt>
 8005f76:	2800      	cmp	r0, #0
 8005f78:	f000 80ae 	beq.w	80060d8 <_dtoa_r+0x518>
 8005f7c:	9b07      	ldr	r3, [sp, #28]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 80aa 	beq.w	80060d8 <_dtoa_r+0x518>
 8005f84:	9b08      	ldr	r3, [sp, #32]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	dd37      	ble.n	8005ffa <_dtoa_r+0x43a>
 8005f8a:	1e7b      	subs	r3, r7, #1
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	9304      	str	r3, [sp, #16]
 8005f90:	2200      	movs	r2, #0
 8005f92:	4629      	mov	r1, r5
 8005f94:	4b55      	ldr	r3, [pc, #340]	@ (80060ec <_dtoa_r+0x52c>)
 8005f96:	f7fa fa9f 	bl	80004d8 <__aeabi_dmul>
 8005f9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f9e:	9c08      	ldr	r4, [sp, #32]
 8005fa0:	3601      	adds	r6, #1
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f7fa fa2e 	bl	8000404 <__aeabi_i2d>
 8005fa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fac:	f7fa fa94 	bl	80004d8 <__aeabi_dmul>
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	4b4f      	ldr	r3, [pc, #316]	@ (80060f0 <_dtoa_r+0x530>)
 8005fb4:	f7fa f8da 	bl	800016c <__adddf3>
 8005fb8:	4605      	mov	r5, r0
 8005fba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005fbe:	2c00      	cmp	r4, #0
 8005fc0:	f040 809a 	bne.w	80060f8 <_dtoa_r+0x538>
 8005fc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	4b4a      	ldr	r3, [pc, #296]	@ (80060f4 <_dtoa_r+0x534>)
 8005fcc:	f7fa f8cc 	bl	8000168 <__aeabi_dsub>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fd8:	462a      	mov	r2, r5
 8005fda:	4633      	mov	r3, r6
 8005fdc:	f7fa fd0c 	bl	80009f8 <__aeabi_dcmpgt>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	f040 828e 	bne.w	8006502 <_dtoa_r+0x942>
 8005fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fea:	462a      	mov	r2, r5
 8005fec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005ff0:	f7fa fce4 	bl	80009bc <__aeabi_dcmplt>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	f040 8127 	bne.w	8006248 <_dtoa_r+0x688>
 8005ffa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005ffe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006002:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006004:	2b00      	cmp	r3, #0
 8006006:	f2c0 8163 	blt.w	80062d0 <_dtoa_r+0x710>
 800600a:	2f0e      	cmp	r7, #14
 800600c:	f300 8160 	bgt.w	80062d0 <_dtoa_r+0x710>
 8006010:	4b33      	ldr	r3, [pc, #204]	@ (80060e0 <_dtoa_r+0x520>)
 8006012:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006016:	e9d3 3400 	ldrd	r3, r4, [r3]
 800601a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800601e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006020:	2b00      	cmp	r3, #0
 8006022:	da03      	bge.n	800602c <_dtoa_r+0x46c>
 8006024:	9b07      	ldr	r3, [sp, #28]
 8006026:	2b00      	cmp	r3, #0
 8006028:	f340 8100 	ble.w	800622c <_dtoa_r+0x66c>
 800602c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006030:	4656      	mov	r6, sl
 8006032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006036:	4620      	mov	r0, r4
 8006038:	4629      	mov	r1, r5
 800603a:	f7fa fb77 	bl	800072c <__aeabi_ddiv>
 800603e:	f7fa fcfb 	bl	8000a38 <__aeabi_d2iz>
 8006042:	4680      	mov	r8, r0
 8006044:	f7fa f9de 	bl	8000404 <__aeabi_i2d>
 8006048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800604c:	f7fa fa44 	bl	80004d8 <__aeabi_dmul>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4620      	mov	r0, r4
 8006056:	4629      	mov	r1, r5
 8006058:	f7fa f886 	bl	8000168 <__aeabi_dsub>
 800605c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006060:	9d07      	ldr	r5, [sp, #28]
 8006062:	f806 4b01 	strb.w	r4, [r6], #1
 8006066:	eba6 040a 	sub.w	r4, r6, sl
 800606a:	42a5      	cmp	r5, r4
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	f040 8116 	bne.w	80062a0 <_dtoa_r+0x6e0>
 8006074:	f7fa f87a 	bl	800016c <__adddf3>
 8006078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800607c:	4604      	mov	r4, r0
 800607e:	460d      	mov	r5, r1
 8006080:	f7fa fcba 	bl	80009f8 <__aeabi_dcmpgt>
 8006084:	2800      	cmp	r0, #0
 8006086:	f040 80f8 	bne.w	800627a <_dtoa_r+0x6ba>
 800608a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800608e:	4620      	mov	r0, r4
 8006090:	4629      	mov	r1, r5
 8006092:	f7fa fc89 	bl	80009a8 <__aeabi_dcmpeq>
 8006096:	b118      	cbz	r0, 80060a0 <_dtoa_r+0x4e0>
 8006098:	f018 0f01 	tst.w	r8, #1
 800609c:	f040 80ed 	bne.w	800627a <_dtoa_r+0x6ba>
 80060a0:	4649      	mov	r1, r9
 80060a2:	4658      	mov	r0, fp
 80060a4:	f000 fc92 	bl	80069cc <_Bfree>
 80060a8:	2300      	movs	r3, #0
 80060aa:	7033      	strb	r3, [r6, #0]
 80060ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80060ae:	3701      	adds	r7, #1
 80060b0:	601f      	str	r7, [r3, #0]
 80060b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8320 	beq.w	80066fa <_dtoa_r+0xb3a>
 80060ba:	601e      	str	r6, [r3, #0]
 80060bc:	e31d      	b.n	80066fa <_dtoa_r+0xb3a>
 80060be:	07e2      	lsls	r2, r4, #31
 80060c0:	d505      	bpl.n	80060ce <_dtoa_r+0x50e>
 80060c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060c6:	f7fa fa07 	bl	80004d8 <__aeabi_dmul>
 80060ca:	2301      	movs	r3, #1
 80060cc:	3601      	adds	r6, #1
 80060ce:	1064      	asrs	r4, r4, #1
 80060d0:	3508      	adds	r5, #8
 80060d2:	e73f      	b.n	8005f54 <_dtoa_r+0x394>
 80060d4:	2602      	movs	r6, #2
 80060d6:	e742      	b.n	8005f5e <_dtoa_r+0x39e>
 80060d8:	9c07      	ldr	r4, [sp, #28]
 80060da:	9704      	str	r7, [sp, #16]
 80060dc:	e761      	b.n	8005fa2 <_dtoa_r+0x3e2>
 80060de:	bf00      	nop
 80060e0:	08008e88 	.word	0x08008e88
 80060e4:	08008e60 	.word	0x08008e60
 80060e8:	3ff00000 	.word	0x3ff00000
 80060ec:	40240000 	.word	0x40240000
 80060f0:	401c0000 	.word	0x401c0000
 80060f4:	40140000 	.word	0x40140000
 80060f8:	4b70      	ldr	r3, [pc, #448]	@ (80062bc <_dtoa_r+0x6fc>)
 80060fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006100:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006104:	4454      	add	r4, sl
 8006106:	2900      	cmp	r1, #0
 8006108:	d045      	beq.n	8006196 <_dtoa_r+0x5d6>
 800610a:	2000      	movs	r0, #0
 800610c:	496c      	ldr	r1, [pc, #432]	@ (80062c0 <_dtoa_r+0x700>)
 800610e:	f7fa fb0d 	bl	800072c <__aeabi_ddiv>
 8006112:	4633      	mov	r3, r6
 8006114:	462a      	mov	r2, r5
 8006116:	f7fa f827 	bl	8000168 <__aeabi_dsub>
 800611a:	4656      	mov	r6, sl
 800611c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006120:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006124:	f7fa fc88 	bl	8000a38 <__aeabi_d2iz>
 8006128:	4605      	mov	r5, r0
 800612a:	f7fa f96b 	bl	8000404 <__aeabi_i2d>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006136:	f7fa f817 	bl	8000168 <__aeabi_dsub>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	3530      	adds	r5, #48	@ 0x30
 8006140:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006144:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006148:	f806 5b01 	strb.w	r5, [r6], #1
 800614c:	f7fa fc36 	bl	80009bc <__aeabi_dcmplt>
 8006150:	2800      	cmp	r0, #0
 8006152:	d163      	bne.n	800621c <_dtoa_r+0x65c>
 8006154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006158:	2000      	movs	r0, #0
 800615a:	495a      	ldr	r1, [pc, #360]	@ (80062c4 <_dtoa_r+0x704>)
 800615c:	f7fa f804 	bl	8000168 <__aeabi_dsub>
 8006160:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006164:	f7fa fc2a 	bl	80009bc <__aeabi_dcmplt>
 8006168:	2800      	cmp	r0, #0
 800616a:	f040 8087 	bne.w	800627c <_dtoa_r+0x6bc>
 800616e:	42a6      	cmp	r6, r4
 8006170:	f43f af43 	beq.w	8005ffa <_dtoa_r+0x43a>
 8006174:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006178:	2200      	movs	r2, #0
 800617a:	4b53      	ldr	r3, [pc, #332]	@ (80062c8 <_dtoa_r+0x708>)
 800617c:	f7fa f9ac 	bl	80004d8 <__aeabi_dmul>
 8006180:	2200      	movs	r2, #0
 8006182:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800618a:	4b4f      	ldr	r3, [pc, #316]	@ (80062c8 <_dtoa_r+0x708>)
 800618c:	f7fa f9a4 	bl	80004d8 <__aeabi_dmul>
 8006190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006194:	e7c4      	b.n	8006120 <_dtoa_r+0x560>
 8006196:	4631      	mov	r1, r6
 8006198:	4628      	mov	r0, r5
 800619a:	f7fa f99d 	bl	80004d8 <__aeabi_dmul>
 800619e:	4656      	mov	r6, sl
 80061a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061a4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80061a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061aa:	f7fa fc45 	bl	8000a38 <__aeabi_d2iz>
 80061ae:	4605      	mov	r5, r0
 80061b0:	f7fa f928 	bl	8000404 <__aeabi_i2d>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061bc:	f7f9 ffd4 	bl	8000168 <__aeabi_dsub>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
 80061c4:	3530      	adds	r5, #48	@ 0x30
 80061c6:	f806 5b01 	strb.w	r5, [r6], #1
 80061ca:	42a6      	cmp	r6, r4
 80061cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	d124      	bne.n	8006220 <_dtoa_r+0x660>
 80061d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061da:	4b39      	ldr	r3, [pc, #228]	@ (80062c0 <_dtoa_r+0x700>)
 80061dc:	f7f9 ffc6 	bl	800016c <__adddf3>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e8:	f7fa fc06 	bl	80009f8 <__aeabi_dcmpgt>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d145      	bne.n	800627c <_dtoa_r+0x6bc>
 80061f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061f4:	2000      	movs	r0, #0
 80061f6:	4932      	ldr	r1, [pc, #200]	@ (80062c0 <_dtoa_r+0x700>)
 80061f8:	f7f9 ffb6 	bl	8000168 <__aeabi_dsub>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006204:	f7fa fbda 	bl	80009bc <__aeabi_dcmplt>
 8006208:	2800      	cmp	r0, #0
 800620a:	f43f aef6 	beq.w	8005ffa <_dtoa_r+0x43a>
 800620e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006210:	1e73      	subs	r3, r6, #1
 8006212:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006214:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006218:	2b30      	cmp	r3, #48	@ 0x30
 800621a:	d0f8      	beq.n	800620e <_dtoa_r+0x64e>
 800621c:	9f04      	ldr	r7, [sp, #16]
 800621e:	e73f      	b.n	80060a0 <_dtoa_r+0x4e0>
 8006220:	4b29      	ldr	r3, [pc, #164]	@ (80062c8 <_dtoa_r+0x708>)
 8006222:	f7fa f959 	bl	80004d8 <__aeabi_dmul>
 8006226:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800622a:	e7bc      	b.n	80061a6 <_dtoa_r+0x5e6>
 800622c:	d10c      	bne.n	8006248 <_dtoa_r+0x688>
 800622e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006232:	2200      	movs	r2, #0
 8006234:	4b25      	ldr	r3, [pc, #148]	@ (80062cc <_dtoa_r+0x70c>)
 8006236:	f7fa f94f 	bl	80004d8 <__aeabi_dmul>
 800623a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800623e:	f7fa fbd1 	bl	80009e4 <__aeabi_dcmpge>
 8006242:	2800      	cmp	r0, #0
 8006244:	f000 815b 	beq.w	80064fe <_dtoa_r+0x93e>
 8006248:	2400      	movs	r4, #0
 800624a:	4625      	mov	r5, r4
 800624c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800624e:	4656      	mov	r6, sl
 8006250:	43db      	mvns	r3, r3
 8006252:	9304      	str	r3, [sp, #16]
 8006254:	2700      	movs	r7, #0
 8006256:	4621      	mov	r1, r4
 8006258:	4658      	mov	r0, fp
 800625a:	f000 fbb7 	bl	80069cc <_Bfree>
 800625e:	2d00      	cmp	r5, #0
 8006260:	d0dc      	beq.n	800621c <_dtoa_r+0x65c>
 8006262:	b12f      	cbz	r7, 8006270 <_dtoa_r+0x6b0>
 8006264:	42af      	cmp	r7, r5
 8006266:	d003      	beq.n	8006270 <_dtoa_r+0x6b0>
 8006268:	4639      	mov	r1, r7
 800626a:	4658      	mov	r0, fp
 800626c:	f000 fbae 	bl	80069cc <_Bfree>
 8006270:	4629      	mov	r1, r5
 8006272:	4658      	mov	r0, fp
 8006274:	f000 fbaa 	bl	80069cc <_Bfree>
 8006278:	e7d0      	b.n	800621c <_dtoa_r+0x65c>
 800627a:	9704      	str	r7, [sp, #16]
 800627c:	4633      	mov	r3, r6
 800627e:	461e      	mov	r6, r3
 8006280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006284:	2a39      	cmp	r2, #57	@ 0x39
 8006286:	d107      	bne.n	8006298 <_dtoa_r+0x6d8>
 8006288:	459a      	cmp	sl, r3
 800628a:	d1f8      	bne.n	800627e <_dtoa_r+0x6be>
 800628c:	9a04      	ldr	r2, [sp, #16]
 800628e:	3201      	adds	r2, #1
 8006290:	9204      	str	r2, [sp, #16]
 8006292:	2230      	movs	r2, #48	@ 0x30
 8006294:	f88a 2000 	strb.w	r2, [sl]
 8006298:	781a      	ldrb	r2, [r3, #0]
 800629a:	3201      	adds	r2, #1
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	e7bd      	b.n	800621c <_dtoa_r+0x65c>
 80062a0:	2200      	movs	r2, #0
 80062a2:	4b09      	ldr	r3, [pc, #36]	@ (80062c8 <_dtoa_r+0x708>)
 80062a4:	f7fa f918 	bl	80004d8 <__aeabi_dmul>
 80062a8:	2200      	movs	r2, #0
 80062aa:	2300      	movs	r3, #0
 80062ac:	4604      	mov	r4, r0
 80062ae:	460d      	mov	r5, r1
 80062b0:	f7fa fb7a 	bl	80009a8 <__aeabi_dcmpeq>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	f43f aebc 	beq.w	8006032 <_dtoa_r+0x472>
 80062ba:	e6f1      	b.n	80060a0 <_dtoa_r+0x4e0>
 80062bc:	08008e88 	.word	0x08008e88
 80062c0:	3fe00000 	.word	0x3fe00000
 80062c4:	3ff00000 	.word	0x3ff00000
 80062c8:	40240000 	.word	0x40240000
 80062cc:	40140000 	.word	0x40140000
 80062d0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80062d2:	2a00      	cmp	r2, #0
 80062d4:	f000 80db 	beq.w	800648e <_dtoa_r+0x8ce>
 80062d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80062da:	2a01      	cmp	r2, #1
 80062dc:	f300 80bf 	bgt.w	800645e <_dtoa_r+0x89e>
 80062e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80062e2:	2a00      	cmp	r2, #0
 80062e4:	f000 80b7 	beq.w	8006456 <_dtoa_r+0x896>
 80062e8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80062ec:	4646      	mov	r6, r8
 80062ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80062f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062f2:	2101      	movs	r1, #1
 80062f4:	441a      	add	r2, r3
 80062f6:	4658      	mov	r0, fp
 80062f8:	4498      	add	r8, r3
 80062fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80062fc:	f000 fc1a 	bl	8006b34 <__i2b>
 8006300:	4605      	mov	r5, r0
 8006302:	b15e      	cbz	r6, 800631c <_dtoa_r+0x75c>
 8006304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	dd08      	ble.n	800631c <_dtoa_r+0x75c>
 800630a:	42b3      	cmp	r3, r6
 800630c:	bfa8      	it	ge
 800630e:	4633      	movge	r3, r6
 8006310:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006312:	eba8 0803 	sub.w	r8, r8, r3
 8006316:	1af6      	subs	r6, r6, r3
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	9309      	str	r3, [sp, #36]	@ 0x24
 800631c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800631e:	b1f3      	cbz	r3, 800635e <_dtoa_r+0x79e>
 8006320:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 80b7 	beq.w	8006496 <_dtoa_r+0x8d6>
 8006328:	b18c      	cbz	r4, 800634e <_dtoa_r+0x78e>
 800632a:	4629      	mov	r1, r5
 800632c:	4622      	mov	r2, r4
 800632e:	4658      	mov	r0, fp
 8006330:	f000 fcbe 	bl	8006cb0 <__pow5mult>
 8006334:	464a      	mov	r2, r9
 8006336:	4601      	mov	r1, r0
 8006338:	4605      	mov	r5, r0
 800633a:	4658      	mov	r0, fp
 800633c:	f000 fc10 	bl	8006b60 <__multiply>
 8006340:	4649      	mov	r1, r9
 8006342:	9004      	str	r0, [sp, #16]
 8006344:	4658      	mov	r0, fp
 8006346:	f000 fb41 	bl	80069cc <_Bfree>
 800634a:	9b04      	ldr	r3, [sp, #16]
 800634c:	4699      	mov	r9, r3
 800634e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006350:	1b1a      	subs	r2, r3, r4
 8006352:	d004      	beq.n	800635e <_dtoa_r+0x79e>
 8006354:	4649      	mov	r1, r9
 8006356:	4658      	mov	r0, fp
 8006358:	f000 fcaa 	bl	8006cb0 <__pow5mult>
 800635c:	4681      	mov	r9, r0
 800635e:	2101      	movs	r1, #1
 8006360:	4658      	mov	r0, fp
 8006362:	f000 fbe7 	bl	8006b34 <__i2b>
 8006366:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006368:	4604      	mov	r4, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 81c9 	beq.w	8006702 <_dtoa_r+0xb42>
 8006370:	461a      	mov	r2, r3
 8006372:	4601      	mov	r1, r0
 8006374:	4658      	mov	r0, fp
 8006376:	f000 fc9b 	bl	8006cb0 <__pow5mult>
 800637a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800637c:	4604      	mov	r4, r0
 800637e:	2b01      	cmp	r3, #1
 8006380:	f300 808f 	bgt.w	80064a2 <_dtoa_r+0x8e2>
 8006384:	9b02      	ldr	r3, [sp, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	f040 8087 	bne.w	800649a <_dtoa_r+0x8da>
 800638c:	9b03      	ldr	r3, [sp, #12]
 800638e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006392:	2b00      	cmp	r3, #0
 8006394:	f040 8083 	bne.w	800649e <_dtoa_r+0x8de>
 8006398:	9b03      	ldr	r3, [sp, #12]
 800639a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800639e:	0d1b      	lsrs	r3, r3, #20
 80063a0:	051b      	lsls	r3, r3, #20
 80063a2:	b12b      	cbz	r3, 80063b0 <_dtoa_r+0x7f0>
 80063a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063a6:	f108 0801 	add.w	r8, r8, #1
 80063aa:	3301      	adds	r3, #1
 80063ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80063ae:	2301      	movs	r3, #1
 80063b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80063b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 81aa 	beq.w	800670e <_dtoa_r+0xb4e>
 80063ba:	6923      	ldr	r3, [r4, #16]
 80063bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80063c0:	6918      	ldr	r0, [r3, #16]
 80063c2:	f000 fb6b 	bl	8006a9c <__hi0bits>
 80063c6:	f1c0 0020 	rsb	r0, r0, #32
 80063ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063cc:	4418      	add	r0, r3
 80063ce:	f010 001f 	ands.w	r0, r0, #31
 80063d2:	d071      	beq.n	80064b8 <_dtoa_r+0x8f8>
 80063d4:	f1c0 0320 	rsb	r3, r0, #32
 80063d8:	2b04      	cmp	r3, #4
 80063da:	dd65      	ble.n	80064a8 <_dtoa_r+0x8e8>
 80063dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063de:	f1c0 001c 	rsb	r0, r0, #28
 80063e2:	4403      	add	r3, r0
 80063e4:	4480      	add	r8, r0
 80063e6:	4406      	add	r6, r0
 80063e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80063ea:	f1b8 0f00 	cmp.w	r8, #0
 80063ee:	dd05      	ble.n	80063fc <_dtoa_r+0x83c>
 80063f0:	4649      	mov	r1, r9
 80063f2:	4642      	mov	r2, r8
 80063f4:	4658      	mov	r0, fp
 80063f6:	f000 fcb5 	bl	8006d64 <__lshift>
 80063fa:	4681      	mov	r9, r0
 80063fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063fe:	2b00      	cmp	r3, #0
 8006400:	dd05      	ble.n	800640e <_dtoa_r+0x84e>
 8006402:	4621      	mov	r1, r4
 8006404:	461a      	mov	r2, r3
 8006406:	4658      	mov	r0, fp
 8006408:	f000 fcac 	bl	8006d64 <__lshift>
 800640c:	4604      	mov	r4, r0
 800640e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006410:	2b00      	cmp	r3, #0
 8006412:	d053      	beq.n	80064bc <_dtoa_r+0x8fc>
 8006414:	4621      	mov	r1, r4
 8006416:	4648      	mov	r0, r9
 8006418:	f000 fd10 	bl	8006e3c <__mcmp>
 800641c:	2800      	cmp	r0, #0
 800641e:	da4d      	bge.n	80064bc <_dtoa_r+0x8fc>
 8006420:	1e7b      	subs	r3, r7, #1
 8006422:	4649      	mov	r1, r9
 8006424:	9304      	str	r3, [sp, #16]
 8006426:	220a      	movs	r2, #10
 8006428:	2300      	movs	r3, #0
 800642a:	4658      	mov	r0, fp
 800642c:	f000 faf0 	bl	8006a10 <__multadd>
 8006430:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006432:	4681      	mov	r9, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 816c 	beq.w	8006712 <_dtoa_r+0xb52>
 800643a:	2300      	movs	r3, #0
 800643c:	4629      	mov	r1, r5
 800643e:	220a      	movs	r2, #10
 8006440:	4658      	mov	r0, fp
 8006442:	f000 fae5 	bl	8006a10 <__multadd>
 8006446:	9b08      	ldr	r3, [sp, #32]
 8006448:	4605      	mov	r5, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	dc61      	bgt.n	8006512 <_dtoa_r+0x952>
 800644e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006450:	2b02      	cmp	r3, #2
 8006452:	dc3b      	bgt.n	80064cc <_dtoa_r+0x90c>
 8006454:	e05d      	b.n	8006512 <_dtoa_r+0x952>
 8006456:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006458:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800645c:	e746      	b.n	80062ec <_dtoa_r+0x72c>
 800645e:	9b07      	ldr	r3, [sp, #28]
 8006460:	1e5c      	subs	r4, r3, #1
 8006462:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006464:	42a3      	cmp	r3, r4
 8006466:	bfbf      	itttt	lt
 8006468:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800646a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800646c:	1ae3      	sublt	r3, r4, r3
 800646e:	18d2      	addlt	r2, r2, r3
 8006470:	bfa8      	it	ge
 8006472:	1b1c      	subge	r4, r3, r4
 8006474:	9b07      	ldr	r3, [sp, #28]
 8006476:	bfbe      	ittt	lt
 8006478:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800647a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800647c:	2400      	movlt	r4, #0
 800647e:	2b00      	cmp	r3, #0
 8006480:	bfb5      	itete	lt
 8006482:	eba8 0603 	sublt.w	r6, r8, r3
 8006486:	4646      	movge	r6, r8
 8006488:	2300      	movlt	r3, #0
 800648a:	9b07      	ldrge	r3, [sp, #28]
 800648c:	e730      	b.n	80062f0 <_dtoa_r+0x730>
 800648e:	4646      	mov	r6, r8
 8006490:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006492:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006494:	e735      	b.n	8006302 <_dtoa_r+0x742>
 8006496:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006498:	e75c      	b.n	8006354 <_dtoa_r+0x794>
 800649a:	2300      	movs	r3, #0
 800649c:	e788      	b.n	80063b0 <_dtoa_r+0x7f0>
 800649e:	9b02      	ldr	r3, [sp, #8]
 80064a0:	e786      	b.n	80063b0 <_dtoa_r+0x7f0>
 80064a2:	2300      	movs	r3, #0
 80064a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80064a6:	e788      	b.n	80063ba <_dtoa_r+0x7fa>
 80064a8:	d09f      	beq.n	80063ea <_dtoa_r+0x82a>
 80064aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064ac:	331c      	adds	r3, #28
 80064ae:	441a      	add	r2, r3
 80064b0:	4498      	add	r8, r3
 80064b2:	441e      	add	r6, r3
 80064b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80064b6:	e798      	b.n	80063ea <_dtoa_r+0x82a>
 80064b8:	4603      	mov	r3, r0
 80064ba:	e7f6      	b.n	80064aa <_dtoa_r+0x8ea>
 80064bc:	9b07      	ldr	r3, [sp, #28]
 80064be:	9704      	str	r7, [sp, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	dc20      	bgt.n	8006506 <_dtoa_r+0x946>
 80064c4:	9308      	str	r3, [sp, #32]
 80064c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	dd1e      	ble.n	800650a <_dtoa_r+0x94a>
 80064cc:	9b08      	ldr	r3, [sp, #32]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f47f aebc 	bne.w	800624c <_dtoa_r+0x68c>
 80064d4:	4621      	mov	r1, r4
 80064d6:	2205      	movs	r2, #5
 80064d8:	4658      	mov	r0, fp
 80064da:	f000 fa99 	bl	8006a10 <__multadd>
 80064de:	4601      	mov	r1, r0
 80064e0:	4604      	mov	r4, r0
 80064e2:	4648      	mov	r0, r9
 80064e4:	f000 fcaa 	bl	8006e3c <__mcmp>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	f77f aeaf 	ble.w	800624c <_dtoa_r+0x68c>
 80064ee:	2331      	movs	r3, #49	@ 0x31
 80064f0:	4656      	mov	r6, sl
 80064f2:	f806 3b01 	strb.w	r3, [r6], #1
 80064f6:	9b04      	ldr	r3, [sp, #16]
 80064f8:	3301      	adds	r3, #1
 80064fa:	9304      	str	r3, [sp, #16]
 80064fc:	e6aa      	b.n	8006254 <_dtoa_r+0x694>
 80064fe:	9c07      	ldr	r4, [sp, #28]
 8006500:	9704      	str	r7, [sp, #16]
 8006502:	4625      	mov	r5, r4
 8006504:	e7f3      	b.n	80064ee <_dtoa_r+0x92e>
 8006506:	9b07      	ldr	r3, [sp, #28]
 8006508:	9308      	str	r3, [sp, #32]
 800650a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 8104 	beq.w	800671a <_dtoa_r+0xb5a>
 8006512:	2e00      	cmp	r6, #0
 8006514:	dd05      	ble.n	8006522 <_dtoa_r+0x962>
 8006516:	4629      	mov	r1, r5
 8006518:	4632      	mov	r2, r6
 800651a:	4658      	mov	r0, fp
 800651c:	f000 fc22 	bl	8006d64 <__lshift>
 8006520:	4605      	mov	r5, r0
 8006522:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006524:	2b00      	cmp	r3, #0
 8006526:	d05a      	beq.n	80065de <_dtoa_r+0xa1e>
 8006528:	4658      	mov	r0, fp
 800652a:	6869      	ldr	r1, [r5, #4]
 800652c:	f000 fa0e 	bl	800694c <_Balloc>
 8006530:	4606      	mov	r6, r0
 8006532:	b928      	cbnz	r0, 8006540 <_dtoa_r+0x980>
 8006534:	4602      	mov	r2, r0
 8006536:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800653a:	4b83      	ldr	r3, [pc, #524]	@ (8006748 <_dtoa_r+0xb88>)
 800653c:	f7ff bb54 	b.w	8005be8 <_dtoa_r+0x28>
 8006540:	692a      	ldr	r2, [r5, #16]
 8006542:	f105 010c 	add.w	r1, r5, #12
 8006546:	3202      	adds	r2, #2
 8006548:	0092      	lsls	r2, r2, #2
 800654a:	300c      	adds	r0, #12
 800654c:	f000 ffa8 	bl	80074a0 <memcpy>
 8006550:	2201      	movs	r2, #1
 8006552:	4631      	mov	r1, r6
 8006554:	4658      	mov	r0, fp
 8006556:	f000 fc05 	bl	8006d64 <__lshift>
 800655a:	462f      	mov	r7, r5
 800655c:	4605      	mov	r5, r0
 800655e:	f10a 0301 	add.w	r3, sl, #1
 8006562:	9307      	str	r3, [sp, #28]
 8006564:	9b08      	ldr	r3, [sp, #32]
 8006566:	4453      	add	r3, sl
 8006568:	930b      	str	r3, [sp, #44]	@ 0x2c
 800656a:	9b02      	ldr	r3, [sp, #8]
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	930a      	str	r3, [sp, #40]	@ 0x28
 8006572:	9b07      	ldr	r3, [sp, #28]
 8006574:	4621      	mov	r1, r4
 8006576:	3b01      	subs	r3, #1
 8006578:	4648      	mov	r0, r9
 800657a:	9302      	str	r3, [sp, #8]
 800657c:	f7ff fa95 	bl	8005aaa <quorem>
 8006580:	4639      	mov	r1, r7
 8006582:	9008      	str	r0, [sp, #32]
 8006584:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006588:	4648      	mov	r0, r9
 800658a:	f000 fc57 	bl	8006e3c <__mcmp>
 800658e:	462a      	mov	r2, r5
 8006590:	9009      	str	r0, [sp, #36]	@ 0x24
 8006592:	4621      	mov	r1, r4
 8006594:	4658      	mov	r0, fp
 8006596:	f000 fc6d 	bl	8006e74 <__mdiff>
 800659a:	68c2      	ldr	r2, [r0, #12]
 800659c:	4606      	mov	r6, r0
 800659e:	bb02      	cbnz	r2, 80065e2 <_dtoa_r+0xa22>
 80065a0:	4601      	mov	r1, r0
 80065a2:	4648      	mov	r0, r9
 80065a4:	f000 fc4a 	bl	8006e3c <__mcmp>
 80065a8:	4602      	mov	r2, r0
 80065aa:	4631      	mov	r1, r6
 80065ac:	4658      	mov	r0, fp
 80065ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80065b0:	f000 fa0c 	bl	80069cc <_Bfree>
 80065b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80065b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80065b8:	9e07      	ldr	r6, [sp, #28]
 80065ba:	ea43 0102 	orr.w	r1, r3, r2
 80065be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065c0:	4319      	orrs	r1, r3
 80065c2:	d110      	bne.n	80065e6 <_dtoa_r+0xa26>
 80065c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80065c8:	d029      	beq.n	800661e <_dtoa_r+0xa5e>
 80065ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	dd02      	ble.n	80065d6 <_dtoa_r+0xa16>
 80065d0:	9b08      	ldr	r3, [sp, #32]
 80065d2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80065d6:	9b02      	ldr	r3, [sp, #8]
 80065d8:	f883 8000 	strb.w	r8, [r3]
 80065dc:	e63b      	b.n	8006256 <_dtoa_r+0x696>
 80065de:	4628      	mov	r0, r5
 80065e0:	e7bb      	b.n	800655a <_dtoa_r+0x99a>
 80065e2:	2201      	movs	r2, #1
 80065e4:	e7e1      	b.n	80065aa <_dtoa_r+0x9ea>
 80065e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	db04      	blt.n	80065f6 <_dtoa_r+0xa36>
 80065ec:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80065ee:	430b      	orrs	r3, r1
 80065f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80065f2:	430b      	orrs	r3, r1
 80065f4:	d120      	bne.n	8006638 <_dtoa_r+0xa78>
 80065f6:	2a00      	cmp	r2, #0
 80065f8:	dded      	ble.n	80065d6 <_dtoa_r+0xa16>
 80065fa:	4649      	mov	r1, r9
 80065fc:	2201      	movs	r2, #1
 80065fe:	4658      	mov	r0, fp
 8006600:	f000 fbb0 	bl	8006d64 <__lshift>
 8006604:	4621      	mov	r1, r4
 8006606:	4681      	mov	r9, r0
 8006608:	f000 fc18 	bl	8006e3c <__mcmp>
 800660c:	2800      	cmp	r0, #0
 800660e:	dc03      	bgt.n	8006618 <_dtoa_r+0xa58>
 8006610:	d1e1      	bne.n	80065d6 <_dtoa_r+0xa16>
 8006612:	f018 0f01 	tst.w	r8, #1
 8006616:	d0de      	beq.n	80065d6 <_dtoa_r+0xa16>
 8006618:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800661c:	d1d8      	bne.n	80065d0 <_dtoa_r+0xa10>
 800661e:	2339      	movs	r3, #57	@ 0x39
 8006620:	9a02      	ldr	r2, [sp, #8]
 8006622:	7013      	strb	r3, [r2, #0]
 8006624:	4633      	mov	r3, r6
 8006626:	461e      	mov	r6, r3
 8006628:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800662c:	3b01      	subs	r3, #1
 800662e:	2a39      	cmp	r2, #57	@ 0x39
 8006630:	d052      	beq.n	80066d8 <_dtoa_r+0xb18>
 8006632:	3201      	adds	r2, #1
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	e60e      	b.n	8006256 <_dtoa_r+0x696>
 8006638:	2a00      	cmp	r2, #0
 800663a:	dd07      	ble.n	800664c <_dtoa_r+0xa8c>
 800663c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006640:	d0ed      	beq.n	800661e <_dtoa_r+0xa5e>
 8006642:	9a02      	ldr	r2, [sp, #8]
 8006644:	f108 0301 	add.w	r3, r8, #1
 8006648:	7013      	strb	r3, [r2, #0]
 800664a:	e604      	b.n	8006256 <_dtoa_r+0x696>
 800664c:	9b07      	ldr	r3, [sp, #28]
 800664e:	9a07      	ldr	r2, [sp, #28]
 8006650:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006654:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006656:	4293      	cmp	r3, r2
 8006658:	d028      	beq.n	80066ac <_dtoa_r+0xaec>
 800665a:	4649      	mov	r1, r9
 800665c:	2300      	movs	r3, #0
 800665e:	220a      	movs	r2, #10
 8006660:	4658      	mov	r0, fp
 8006662:	f000 f9d5 	bl	8006a10 <__multadd>
 8006666:	42af      	cmp	r7, r5
 8006668:	4681      	mov	r9, r0
 800666a:	f04f 0300 	mov.w	r3, #0
 800666e:	f04f 020a 	mov.w	r2, #10
 8006672:	4639      	mov	r1, r7
 8006674:	4658      	mov	r0, fp
 8006676:	d107      	bne.n	8006688 <_dtoa_r+0xac8>
 8006678:	f000 f9ca 	bl	8006a10 <__multadd>
 800667c:	4607      	mov	r7, r0
 800667e:	4605      	mov	r5, r0
 8006680:	9b07      	ldr	r3, [sp, #28]
 8006682:	3301      	adds	r3, #1
 8006684:	9307      	str	r3, [sp, #28]
 8006686:	e774      	b.n	8006572 <_dtoa_r+0x9b2>
 8006688:	f000 f9c2 	bl	8006a10 <__multadd>
 800668c:	4629      	mov	r1, r5
 800668e:	4607      	mov	r7, r0
 8006690:	2300      	movs	r3, #0
 8006692:	220a      	movs	r2, #10
 8006694:	4658      	mov	r0, fp
 8006696:	f000 f9bb 	bl	8006a10 <__multadd>
 800669a:	4605      	mov	r5, r0
 800669c:	e7f0      	b.n	8006680 <_dtoa_r+0xac0>
 800669e:	9b08      	ldr	r3, [sp, #32]
 80066a0:	2700      	movs	r7, #0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	bfcc      	ite	gt
 80066a6:	461e      	movgt	r6, r3
 80066a8:	2601      	movle	r6, #1
 80066aa:	4456      	add	r6, sl
 80066ac:	4649      	mov	r1, r9
 80066ae:	2201      	movs	r2, #1
 80066b0:	4658      	mov	r0, fp
 80066b2:	f000 fb57 	bl	8006d64 <__lshift>
 80066b6:	4621      	mov	r1, r4
 80066b8:	4681      	mov	r9, r0
 80066ba:	f000 fbbf 	bl	8006e3c <__mcmp>
 80066be:	2800      	cmp	r0, #0
 80066c0:	dcb0      	bgt.n	8006624 <_dtoa_r+0xa64>
 80066c2:	d102      	bne.n	80066ca <_dtoa_r+0xb0a>
 80066c4:	f018 0f01 	tst.w	r8, #1
 80066c8:	d1ac      	bne.n	8006624 <_dtoa_r+0xa64>
 80066ca:	4633      	mov	r3, r6
 80066cc:	461e      	mov	r6, r3
 80066ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066d2:	2a30      	cmp	r2, #48	@ 0x30
 80066d4:	d0fa      	beq.n	80066cc <_dtoa_r+0xb0c>
 80066d6:	e5be      	b.n	8006256 <_dtoa_r+0x696>
 80066d8:	459a      	cmp	sl, r3
 80066da:	d1a4      	bne.n	8006626 <_dtoa_r+0xa66>
 80066dc:	9b04      	ldr	r3, [sp, #16]
 80066de:	3301      	adds	r3, #1
 80066e0:	9304      	str	r3, [sp, #16]
 80066e2:	2331      	movs	r3, #49	@ 0x31
 80066e4:	f88a 3000 	strb.w	r3, [sl]
 80066e8:	e5b5      	b.n	8006256 <_dtoa_r+0x696>
 80066ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80066ec:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800674c <_dtoa_r+0xb8c>
 80066f0:	b11b      	cbz	r3, 80066fa <_dtoa_r+0xb3a>
 80066f2:	f10a 0308 	add.w	r3, sl, #8
 80066f6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	4650      	mov	r0, sl
 80066fc:	b017      	add	sp, #92	@ 0x5c
 80066fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006702:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006704:	2b01      	cmp	r3, #1
 8006706:	f77f ae3d 	ble.w	8006384 <_dtoa_r+0x7c4>
 800670a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800670c:	930a      	str	r3, [sp, #40]	@ 0x28
 800670e:	2001      	movs	r0, #1
 8006710:	e65b      	b.n	80063ca <_dtoa_r+0x80a>
 8006712:	9b08      	ldr	r3, [sp, #32]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f77f aed6 	ble.w	80064c6 <_dtoa_r+0x906>
 800671a:	4656      	mov	r6, sl
 800671c:	4621      	mov	r1, r4
 800671e:	4648      	mov	r0, r9
 8006720:	f7ff f9c3 	bl	8005aaa <quorem>
 8006724:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006728:	9b08      	ldr	r3, [sp, #32]
 800672a:	f806 8b01 	strb.w	r8, [r6], #1
 800672e:	eba6 020a 	sub.w	r2, r6, sl
 8006732:	4293      	cmp	r3, r2
 8006734:	ddb3      	ble.n	800669e <_dtoa_r+0xade>
 8006736:	4649      	mov	r1, r9
 8006738:	2300      	movs	r3, #0
 800673a:	220a      	movs	r2, #10
 800673c:	4658      	mov	r0, fp
 800673e:	f000 f967 	bl	8006a10 <__multadd>
 8006742:	4681      	mov	r9, r0
 8006744:	e7ea      	b.n	800671c <_dtoa_r+0xb5c>
 8006746:	bf00      	nop
 8006748:	08008de6 	.word	0x08008de6
 800674c:	08008d6a 	.word	0x08008d6a

08006750 <_free_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4605      	mov	r5, r0
 8006754:	2900      	cmp	r1, #0
 8006756:	d040      	beq.n	80067da <_free_r+0x8a>
 8006758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800675c:	1f0c      	subs	r4, r1, #4
 800675e:	2b00      	cmp	r3, #0
 8006760:	bfb8      	it	lt
 8006762:	18e4      	addlt	r4, r4, r3
 8006764:	f000 f8e6 	bl	8006934 <__malloc_lock>
 8006768:	4a1c      	ldr	r2, [pc, #112]	@ (80067dc <_free_r+0x8c>)
 800676a:	6813      	ldr	r3, [r2, #0]
 800676c:	b933      	cbnz	r3, 800677c <_free_r+0x2c>
 800676e:	6063      	str	r3, [r4, #4]
 8006770:	6014      	str	r4, [r2, #0]
 8006772:	4628      	mov	r0, r5
 8006774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006778:	f000 b8e2 	b.w	8006940 <__malloc_unlock>
 800677c:	42a3      	cmp	r3, r4
 800677e:	d908      	bls.n	8006792 <_free_r+0x42>
 8006780:	6820      	ldr	r0, [r4, #0]
 8006782:	1821      	adds	r1, r4, r0
 8006784:	428b      	cmp	r3, r1
 8006786:	bf01      	itttt	eq
 8006788:	6819      	ldreq	r1, [r3, #0]
 800678a:	685b      	ldreq	r3, [r3, #4]
 800678c:	1809      	addeq	r1, r1, r0
 800678e:	6021      	streq	r1, [r4, #0]
 8006790:	e7ed      	b.n	800676e <_free_r+0x1e>
 8006792:	461a      	mov	r2, r3
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	b10b      	cbz	r3, 800679c <_free_r+0x4c>
 8006798:	42a3      	cmp	r3, r4
 800679a:	d9fa      	bls.n	8006792 <_free_r+0x42>
 800679c:	6811      	ldr	r1, [r2, #0]
 800679e:	1850      	adds	r0, r2, r1
 80067a0:	42a0      	cmp	r0, r4
 80067a2:	d10b      	bne.n	80067bc <_free_r+0x6c>
 80067a4:	6820      	ldr	r0, [r4, #0]
 80067a6:	4401      	add	r1, r0
 80067a8:	1850      	adds	r0, r2, r1
 80067aa:	4283      	cmp	r3, r0
 80067ac:	6011      	str	r1, [r2, #0]
 80067ae:	d1e0      	bne.n	8006772 <_free_r+0x22>
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4408      	add	r0, r1
 80067b6:	6010      	str	r0, [r2, #0]
 80067b8:	6053      	str	r3, [r2, #4]
 80067ba:	e7da      	b.n	8006772 <_free_r+0x22>
 80067bc:	d902      	bls.n	80067c4 <_free_r+0x74>
 80067be:	230c      	movs	r3, #12
 80067c0:	602b      	str	r3, [r5, #0]
 80067c2:	e7d6      	b.n	8006772 <_free_r+0x22>
 80067c4:	6820      	ldr	r0, [r4, #0]
 80067c6:	1821      	adds	r1, r4, r0
 80067c8:	428b      	cmp	r3, r1
 80067ca:	bf01      	itttt	eq
 80067cc:	6819      	ldreq	r1, [r3, #0]
 80067ce:	685b      	ldreq	r3, [r3, #4]
 80067d0:	1809      	addeq	r1, r1, r0
 80067d2:	6021      	streq	r1, [r4, #0]
 80067d4:	6063      	str	r3, [r4, #4]
 80067d6:	6054      	str	r4, [r2, #4]
 80067d8:	e7cb      	b.n	8006772 <_free_r+0x22>
 80067da:	bd38      	pop	{r3, r4, r5, pc}
 80067dc:	200004d0 	.word	0x200004d0

080067e0 <malloc>:
 80067e0:	4b02      	ldr	r3, [pc, #8]	@ (80067ec <malloc+0xc>)
 80067e2:	4601      	mov	r1, r0
 80067e4:	6818      	ldr	r0, [r3, #0]
 80067e6:	f000 b825 	b.w	8006834 <_malloc_r>
 80067ea:	bf00      	nop
 80067ec:	20000020 	.word	0x20000020

080067f0 <sbrk_aligned>:
 80067f0:	b570      	push	{r4, r5, r6, lr}
 80067f2:	4e0f      	ldr	r6, [pc, #60]	@ (8006830 <sbrk_aligned+0x40>)
 80067f4:	460c      	mov	r4, r1
 80067f6:	6831      	ldr	r1, [r6, #0]
 80067f8:	4605      	mov	r5, r0
 80067fa:	b911      	cbnz	r1, 8006802 <sbrk_aligned+0x12>
 80067fc:	f000 fe40 	bl	8007480 <_sbrk_r>
 8006800:	6030      	str	r0, [r6, #0]
 8006802:	4621      	mov	r1, r4
 8006804:	4628      	mov	r0, r5
 8006806:	f000 fe3b 	bl	8007480 <_sbrk_r>
 800680a:	1c43      	adds	r3, r0, #1
 800680c:	d103      	bne.n	8006816 <sbrk_aligned+0x26>
 800680e:	f04f 34ff 	mov.w	r4, #4294967295
 8006812:	4620      	mov	r0, r4
 8006814:	bd70      	pop	{r4, r5, r6, pc}
 8006816:	1cc4      	adds	r4, r0, #3
 8006818:	f024 0403 	bic.w	r4, r4, #3
 800681c:	42a0      	cmp	r0, r4
 800681e:	d0f8      	beq.n	8006812 <sbrk_aligned+0x22>
 8006820:	1a21      	subs	r1, r4, r0
 8006822:	4628      	mov	r0, r5
 8006824:	f000 fe2c 	bl	8007480 <_sbrk_r>
 8006828:	3001      	adds	r0, #1
 800682a:	d1f2      	bne.n	8006812 <sbrk_aligned+0x22>
 800682c:	e7ef      	b.n	800680e <sbrk_aligned+0x1e>
 800682e:	bf00      	nop
 8006830:	200004cc 	.word	0x200004cc

08006834 <_malloc_r>:
 8006834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006838:	1ccd      	adds	r5, r1, #3
 800683a:	f025 0503 	bic.w	r5, r5, #3
 800683e:	3508      	adds	r5, #8
 8006840:	2d0c      	cmp	r5, #12
 8006842:	bf38      	it	cc
 8006844:	250c      	movcc	r5, #12
 8006846:	2d00      	cmp	r5, #0
 8006848:	4606      	mov	r6, r0
 800684a:	db01      	blt.n	8006850 <_malloc_r+0x1c>
 800684c:	42a9      	cmp	r1, r5
 800684e:	d904      	bls.n	800685a <_malloc_r+0x26>
 8006850:	230c      	movs	r3, #12
 8006852:	6033      	str	r3, [r6, #0]
 8006854:	2000      	movs	r0, #0
 8006856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800685a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006930 <_malloc_r+0xfc>
 800685e:	f000 f869 	bl	8006934 <__malloc_lock>
 8006862:	f8d8 3000 	ldr.w	r3, [r8]
 8006866:	461c      	mov	r4, r3
 8006868:	bb44      	cbnz	r4, 80068bc <_malloc_r+0x88>
 800686a:	4629      	mov	r1, r5
 800686c:	4630      	mov	r0, r6
 800686e:	f7ff ffbf 	bl	80067f0 <sbrk_aligned>
 8006872:	1c43      	adds	r3, r0, #1
 8006874:	4604      	mov	r4, r0
 8006876:	d158      	bne.n	800692a <_malloc_r+0xf6>
 8006878:	f8d8 4000 	ldr.w	r4, [r8]
 800687c:	4627      	mov	r7, r4
 800687e:	2f00      	cmp	r7, #0
 8006880:	d143      	bne.n	800690a <_malloc_r+0xd6>
 8006882:	2c00      	cmp	r4, #0
 8006884:	d04b      	beq.n	800691e <_malloc_r+0xea>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	4639      	mov	r1, r7
 800688a:	4630      	mov	r0, r6
 800688c:	eb04 0903 	add.w	r9, r4, r3
 8006890:	f000 fdf6 	bl	8007480 <_sbrk_r>
 8006894:	4581      	cmp	r9, r0
 8006896:	d142      	bne.n	800691e <_malloc_r+0xea>
 8006898:	6821      	ldr	r1, [r4, #0]
 800689a:	4630      	mov	r0, r6
 800689c:	1a6d      	subs	r5, r5, r1
 800689e:	4629      	mov	r1, r5
 80068a0:	f7ff ffa6 	bl	80067f0 <sbrk_aligned>
 80068a4:	3001      	adds	r0, #1
 80068a6:	d03a      	beq.n	800691e <_malloc_r+0xea>
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	442b      	add	r3, r5
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	f8d8 3000 	ldr.w	r3, [r8]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	bb62      	cbnz	r2, 8006910 <_malloc_r+0xdc>
 80068b6:	f8c8 7000 	str.w	r7, [r8]
 80068ba:	e00f      	b.n	80068dc <_malloc_r+0xa8>
 80068bc:	6822      	ldr	r2, [r4, #0]
 80068be:	1b52      	subs	r2, r2, r5
 80068c0:	d420      	bmi.n	8006904 <_malloc_r+0xd0>
 80068c2:	2a0b      	cmp	r2, #11
 80068c4:	d917      	bls.n	80068f6 <_malloc_r+0xc2>
 80068c6:	1961      	adds	r1, r4, r5
 80068c8:	42a3      	cmp	r3, r4
 80068ca:	6025      	str	r5, [r4, #0]
 80068cc:	bf18      	it	ne
 80068ce:	6059      	strne	r1, [r3, #4]
 80068d0:	6863      	ldr	r3, [r4, #4]
 80068d2:	bf08      	it	eq
 80068d4:	f8c8 1000 	streq.w	r1, [r8]
 80068d8:	5162      	str	r2, [r4, r5]
 80068da:	604b      	str	r3, [r1, #4]
 80068dc:	4630      	mov	r0, r6
 80068de:	f000 f82f 	bl	8006940 <__malloc_unlock>
 80068e2:	f104 000b 	add.w	r0, r4, #11
 80068e6:	1d23      	adds	r3, r4, #4
 80068e8:	f020 0007 	bic.w	r0, r0, #7
 80068ec:	1ac2      	subs	r2, r0, r3
 80068ee:	bf1c      	itt	ne
 80068f0:	1a1b      	subne	r3, r3, r0
 80068f2:	50a3      	strne	r3, [r4, r2]
 80068f4:	e7af      	b.n	8006856 <_malloc_r+0x22>
 80068f6:	6862      	ldr	r2, [r4, #4]
 80068f8:	42a3      	cmp	r3, r4
 80068fa:	bf0c      	ite	eq
 80068fc:	f8c8 2000 	streq.w	r2, [r8]
 8006900:	605a      	strne	r2, [r3, #4]
 8006902:	e7eb      	b.n	80068dc <_malloc_r+0xa8>
 8006904:	4623      	mov	r3, r4
 8006906:	6864      	ldr	r4, [r4, #4]
 8006908:	e7ae      	b.n	8006868 <_malloc_r+0x34>
 800690a:	463c      	mov	r4, r7
 800690c:	687f      	ldr	r7, [r7, #4]
 800690e:	e7b6      	b.n	800687e <_malloc_r+0x4a>
 8006910:	461a      	mov	r2, r3
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	42a3      	cmp	r3, r4
 8006916:	d1fb      	bne.n	8006910 <_malloc_r+0xdc>
 8006918:	2300      	movs	r3, #0
 800691a:	6053      	str	r3, [r2, #4]
 800691c:	e7de      	b.n	80068dc <_malloc_r+0xa8>
 800691e:	230c      	movs	r3, #12
 8006920:	4630      	mov	r0, r6
 8006922:	6033      	str	r3, [r6, #0]
 8006924:	f000 f80c 	bl	8006940 <__malloc_unlock>
 8006928:	e794      	b.n	8006854 <_malloc_r+0x20>
 800692a:	6005      	str	r5, [r0, #0]
 800692c:	e7d6      	b.n	80068dc <_malloc_r+0xa8>
 800692e:	bf00      	nop
 8006930:	200004d0 	.word	0x200004d0

08006934 <__malloc_lock>:
 8006934:	4801      	ldr	r0, [pc, #4]	@ (800693c <__malloc_lock+0x8>)
 8006936:	f7ff b8a8 	b.w	8005a8a <__retarget_lock_acquire_recursive>
 800693a:	bf00      	nop
 800693c:	200004c8 	.word	0x200004c8

08006940 <__malloc_unlock>:
 8006940:	4801      	ldr	r0, [pc, #4]	@ (8006948 <__malloc_unlock+0x8>)
 8006942:	f7ff b8a3 	b.w	8005a8c <__retarget_lock_release_recursive>
 8006946:	bf00      	nop
 8006948:	200004c8 	.word	0x200004c8

0800694c <_Balloc>:
 800694c:	b570      	push	{r4, r5, r6, lr}
 800694e:	69c6      	ldr	r6, [r0, #28]
 8006950:	4604      	mov	r4, r0
 8006952:	460d      	mov	r5, r1
 8006954:	b976      	cbnz	r6, 8006974 <_Balloc+0x28>
 8006956:	2010      	movs	r0, #16
 8006958:	f7ff ff42 	bl	80067e0 <malloc>
 800695c:	4602      	mov	r2, r0
 800695e:	61e0      	str	r0, [r4, #28]
 8006960:	b920      	cbnz	r0, 800696c <_Balloc+0x20>
 8006962:	216b      	movs	r1, #107	@ 0x6b
 8006964:	4b17      	ldr	r3, [pc, #92]	@ (80069c4 <_Balloc+0x78>)
 8006966:	4818      	ldr	r0, [pc, #96]	@ (80069c8 <_Balloc+0x7c>)
 8006968:	f000 fda8 	bl	80074bc <__assert_func>
 800696c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006970:	6006      	str	r6, [r0, #0]
 8006972:	60c6      	str	r6, [r0, #12]
 8006974:	69e6      	ldr	r6, [r4, #28]
 8006976:	68f3      	ldr	r3, [r6, #12]
 8006978:	b183      	cbz	r3, 800699c <_Balloc+0x50>
 800697a:	69e3      	ldr	r3, [r4, #28]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006982:	b9b8      	cbnz	r0, 80069b4 <_Balloc+0x68>
 8006984:	2101      	movs	r1, #1
 8006986:	fa01 f605 	lsl.w	r6, r1, r5
 800698a:	1d72      	adds	r2, r6, #5
 800698c:	4620      	mov	r0, r4
 800698e:	0092      	lsls	r2, r2, #2
 8006990:	f000 fdb2 	bl	80074f8 <_calloc_r>
 8006994:	b160      	cbz	r0, 80069b0 <_Balloc+0x64>
 8006996:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800699a:	e00e      	b.n	80069ba <_Balloc+0x6e>
 800699c:	2221      	movs	r2, #33	@ 0x21
 800699e:	2104      	movs	r1, #4
 80069a0:	4620      	mov	r0, r4
 80069a2:	f000 fda9 	bl	80074f8 <_calloc_r>
 80069a6:	69e3      	ldr	r3, [r4, #28]
 80069a8:	60f0      	str	r0, [r6, #12]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e4      	bne.n	800697a <_Balloc+0x2e>
 80069b0:	2000      	movs	r0, #0
 80069b2:	bd70      	pop	{r4, r5, r6, pc}
 80069b4:	6802      	ldr	r2, [r0, #0]
 80069b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069ba:	2300      	movs	r3, #0
 80069bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069c0:	e7f7      	b.n	80069b2 <_Balloc+0x66>
 80069c2:	bf00      	nop
 80069c4:	08008d77 	.word	0x08008d77
 80069c8:	08008df7 	.word	0x08008df7

080069cc <_Bfree>:
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	69c6      	ldr	r6, [r0, #28]
 80069d0:	4605      	mov	r5, r0
 80069d2:	460c      	mov	r4, r1
 80069d4:	b976      	cbnz	r6, 80069f4 <_Bfree+0x28>
 80069d6:	2010      	movs	r0, #16
 80069d8:	f7ff ff02 	bl	80067e0 <malloc>
 80069dc:	4602      	mov	r2, r0
 80069de:	61e8      	str	r0, [r5, #28]
 80069e0:	b920      	cbnz	r0, 80069ec <_Bfree+0x20>
 80069e2:	218f      	movs	r1, #143	@ 0x8f
 80069e4:	4b08      	ldr	r3, [pc, #32]	@ (8006a08 <_Bfree+0x3c>)
 80069e6:	4809      	ldr	r0, [pc, #36]	@ (8006a0c <_Bfree+0x40>)
 80069e8:	f000 fd68 	bl	80074bc <__assert_func>
 80069ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069f0:	6006      	str	r6, [r0, #0]
 80069f2:	60c6      	str	r6, [r0, #12]
 80069f4:	b13c      	cbz	r4, 8006a06 <_Bfree+0x3a>
 80069f6:	69eb      	ldr	r3, [r5, #28]
 80069f8:	6862      	ldr	r2, [r4, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a00:	6021      	str	r1, [r4, #0]
 8006a02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a06:	bd70      	pop	{r4, r5, r6, pc}
 8006a08:	08008d77 	.word	0x08008d77
 8006a0c:	08008df7 	.word	0x08008df7

08006a10 <__multadd>:
 8006a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a14:	4607      	mov	r7, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	461e      	mov	r6, r3
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	690d      	ldr	r5, [r1, #16]
 8006a1e:	f101 0c14 	add.w	ip, r1, #20
 8006a22:	f8dc 3000 	ldr.w	r3, [ip]
 8006a26:	3001      	adds	r0, #1
 8006a28:	b299      	uxth	r1, r3
 8006a2a:	fb02 6101 	mla	r1, r2, r1, r6
 8006a2e:	0c1e      	lsrs	r6, r3, #16
 8006a30:	0c0b      	lsrs	r3, r1, #16
 8006a32:	fb02 3306 	mla	r3, r2, r6, r3
 8006a36:	b289      	uxth	r1, r1
 8006a38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a3c:	4285      	cmp	r5, r0
 8006a3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a42:	f84c 1b04 	str.w	r1, [ip], #4
 8006a46:	dcec      	bgt.n	8006a22 <__multadd+0x12>
 8006a48:	b30e      	cbz	r6, 8006a8e <__multadd+0x7e>
 8006a4a:	68a3      	ldr	r3, [r4, #8]
 8006a4c:	42ab      	cmp	r3, r5
 8006a4e:	dc19      	bgt.n	8006a84 <__multadd+0x74>
 8006a50:	6861      	ldr	r1, [r4, #4]
 8006a52:	4638      	mov	r0, r7
 8006a54:	3101      	adds	r1, #1
 8006a56:	f7ff ff79 	bl	800694c <_Balloc>
 8006a5a:	4680      	mov	r8, r0
 8006a5c:	b928      	cbnz	r0, 8006a6a <__multadd+0x5a>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	21ba      	movs	r1, #186	@ 0xba
 8006a62:	4b0c      	ldr	r3, [pc, #48]	@ (8006a94 <__multadd+0x84>)
 8006a64:	480c      	ldr	r0, [pc, #48]	@ (8006a98 <__multadd+0x88>)
 8006a66:	f000 fd29 	bl	80074bc <__assert_func>
 8006a6a:	6922      	ldr	r2, [r4, #16]
 8006a6c:	f104 010c 	add.w	r1, r4, #12
 8006a70:	3202      	adds	r2, #2
 8006a72:	0092      	lsls	r2, r2, #2
 8006a74:	300c      	adds	r0, #12
 8006a76:	f000 fd13 	bl	80074a0 <memcpy>
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	4638      	mov	r0, r7
 8006a7e:	f7ff ffa5 	bl	80069cc <_Bfree>
 8006a82:	4644      	mov	r4, r8
 8006a84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a88:	3501      	adds	r5, #1
 8006a8a:	615e      	str	r6, [r3, #20]
 8006a8c:	6125      	str	r5, [r4, #16]
 8006a8e:	4620      	mov	r0, r4
 8006a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a94:	08008de6 	.word	0x08008de6
 8006a98:	08008df7 	.word	0x08008df7

08006a9c <__hi0bits>:
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006aa2:	bf3a      	itte	cc
 8006aa4:	0403      	lslcc	r3, r0, #16
 8006aa6:	2010      	movcc	r0, #16
 8006aa8:	2000      	movcs	r0, #0
 8006aaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006aae:	bf3c      	itt	cc
 8006ab0:	021b      	lslcc	r3, r3, #8
 8006ab2:	3008      	addcc	r0, #8
 8006ab4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ab8:	bf3c      	itt	cc
 8006aba:	011b      	lslcc	r3, r3, #4
 8006abc:	3004      	addcc	r0, #4
 8006abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ac2:	bf3c      	itt	cc
 8006ac4:	009b      	lslcc	r3, r3, #2
 8006ac6:	3002      	addcc	r0, #2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	db05      	blt.n	8006ad8 <__hi0bits+0x3c>
 8006acc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006ad0:	f100 0001 	add.w	r0, r0, #1
 8006ad4:	bf08      	it	eq
 8006ad6:	2020      	moveq	r0, #32
 8006ad8:	4770      	bx	lr

08006ada <__lo0bits>:
 8006ada:	6803      	ldr	r3, [r0, #0]
 8006adc:	4602      	mov	r2, r0
 8006ade:	f013 0007 	ands.w	r0, r3, #7
 8006ae2:	d00b      	beq.n	8006afc <__lo0bits+0x22>
 8006ae4:	07d9      	lsls	r1, r3, #31
 8006ae6:	d421      	bmi.n	8006b2c <__lo0bits+0x52>
 8006ae8:	0798      	lsls	r0, r3, #30
 8006aea:	bf49      	itett	mi
 8006aec:	085b      	lsrmi	r3, r3, #1
 8006aee:	089b      	lsrpl	r3, r3, #2
 8006af0:	2001      	movmi	r0, #1
 8006af2:	6013      	strmi	r3, [r2, #0]
 8006af4:	bf5c      	itt	pl
 8006af6:	2002      	movpl	r0, #2
 8006af8:	6013      	strpl	r3, [r2, #0]
 8006afa:	4770      	bx	lr
 8006afc:	b299      	uxth	r1, r3
 8006afe:	b909      	cbnz	r1, 8006b04 <__lo0bits+0x2a>
 8006b00:	2010      	movs	r0, #16
 8006b02:	0c1b      	lsrs	r3, r3, #16
 8006b04:	b2d9      	uxtb	r1, r3
 8006b06:	b909      	cbnz	r1, 8006b0c <__lo0bits+0x32>
 8006b08:	3008      	adds	r0, #8
 8006b0a:	0a1b      	lsrs	r3, r3, #8
 8006b0c:	0719      	lsls	r1, r3, #28
 8006b0e:	bf04      	itt	eq
 8006b10:	091b      	lsreq	r3, r3, #4
 8006b12:	3004      	addeq	r0, #4
 8006b14:	0799      	lsls	r1, r3, #30
 8006b16:	bf04      	itt	eq
 8006b18:	089b      	lsreq	r3, r3, #2
 8006b1a:	3002      	addeq	r0, #2
 8006b1c:	07d9      	lsls	r1, r3, #31
 8006b1e:	d403      	bmi.n	8006b28 <__lo0bits+0x4e>
 8006b20:	085b      	lsrs	r3, r3, #1
 8006b22:	f100 0001 	add.w	r0, r0, #1
 8006b26:	d003      	beq.n	8006b30 <__lo0bits+0x56>
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	4770      	bx	lr
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	4770      	bx	lr
 8006b30:	2020      	movs	r0, #32
 8006b32:	4770      	bx	lr

08006b34 <__i2b>:
 8006b34:	b510      	push	{r4, lr}
 8006b36:	460c      	mov	r4, r1
 8006b38:	2101      	movs	r1, #1
 8006b3a:	f7ff ff07 	bl	800694c <_Balloc>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	b928      	cbnz	r0, 8006b4e <__i2b+0x1a>
 8006b42:	f240 1145 	movw	r1, #325	@ 0x145
 8006b46:	4b04      	ldr	r3, [pc, #16]	@ (8006b58 <__i2b+0x24>)
 8006b48:	4804      	ldr	r0, [pc, #16]	@ (8006b5c <__i2b+0x28>)
 8006b4a:	f000 fcb7 	bl	80074bc <__assert_func>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	6144      	str	r4, [r0, #20]
 8006b52:	6103      	str	r3, [r0, #16]
 8006b54:	bd10      	pop	{r4, pc}
 8006b56:	bf00      	nop
 8006b58:	08008de6 	.word	0x08008de6
 8006b5c:	08008df7 	.word	0x08008df7

08006b60 <__multiply>:
 8006b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b64:	4614      	mov	r4, r2
 8006b66:	690a      	ldr	r2, [r1, #16]
 8006b68:	6923      	ldr	r3, [r4, #16]
 8006b6a:	460f      	mov	r7, r1
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	bfa2      	ittt	ge
 8006b70:	4623      	movge	r3, r4
 8006b72:	460c      	movge	r4, r1
 8006b74:	461f      	movge	r7, r3
 8006b76:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006b7a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006b7e:	68a3      	ldr	r3, [r4, #8]
 8006b80:	6861      	ldr	r1, [r4, #4]
 8006b82:	eb0a 0609 	add.w	r6, sl, r9
 8006b86:	42b3      	cmp	r3, r6
 8006b88:	b085      	sub	sp, #20
 8006b8a:	bfb8      	it	lt
 8006b8c:	3101      	addlt	r1, #1
 8006b8e:	f7ff fedd 	bl	800694c <_Balloc>
 8006b92:	b930      	cbnz	r0, 8006ba2 <__multiply+0x42>
 8006b94:	4602      	mov	r2, r0
 8006b96:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006b9a:	4b43      	ldr	r3, [pc, #268]	@ (8006ca8 <__multiply+0x148>)
 8006b9c:	4843      	ldr	r0, [pc, #268]	@ (8006cac <__multiply+0x14c>)
 8006b9e:	f000 fc8d 	bl	80074bc <__assert_func>
 8006ba2:	f100 0514 	add.w	r5, r0, #20
 8006ba6:	462b      	mov	r3, r5
 8006ba8:	2200      	movs	r2, #0
 8006baa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006bae:	4543      	cmp	r3, r8
 8006bb0:	d321      	bcc.n	8006bf6 <__multiply+0x96>
 8006bb2:	f107 0114 	add.w	r1, r7, #20
 8006bb6:	f104 0214 	add.w	r2, r4, #20
 8006bba:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006bbe:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006bc2:	9302      	str	r3, [sp, #8]
 8006bc4:	1b13      	subs	r3, r2, r4
 8006bc6:	3b15      	subs	r3, #21
 8006bc8:	f023 0303 	bic.w	r3, r3, #3
 8006bcc:	3304      	adds	r3, #4
 8006bce:	f104 0715 	add.w	r7, r4, #21
 8006bd2:	42ba      	cmp	r2, r7
 8006bd4:	bf38      	it	cc
 8006bd6:	2304      	movcc	r3, #4
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	9b02      	ldr	r3, [sp, #8]
 8006bdc:	9103      	str	r1, [sp, #12]
 8006bde:	428b      	cmp	r3, r1
 8006be0:	d80c      	bhi.n	8006bfc <__multiply+0x9c>
 8006be2:	2e00      	cmp	r6, #0
 8006be4:	dd03      	ble.n	8006bee <__multiply+0x8e>
 8006be6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d05a      	beq.n	8006ca4 <__multiply+0x144>
 8006bee:	6106      	str	r6, [r0, #16]
 8006bf0:	b005      	add	sp, #20
 8006bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf6:	f843 2b04 	str.w	r2, [r3], #4
 8006bfa:	e7d8      	b.n	8006bae <__multiply+0x4e>
 8006bfc:	f8b1 a000 	ldrh.w	sl, [r1]
 8006c00:	f1ba 0f00 	cmp.w	sl, #0
 8006c04:	d023      	beq.n	8006c4e <__multiply+0xee>
 8006c06:	46a9      	mov	r9, r5
 8006c08:	f04f 0c00 	mov.w	ip, #0
 8006c0c:	f104 0e14 	add.w	lr, r4, #20
 8006c10:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c14:	f8d9 3000 	ldr.w	r3, [r9]
 8006c18:	fa1f fb87 	uxth.w	fp, r7
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006c22:	4463      	add	r3, ip
 8006c24:	f8d9 c000 	ldr.w	ip, [r9]
 8006c28:	0c3f      	lsrs	r7, r7, #16
 8006c2a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006c2e:	fb0a c707 	mla	r7, sl, r7, ip
 8006c32:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c3c:	4572      	cmp	r2, lr
 8006c3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c42:	f849 3b04 	str.w	r3, [r9], #4
 8006c46:	d8e3      	bhi.n	8006c10 <__multiply+0xb0>
 8006c48:	9b01      	ldr	r3, [sp, #4]
 8006c4a:	f845 c003 	str.w	ip, [r5, r3]
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	3104      	adds	r1, #4
 8006c52:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006c56:	f1b9 0f00 	cmp.w	r9, #0
 8006c5a:	d021      	beq.n	8006ca0 <__multiply+0x140>
 8006c5c:	46ae      	mov	lr, r5
 8006c5e:	f04f 0a00 	mov.w	sl, #0
 8006c62:	682b      	ldr	r3, [r5, #0]
 8006c64:	f104 0c14 	add.w	ip, r4, #20
 8006c68:	f8bc b000 	ldrh.w	fp, [ip]
 8006c6c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	fb09 770b 	mla	r7, r9, fp, r7
 8006c76:	4457      	add	r7, sl
 8006c78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c7c:	f84e 3b04 	str.w	r3, [lr], #4
 8006c80:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c88:	f8be 3000 	ldrh.w	r3, [lr]
 8006c8c:	4562      	cmp	r2, ip
 8006c8e:	fb09 330a 	mla	r3, r9, sl, r3
 8006c92:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006c96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c9a:	d8e5      	bhi.n	8006c68 <__multiply+0x108>
 8006c9c:	9f01      	ldr	r7, [sp, #4]
 8006c9e:	51eb      	str	r3, [r5, r7]
 8006ca0:	3504      	adds	r5, #4
 8006ca2:	e79a      	b.n	8006bda <__multiply+0x7a>
 8006ca4:	3e01      	subs	r6, #1
 8006ca6:	e79c      	b.n	8006be2 <__multiply+0x82>
 8006ca8:	08008de6 	.word	0x08008de6
 8006cac:	08008df7 	.word	0x08008df7

08006cb0 <__pow5mult>:
 8006cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cb4:	4615      	mov	r5, r2
 8006cb6:	f012 0203 	ands.w	r2, r2, #3
 8006cba:	4607      	mov	r7, r0
 8006cbc:	460e      	mov	r6, r1
 8006cbe:	d007      	beq.n	8006cd0 <__pow5mult+0x20>
 8006cc0:	4c25      	ldr	r4, [pc, #148]	@ (8006d58 <__pow5mult+0xa8>)
 8006cc2:	3a01      	subs	r2, #1
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cca:	f7ff fea1 	bl	8006a10 <__multadd>
 8006cce:	4606      	mov	r6, r0
 8006cd0:	10ad      	asrs	r5, r5, #2
 8006cd2:	d03d      	beq.n	8006d50 <__pow5mult+0xa0>
 8006cd4:	69fc      	ldr	r4, [r7, #28]
 8006cd6:	b97c      	cbnz	r4, 8006cf8 <__pow5mult+0x48>
 8006cd8:	2010      	movs	r0, #16
 8006cda:	f7ff fd81 	bl	80067e0 <malloc>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	61f8      	str	r0, [r7, #28]
 8006ce2:	b928      	cbnz	r0, 8006cf0 <__pow5mult+0x40>
 8006ce4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8006d5c <__pow5mult+0xac>)
 8006cea:	481d      	ldr	r0, [pc, #116]	@ (8006d60 <__pow5mult+0xb0>)
 8006cec:	f000 fbe6 	bl	80074bc <__assert_func>
 8006cf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cf4:	6004      	str	r4, [r0, #0]
 8006cf6:	60c4      	str	r4, [r0, #12]
 8006cf8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006cfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d00:	b94c      	cbnz	r4, 8006d16 <__pow5mult+0x66>
 8006d02:	f240 2171 	movw	r1, #625	@ 0x271
 8006d06:	4638      	mov	r0, r7
 8006d08:	f7ff ff14 	bl	8006b34 <__i2b>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	4604      	mov	r4, r0
 8006d10:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d14:	6003      	str	r3, [r0, #0]
 8006d16:	f04f 0900 	mov.w	r9, #0
 8006d1a:	07eb      	lsls	r3, r5, #31
 8006d1c:	d50a      	bpl.n	8006d34 <__pow5mult+0x84>
 8006d1e:	4631      	mov	r1, r6
 8006d20:	4622      	mov	r2, r4
 8006d22:	4638      	mov	r0, r7
 8006d24:	f7ff ff1c 	bl	8006b60 <__multiply>
 8006d28:	4680      	mov	r8, r0
 8006d2a:	4631      	mov	r1, r6
 8006d2c:	4638      	mov	r0, r7
 8006d2e:	f7ff fe4d 	bl	80069cc <_Bfree>
 8006d32:	4646      	mov	r6, r8
 8006d34:	106d      	asrs	r5, r5, #1
 8006d36:	d00b      	beq.n	8006d50 <__pow5mult+0xa0>
 8006d38:	6820      	ldr	r0, [r4, #0]
 8006d3a:	b938      	cbnz	r0, 8006d4c <__pow5mult+0x9c>
 8006d3c:	4622      	mov	r2, r4
 8006d3e:	4621      	mov	r1, r4
 8006d40:	4638      	mov	r0, r7
 8006d42:	f7ff ff0d 	bl	8006b60 <__multiply>
 8006d46:	6020      	str	r0, [r4, #0]
 8006d48:	f8c0 9000 	str.w	r9, [r0]
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	e7e4      	b.n	8006d1a <__pow5mult+0x6a>
 8006d50:	4630      	mov	r0, r6
 8006d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d56:	bf00      	nop
 8006d58:	08008e50 	.word	0x08008e50
 8006d5c:	08008d77 	.word	0x08008d77
 8006d60:	08008df7 	.word	0x08008df7

08006d64 <__lshift>:
 8006d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d68:	460c      	mov	r4, r1
 8006d6a:	4607      	mov	r7, r0
 8006d6c:	4691      	mov	r9, r2
 8006d6e:	6923      	ldr	r3, [r4, #16]
 8006d70:	6849      	ldr	r1, [r1, #4]
 8006d72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d76:	68a3      	ldr	r3, [r4, #8]
 8006d78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d7c:	f108 0601 	add.w	r6, r8, #1
 8006d80:	42b3      	cmp	r3, r6
 8006d82:	db0b      	blt.n	8006d9c <__lshift+0x38>
 8006d84:	4638      	mov	r0, r7
 8006d86:	f7ff fde1 	bl	800694c <_Balloc>
 8006d8a:	4605      	mov	r5, r0
 8006d8c:	b948      	cbnz	r0, 8006da2 <__lshift+0x3e>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006d94:	4b27      	ldr	r3, [pc, #156]	@ (8006e34 <__lshift+0xd0>)
 8006d96:	4828      	ldr	r0, [pc, #160]	@ (8006e38 <__lshift+0xd4>)
 8006d98:	f000 fb90 	bl	80074bc <__assert_func>
 8006d9c:	3101      	adds	r1, #1
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	e7ee      	b.n	8006d80 <__lshift+0x1c>
 8006da2:	2300      	movs	r3, #0
 8006da4:	f100 0114 	add.w	r1, r0, #20
 8006da8:	f100 0210 	add.w	r2, r0, #16
 8006dac:	4618      	mov	r0, r3
 8006dae:	4553      	cmp	r3, sl
 8006db0:	db33      	blt.n	8006e1a <__lshift+0xb6>
 8006db2:	6920      	ldr	r0, [r4, #16]
 8006db4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006db8:	f104 0314 	add.w	r3, r4, #20
 8006dbc:	f019 091f 	ands.w	r9, r9, #31
 8006dc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006dc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006dc8:	d02b      	beq.n	8006e22 <__lshift+0xbe>
 8006dca:	468a      	mov	sl, r1
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f1c9 0e20 	rsb	lr, r9, #32
 8006dd2:	6818      	ldr	r0, [r3, #0]
 8006dd4:	fa00 f009 	lsl.w	r0, r0, r9
 8006dd8:	4310      	orrs	r0, r2
 8006dda:	f84a 0b04 	str.w	r0, [sl], #4
 8006dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8006de2:	459c      	cmp	ip, r3
 8006de4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006de8:	d8f3      	bhi.n	8006dd2 <__lshift+0x6e>
 8006dea:	ebac 0304 	sub.w	r3, ip, r4
 8006dee:	3b15      	subs	r3, #21
 8006df0:	f023 0303 	bic.w	r3, r3, #3
 8006df4:	3304      	adds	r3, #4
 8006df6:	f104 0015 	add.w	r0, r4, #21
 8006dfa:	4584      	cmp	ip, r0
 8006dfc:	bf38      	it	cc
 8006dfe:	2304      	movcc	r3, #4
 8006e00:	50ca      	str	r2, [r1, r3]
 8006e02:	b10a      	cbz	r2, 8006e08 <__lshift+0xa4>
 8006e04:	f108 0602 	add.w	r6, r8, #2
 8006e08:	3e01      	subs	r6, #1
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	612e      	str	r6, [r5, #16]
 8006e10:	f7ff fddc 	bl	80069cc <_Bfree>
 8006e14:	4628      	mov	r0, r5
 8006e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e1e:	3301      	adds	r3, #1
 8006e20:	e7c5      	b.n	8006dae <__lshift+0x4a>
 8006e22:	3904      	subs	r1, #4
 8006e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e28:	459c      	cmp	ip, r3
 8006e2a:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e2e:	d8f9      	bhi.n	8006e24 <__lshift+0xc0>
 8006e30:	e7ea      	b.n	8006e08 <__lshift+0xa4>
 8006e32:	bf00      	nop
 8006e34:	08008de6 	.word	0x08008de6
 8006e38:	08008df7 	.word	0x08008df7

08006e3c <__mcmp>:
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	690a      	ldr	r2, [r1, #16]
 8006e40:	6900      	ldr	r0, [r0, #16]
 8006e42:	b530      	push	{r4, r5, lr}
 8006e44:	1a80      	subs	r0, r0, r2
 8006e46:	d10e      	bne.n	8006e66 <__mcmp+0x2a>
 8006e48:	3314      	adds	r3, #20
 8006e4a:	3114      	adds	r1, #20
 8006e4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006e50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e5c:	4295      	cmp	r5, r2
 8006e5e:	d003      	beq.n	8006e68 <__mcmp+0x2c>
 8006e60:	d205      	bcs.n	8006e6e <__mcmp+0x32>
 8006e62:	f04f 30ff 	mov.w	r0, #4294967295
 8006e66:	bd30      	pop	{r4, r5, pc}
 8006e68:	42a3      	cmp	r3, r4
 8006e6a:	d3f3      	bcc.n	8006e54 <__mcmp+0x18>
 8006e6c:	e7fb      	b.n	8006e66 <__mcmp+0x2a>
 8006e6e:	2001      	movs	r0, #1
 8006e70:	e7f9      	b.n	8006e66 <__mcmp+0x2a>
	...

08006e74 <__mdiff>:
 8006e74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e78:	4689      	mov	r9, r1
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	4648      	mov	r0, r9
 8006e80:	4614      	mov	r4, r2
 8006e82:	f7ff ffdb 	bl	8006e3c <__mcmp>
 8006e86:	1e05      	subs	r5, r0, #0
 8006e88:	d112      	bne.n	8006eb0 <__mdiff+0x3c>
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	f7ff fd5d 	bl	800694c <_Balloc>
 8006e92:	4602      	mov	r2, r0
 8006e94:	b928      	cbnz	r0, 8006ea2 <__mdiff+0x2e>
 8006e96:	f240 2137 	movw	r1, #567	@ 0x237
 8006e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8006f94 <__mdiff+0x120>)
 8006e9c:	483e      	ldr	r0, [pc, #248]	@ (8006f98 <__mdiff+0x124>)
 8006e9e:	f000 fb0d 	bl	80074bc <__assert_func>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	b003      	add	sp, #12
 8006eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb0:	bfbc      	itt	lt
 8006eb2:	464b      	movlt	r3, r9
 8006eb4:	46a1      	movlt	r9, r4
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ebc:	bfba      	itte	lt
 8006ebe:	461c      	movlt	r4, r3
 8006ec0:	2501      	movlt	r5, #1
 8006ec2:	2500      	movge	r5, #0
 8006ec4:	f7ff fd42 	bl	800694c <_Balloc>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	b918      	cbnz	r0, 8006ed4 <__mdiff+0x60>
 8006ecc:	f240 2145 	movw	r1, #581	@ 0x245
 8006ed0:	4b30      	ldr	r3, [pc, #192]	@ (8006f94 <__mdiff+0x120>)
 8006ed2:	e7e3      	b.n	8006e9c <__mdiff+0x28>
 8006ed4:	f100 0b14 	add.w	fp, r0, #20
 8006ed8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006edc:	f109 0310 	add.w	r3, r9, #16
 8006ee0:	60c5      	str	r5, [r0, #12]
 8006ee2:	f04f 0c00 	mov.w	ip, #0
 8006ee6:	f109 0514 	add.w	r5, r9, #20
 8006eea:	46d9      	mov	r9, fp
 8006eec:	6926      	ldr	r6, [r4, #16]
 8006eee:	f104 0e14 	add.w	lr, r4, #20
 8006ef2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006ef6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006efa:	9301      	str	r3, [sp, #4]
 8006efc:	9b01      	ldr	r3, [sp, #4]
 8006efe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006f02:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006f06:	b281      	uxth	r1, r0
 8006f08:	9301      	str	r3, [sp, #4]
 8006f0a:	fa1f f38a 	uxth.w	r3, sl
 8006f0e:	1a5b      	subs	r3, r3, r1
 8006f10:	0c00      	lsrs	r0, r0, #16
 8006f12:	4463      	add	r3, ip
 8006f14:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006f18:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006f22:	4576      	cmp	r6, lr
 8006f24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f28:	f849 3b04 	str.w	r3, [r9], #4
 8006f2c:	d8e6      	bhi.n	8006efc <__mdiff+0x88>
 8006f2e:	1b33      	subs	r3, r6, r4
 8006f30:	3b15      	subs	r3, #21
 8006f32:	f023 0303 	bic.w	r3, r3, #3
 8006f36:	3415      	adds	r4, #21
 8006f38:	3304      	adds	r3, #4
 8006f3a:	42a6      	cmp	r6, r4
 8006f3c:	bf38      	it	cc
 8006f3e:	2304      	movcc	r3, #4
 8006f40:	441d      	add	r5, r3
 8006f42:	445b      	add	r3, fp
 8006f44:	461e      	mov	r6, r3
 8006f46:	462c      	mov	r4, r5
 8006f48:	4544      	cmp	r4, r8
 8006f4a:	d30e      	bcc.n	8006f6a <__mdiff+0xf6>
 8006f4c:	f108 0103 	add.w	r1, r8, #3
 8006f50:	1b49      	subs	r1, r1, r5
 8006f52:	f021 0103 	bic.w	r1, r1, #3
 8006f56:	3d03      	subs	r5, #3
 8006f58:	45a8      	cmp	r8, r5
 8006f5a:	bf38      	it	cc
 8006f5c:	2100      	movcc	r1, #0
 8006f5e:	440b      	add	r3, r1
 8006f60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f64:	b199      	cbz	r1, 8006f8e <__mdiff+0x11a>
 8006f66:	6117      	str	r7, [r2, #16]
 8006f68:	e79e      	b.n	8006ea8 <__mdiff+0x34>
 8006f6a:	46e6      	mov	lr, ip
 8006f6c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006f70:	fa1f fc81 	uxth.w	ip, r1
 8006f74:	44f4      	add	ip, lr
 8006f76:	0c08      	lsrs	r0, r1, #16
 8006f78:	4471      	add	r1, lr
 8006f7a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006f7e:	b289      	uxth	r1, r1
 8006f80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006f84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f88:	f846 1b04 	str.w	r1, [r6], #4
 8006f8c:	e7dc      	b.n	8006f48 <__mdiff+0xd4>
 8006f8e:	3f01      	subs	r7, #1
 8006f90:	e7e6      	b.n	8006f60 <__mdiff+0xec>
 8006f92:	bf00      	nop
 8006f94:	08008de6 	.word	0x08008de6
 8006f98:	08008df7 	.word	0x08008df7

08006f9c <__d2b>:
 8006f9c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	4690      	mov	r8, r2
 8006fa4:	4699      	mov	r9, r3
 8006fa6:	9e08      	ldr	r6, [sp, #32]
 8006fa8:	f7ff fcd0 	bl	800694c <_Balloc>
 8006fac:	4604      	mov	r4, r0
 8006fae:	b930      	cbnz	r0, 8006fbe <__d2b+0x22>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	f240 310f 	movw	r1, #783	@ 0x30f
 8006fb6:	4b23      	ldr	r3, [pc, #140]	@ (8007044 <__d2b+0xa8>)
 8006fb8:	4823      	ldr	r0, [pc, #140]	@ (8007048 <__d2b+0xac>)
 8006fba:	f000 fa7f 	bl	80074bc <__assert_func>
 8006fbe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006fc2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fc6:	b10d      	cbz	r5, 8006fcc <__d2b+0x30>
 8006fc8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fcc:	9301      	str	r3, [sp, #4]
 8006fce:	f1b8 0300 	subs.w	r3, r8, #0
 8006fd2:	d024      	beq.n	800701e <__d2b+0x82>
 8006fd4:	4668      	mov	r0, sp
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	f7ff fd7f 	bl	8006ada <__lo0bits>
 8006fdc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006fe0:	b1d8      	cbz	r0, 800701a <__d2b+0x7e>
 8006fe2:	f1c0 0320 	rsb	r3, r0, #32
 8006fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fea:	430b      	orrs	r3, r1
 8006fec:	40c2      	lsrs	r2, r0
 8006fee:	6163      	str	r3, [r4, #20]
 8006ff0:	9201      	str	r2, [sp, #4]
 8006ff2:	9b01      	ldr	r3, [sp, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	bf0c      	ite	eq
 8006ff8:	2201      	moveq	r2, #1
 8006ffa:	2202      	movne	r2, #2
 8006ffc:	61a3      	str	r3, [r4, #24]
 8006ffe:	6122      	str	r2, [r4, #16]
 8007000:	b1ad      	cbz	r5, 800702e <__d2b+0x92>
 8007002:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007006:	4405      	add	r5, r0
 8007008:	6035      	str	r5, [r6, #0]
 800700a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800700e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007010:	6018      	str	r0, [r3, #0]
 8007012:	4620      	mov	r0, r4
 8007014:	b002      	add	sp, #8
 8007016:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800701a:	6161      	str	r1, [r4, #20]
 800701c:	e7e9      	b.n	8006ff2 <__d2b+0x56>
 800701e:	a801      	add	r0, sp, #4
 8007020:	f7ff fd5b 	bl	8006ada <__lo0bits>
 8007024:	9b01      	ldr	r3, [sp, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	6163      	str	r3, [r4, #20]
 800702a:	3020      	adds	r0, #32
 800702c:	e7e7      	b.n	8006ffe <__d2b+0x62>
 800702e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007032:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007036:	6030      	str	r0, [r6, #0]
 8007038:	6918      	ldr	r0, [r3, #16]
 800703a:	f7ff fd2f 	bl	8006a9c <__hi0bits>
 800703e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007042:	e7e4      	b.n	800700e <__d2b+0x72>
 8007044:	08008de6 	.word	0x08008de6
 8007048:	08008df7 	.word	0x08008df7

0800704c <__ssputs_r>:
 800704c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007050:	461f      	mov	r7, r3
 8007052:	688e      	ldr	r6, [r1, #8]
 8007054:	4682      	mov	sl, r0
 8007056:	42be      	cmp	r6, r7
 8007058:	460c      	mov	r4, r1
 800705a:	4690      	mov	r8, r2
 800705c:	680b      	ldr	r3, [r1, #0]
 800705e:	d82d      	bhi.n	80070bc <__ssputs_r+0x70>
 8007060:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007064:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007068:	d026      	beq.n	80070b8 <__ssputs_r+0x6c>
 800706a:	6965      	ldr	r5, [r4, #20]
 800706c:	6909      	ldr	r1, [r1, #16]
 800706e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007072:	eba3 0901 	sub.w	r9, r3, r1
 8007076:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800707a:	1c7b      	adds	r3, r7, #1
 800707c:	444b      	add	r3, r9
 800707e:	106d      	asrs	r5, r5, #1
 8007080:	429d      	cmp	r5, r3
 8007082:	bf38      	it	cc
 8007084:	461d      	movcc	r5, r3
 8007086:	0553      	lsls	r3, r2, #21
 8007088:	d527      	bpl.n	80070da <__ssputs_r+0x8e>
 800708a:	4629      	mov	r1, r5
 800708c:	f7ff fbd2 	bl	8006834 <_malloc_r>
 8007090:	4606      	mov	r6, r0
 8007092:	b360      	cbz	r0, 80070ee <__ssputs_r+0xa2>
 8007094:	464a      	mov	r2, r9
 8007096:	6921      	ldr	r1, [r4, #16]
 8007098:	f000 fa02 	bl	80074a0 <memcpy>
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80070a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070a6:	81a3      	strh	r3, [r4, #12]
 80070a8:	6126      	str	r6, [r4, #16]
 80070aa:	444e      	add	r6, r9
 80070ac:	6026      	str	r6, [r4, #0]
 80070ae:	463e      	mov	r6, r7
 80070b0:	6165      	str	r5, [r4, #20]
 80070b2:	eba5 0509 	sub.w	r5, r5, r9
 80070b6:	60a5      	str	r5, [r4, #8]
 80070b8:	42be      	cmp	r6, r7
 80070ba:	d900      	bls.n	80070be <__ssputs_r+0x72>
 80070bc:	463e      	mov	r6, r7
 80070be:	4632      	mov	r2, r6
 80070c0:	4641      	mov	r1, r8
 80070c2:	6820      	ldr	r0, [r4, #0]
 80070c4:	f000 f9c2 	bl	800744c <memmove>
 80070c8:	2000      	movs	r0, #0
 80070ca:	68a3      	ldr	r3, [r4, #8]
 80070cc:	1b9b      	subs	r3, r3, r6
 80070ce:	60a3      	str	r3, [r4, #8]
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	4433      	add	r3, r6
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070da:	462a      	mov	r2, r5
 80070dc:	f000 fa32 	bl	8007544 <_realloc_r>
 80070e0:	4606      	mov	r6, r0
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d1e0      	bne.n	80070a8 <__ssputs_r+0x5c>
 80070e6:	4650      	mov	r0, sl
 80070e8:	6921      	ldr	r1, [r4, #16]
 80070ea:	f7ff fb31 	bl	8006750 <_free_r>
 80070ee:	230c      	movs	r3, #12
 80070f0:	f8ca 3000 	str.w	r3, [sl]
 80070f4:	89a3      	ldrh	r3, [r4, #12]
 80070f6:	f04f 30ff 	mov.w	r0, #4294967295
 80070fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070fe:	81a3      	strh	r3, [r4, #12]
 8007100:	e7e9      	b.n	80070d6 <__ssputs_r+0x8a>
	...

08007104 <_svfiprintf_r>:
 8007104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007108:	4698      	mov	r8, r3
 800710a:	898b      	ldrh	r3, [r1, #12]
 800710c:	4607      	mov	r7, r0
 800710e:	061b      	lsls	r3, r3, #24
 8007110:	460d      	mov	r5, r1
 8007112:	4614      	mov	r4, r2
 8007114:	b09d      	sub	sp, #116	@ 0x74
 8007116:	d510      	bpl.n	800713a <_svfiprintf_r+0x36>
 8007118:	690b      	ldr	r3, [r1, #16]
 800711a:	b973      	cbnz	r3, 800713a <_svfiprintf_r+0x36>
 800711c:	2140      	movs	r1, #64	@ 0x40
 800711e:	f7ff fb89 	bl	8006834 <_malloc_r>
 8007122:	6028      	str	r0, [r5, #0]
 8007124:	6128      	str	r0, [r5, #16]
 8007126:	b930      	cbnz	r0, 8007136 <_svfiprintf_r+0x32>
 8007128:	230c      	movs	r3, #12
 800712a:	603b      	str	r3, [r7, #0]
 800712c:	f04f 30ff 	mov.w	r0, #4294967295
 8007130:	b01d      	add	sp, #116	@ 0x74
 8007132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007136:	2340      	movs	r3, #64	@ 0x40
 8007138:	616b      	str	r3, [r5, #20]
 800713a:	2300      	movs	r3, #0
 800713c:	9309      	str	r3, [sp, #36]	@ 0x24
 800713e:	2320      	movs	r3, #32
 8007140:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007144:	2330      	movs	r3, #48	@ 0x30
 8007146:	f04f 0901 	mov.w	r9, #1
 800714a:	f8cd 800c 	str.w	r8, [sp, #12]
 800714e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80072e8 <_svfiprintf_r+0x1e4>
 8007152:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007156:	4623      	mov	r3, r4
 8007158:	469a      	mov	sl, r3
 800715a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800715e:	b10a      	cbz	r2, 8007164 <_svfiprintf_r+0x60>
 8007160:	2a25      	cmp	r2, #37	@ 0x25
 8007162:	d1f9      	bne.n	8007158 <_svfiprintf_r+0x54>
 8007164:	ebba 0b04 	subs.w	fp, sl, r4
 8007168:	d00b      	beq.n	8007182 <_svfiprintf_r+0x7e>
 800716a:	465b      	mov	r3, fp
 800716c:	4622      	mov	r2, r4
 800716e:	4629      	mov	r1, r5
 8007170:	4638      	mov	r0, r7
 8007172:	f7ff ff6b 	bl	800704c <__ssputs_r>
 8007176:	3001      	adds	r0, #1
 8007178:	f000 80a7 	beq.w	80072ca <_svfiprintf_r+0x1c6>
 800717c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800717e:	445a      	add	r2, fp
 8007180:	9209      	str	r2, [sp, #36]	@ 0x24
 8007182:	f89a 3000 	ldrb.w	r3, [sl]
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 809f 	beq.w	80072ca <_svfiprintf_r+0x1c6>
 800718c:	2300      	movs	r3, #0
 800718e:	f04f 32ff 	mov.w	r2, #4294967295
 8007192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007196:	f10a 0a01 	add.w	sl, sl, #1
 800719a:	9304      	str	r3, [sp, #16]
 800719c:	9307      	str	r3, [sp, #28]
 800719e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80071a4:	4654      	mov	r4, sl
 80071a6:	2205      	movs	r2, #5
 80071a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ac:	484e      	ldr	r0, [pc, #312]	@ (80072e8 <_svfiprintf_r+0x1e4>)
 80071ae:	f7fe fc6e 	bl	8005a8e <memchr>
 80071b2:	9a04      	ldr	r2, [sp, #16]
 80071b4:	b9d8      	cbnz	r0, 80071ee <_svfiprintf_r+0xea>
 80071b6:	06d0      	lsls	r0, r2, #27
 80071b8:	bf44      	itt	mi
 80071ba:	2320      	movmi	r3, #32
 80071bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071c0:	0711      	lsls	r1, r2, #28
 80071c2:	bf44      	itt	mi
 80071c4:	232b      	movmi	r3, #43	@ 0x2b
 80071c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071ca:	f89a 3000 	ldrb.w	r3, [sl]
 80071ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80071d0:	d015      	beq.n	80071fe <_svfiprintf_r+0xfa>
 80071d2:	4654      	mov	r4, sl
 80071d4:	2000      	movs	r0, #0
 80071d6:	f04f 0c0a 	mov.w	ip, #10
 80071da:	9a07      	ldr	r2, [sp, #28]
 80071dc:	4621      	mov	r1, r4
 80071de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071e2:	3b30      	subs	r3, #48	@ 0x30
 80071e4:	2b09      	cmp	r3, #9
 80071e6:	d94b      	bls.n	8007280 <_svfiprintf_r+0x17c>
 80071e8:	b1b0      	cbz	r0, 8007218 <_svfiprintf_r+0x114>
 80071ea:	9207      	str	r2, [sp, #28]
 80071ec:	e014      	b.n	8007218 <_svfiprintf_r+0x114>
 80071ee:	eba0 0308 	sub.w	r3, r0, r8
 80071f2:	fa09 f303 	lsl.w	r3, r9, r3
 80071f6:	4313      	orrs	r3, r2
 80071f8:	46a2      	mov	sl, r4
 80071fa:	9304      	str	r3, [sp, #16]
 80071fc:	e7d2      	b.n	80071a4 <_svfiprintf_r+0xa0>
 80071fe:	9b03      	ldr	r3, [sp, #12]
 8007200:	1d19      	adds	r1, r3, #4
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	9103      	str	r1, [sp, #12]
 8007206:	2b00      	cmp	r3, #0
 8007208:	bfbb      	ittet	lt
 800720a:	425b      	neglt	r3, r3
 800720c:	f042 0202 	orrlt.w	r2, r2, #2
 8007210:	9307      	strge	r3, [sp, #28]
 8007212:	9307      	strlt	r3, [sp, #28]
 8007214:	bfb8      	it	lt
 8007216:	9204      	strlt	r2, [sp, #16]
 8007218:	7823      	ldrb	r3, [r4, #0]
 800721a:	2b2e      	cmp	r3, #46	@ 0x2e
 800721c:	d10a      	bne.n	8007234 <_svfiprintf_r+0x130>
 800721e:	7863      	ldrb	r3, [r4, #1]
 8007220:	2b2a      	cmp	r3, #42	@ 0x2a
 8007222:	d132      	bne.n	800728a <_svfiprintf_r+0x186>
 8007224:	9b03      	ldr	r3, [sp, #12]
 8007226:	3402      	adds	r4, #2
 8007228:	1d1a      	adds	r2, r3, #4
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	9203      	str	r2, [sp, #12]
 800722e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007232:	9305      	str	r3, [sp, #20]
 8007234:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80072ec <_svfiprintf_r+0x1e8>
 8007238:	2203      	movs	r2, #3
 800723a:	4650      	mov	r0, sl
 800723c:	7821      	ldrb	r1, [r4, #0]
 800723e:	f7fe fc26 	bl	8005a8e <memchr>
 8007242:	b138      	cbz	r0, 8007254 <_svfiprintf_r+0x150>
 8007244:	2240      	movs	r2, #64	@ 0x40
 8007246:	9b04      	ldr	r3, [sp, #16]
 8007248:	eba0 000a 	sub.w	r0, r0, sl
 800724c:	4082      	lsls	r2, r0
 800724e:	4313      	orrs	r3, r2
 8007250:	3401      	adds	r4, #1
 8007252:	9304      	str	r3, [sp, #16]
 8007254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007258:	2206      	movs	r2, #6
 800725a:	4825      	ldr	r0, [pc, #148]	@ (80072f0 <_svfiprintf_r+0x1ec>)
 800725c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007260:	f7fe fc15 	bl	8005a8e <memchr>
 8007264:	2800      	cmp	r0, #0
 8007266:	d036      	beq.n	80072d6 <_svfiprintf_r+0x1d2>
 8007268:	4b22      	ldr	r3, [pc, #136]	@ (80072f4 <_svfiprintf_r+0x1f0>)
 800726a:	bb1b      	cbnz	r3, 80072b4 <_svfiprintf_r+0x1b0>
 800726c:	9b03      	ldr	r3, [sp, #12]
 800726e:	3307      	adds	r3, #7
 8007270:	f023 0307 	bic.w	r3, r3, #7
 8007274:	3308      	adds	r3, #8
 8007276:	9303      	str	r3, [sp, #12]
 8007278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800727a:	4433      	add	r3, r6
 800727c:	9309      	str	r3, [sp, #36]	@ 0x24
 800727e:	e76a      	b.n	8007156 <_svfiprintf_r+0x52>
 8007280:	460c      	mov	r4, r1
 8007282:	2001      	movs	r0, #1
 8007284:	fb0c 3202 	mla	r2, ip, r2, r3
 8007288:	e7a8      	b.n	80071dc <_svfiprintf_r+0xd8>
 800728a:	2300      	movs	r3, #0
 800728c:	f04f 0c0a 	mov.w	ip, #10
 8007290:	4619      	mov	r1, r3
 8007292:	3401      	adds	r4, #1
 8007294:	9305      	str	r3, [sp, #20]
 8007296:	4620      	mov	r0, r4
 8007298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800729c:	3a30      	subs	r2, #48	@ 0x30
 800729e:	2a09      	cmp	r2, #9
 80072a0:	d903      	bls.n	80072aa <_svfiprintf_r+0x1a6>
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d0c6      	beq.n	8007234 <_svfiprintf_r+0x130>
 80072a6:	9105      	str	r1, [sp, #20]
 80072a8:	e7c4      	b.n	8007234 <_svfiprintf_r+0x130>
 80072aa:	4604      	mov	r4, r0
 80072ac:	2301      	movs	r3, #1
 80072ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80072b2:	e7f0      	b.n	8007296 <_svfiprintf_r+0x192>
 80072b4:	ab03      	add	r3, sp, #12
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	462a      	mov	r2, r5
 80072ba:	4638      	mov	r0, r7
 80072bc:	4b0e      	ldr	r3, [pc, #56]	@ (80072f8 <_svfiprintf_r+0x1f4>)
 80072be:	a904      	add	r1, sp, #16
 80072c0:	f7fd fe4e 	bl	8004f60 <_printf_float>
 80072c4:	1c42      	adds	r2, r0, #1
 80072c6:	4606      	mov	r6, r0
 80072c8:	d1d6      	bne.n	8007278 <_svfiprintf_r+0x174>
 80072ca:	89ab      	ldrh	r3, [r5, #12]
 80072cc:	065b      	lsls	r3, r3, #25
 80072ce:	f53f af2d 	bmi.w	800712c <_svfiprintf_r+0x28>
 80072d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072d4:	e72c      	b.n	8007130 <_svfiprintf_r+0x2c>
 80072d6:	ab03      	add	r3, sp, #12
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	462a      	mov	r2, r5
 80072dc:	4638      	mov	r0, r7
 80072de:	4b06      	ldr	r3, [pc, #24]	@ (80072f8 <_svfiprintf_r+0x1f4>)
 80072e0:	a904      	add	r1, sp, #16
 80072e2:	f7fe f8db 	bl	800549c <_printf_i>
 80072e6:	e7ed      	b.n	80072c4 <_svfiprintf_r+0x1c0>
 80072e8:	08008f50 	.word	0x08008f50
 80072ec:	08008f56 	.word	0x08008f56
 80072f0:	08008f5a 	.word	0x08008f5a
 80072f4:	08004f61 	.word	0x08004f61
 80072f8:	0800704d 	.word	0x0800704d

080072fc <__sflush_r>:
 80072fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007302:	0716      	lsls	r6, r2, #28
 8007304:	4605      	mov	r5, r0
 8007306:	460c      	mov	r4, r1
 8007308:	d454      	bmi.n	80073b4 <__sflush_r+0xb8>
 800730a:	684b      	ldr	r3, [r1, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	dc02      	bgt.n	8007316 <__sflush_r+0x1a>
 8007310:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007312:	2b00      	cmp	r3, #0
 8007314:	dd48      	ble.n	80073a8 <__sflush_r+0xac>
 8007316:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007318:	2e00      	cmp	r6, #0
 800731a:	d045      	beq.n	80073a8 <__sflush_r+0xac>
 800731c:	2300      	movs	r3, #0
 800731e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007322:	682f      	ldr	r7, [r5, #0]
 8007324:	6a21      	ldr	r1, [r4, #32]
 8007326:	602b      	str	r3, [r5, #0]
 8007328:	d030      	beq.n	800738c <__sflush_r+0x90>
 800732a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	0759      	lsls	r1, r3, #29
 8007330:	d505      	bpl.n	800733e <__sflush_r+0x42>
 8007332:	6863      	ldr	r3, [r4, #4]
 8007334:	1ad2      	subs	r2, r2, r3
 8007336:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007338:	b10b      	cbz	r3, 800733e <__sflush_r+0x42>
 800733a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800733c:	1ad2      	subs	r2, r2, r3
 800733e:	2300      	movs	r3, #0
 8007340:	4628      	mov	r0, r5
 8007342:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007344:	6a21      	ldr	r1, [r4, #32]
 8007346:	47b0      	blx	r6
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	89a3      	ldrh	r3, [r4, #12]
 800734c:	d106      	bne.n	800735c <__sflush_r+0x60>
 800734e:	6829      	ldr	r1, [r5, #0]
 8007350:	291d      	cmp	r1, #29
 8007352:	d82b      	bhi.n	80073ac <__sflush_r+0xb0>
 8007354:	4a28      	ldr	r2, [pc, #160]	@ (80073f8 <__sflush_r+0xfc>)
 8007356:	410a      	asrs	r2, r1
 8007358:	07d6      	lsls	r6, r2, #31
 800735a:	d427      	bmi.n	80073ac <__sflush_r+0xb0>
 800735c:	2200      	movs	r2, #0
 800735e:	6062      	str	r2, [r4, #4]
 8007360:	6922      	ldr	r2, [r4, #16]
 8007362:	04d9      	lsls	r1, r3, #19
 8007364:	6022      	str	r2, [r4, #0]
 8007366:	d504      	bpl.n	8007372 <__sflush_r+0x76>
 8007368:	1c42      	adds	r2, r0, #1
 800736a:	d101      	bne.n	8007370 <__sflush_r+0x74>
 800736c:	682b      	ldr	r3, [r5, #0]
 800736e:	b903      	cbnz	r3, 8007372 <__sflush_r+0x76>
 8007370:	6560      	str	r0, [r4, #84]	@ 0x54
 8007372:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007374:	602f      	str	r7, [r5, #0]
 8007376:	b1b9      	cbz	r1, 80073a8 <__sflush_r+0xac>
 8007378:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800737c:	4299      	cmp	r1, r3
 800737e:	d002      	beq.n	8007386 <__sflush_r+0x8a>
 8007380:	4628      	mov	r0, r5
 8007382:	f7ff f9e5 	bl	8006750 <_free_r>
 8007386:	2300      	movs	r3, #0
 8007388:	6363      	str	r3, [r4, #52]	@ 0x34
 800738a:	e00d      	b.n	80073a8 <__sflush_r+0xac>
 800738c:	2301      	movs	r3, #1
 800738e:	4628      	mov	r0, r5
 8007390:	47b0      	blx	r6
 8007392:	4602      	mov	r2, r0
 8007394:	1c50      	adds	r0, r2, #1
 8007396:	d1c9      	bne.n	800732c <__sflush_r+0x30>
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0c6      	beq.n	800732c <__sflush_r+0x30>
 800739e:	2b1d      	cmp	r3, #29
 80073a0:	d001      	beq.n	80073a6 <__sflush_r+0xaa>
 80073a2:	2b16      	cmp	r3, #22
 80073a4:	d11d      	bne.n	80073e2 <__sflush_r+0xe6>
 80073a6:	602f      	str	r7, [r5, #0]
 80073a8:	2000      	movs	r0, #0
 80073aa:	e021      	b.n	80073f0 <__sflush_r+0xf4>
 80073ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073b0:	b21b      	sxth	r3, r3
 80073b2:	e01a      	b.n	80073ea <__sflush_r+0xee>
 80073b4:	690f      	ldr	r7, [r1, #16]
 80073b6:	2f00      	cmp	r7, #0
 80073b8:	d0f6      	beq.n	80073a8 <__sflush_r+0xac>
 80073ba:	0793      	lsls	r3, r2, #30
 80073bc:	bf18      	it	ne
 80073be:	2300      	movne	r3, #0
 80073c0:	680e      	ldr	r6, [r1, #0]
 80073c2:	bf08      	it	eq
 80073c4:	694b      	ldreq	r3, [r1, #20]
 80073c6:	1bf6      	subs	r6, r6, r7
 80073c8:	600f      	str	r7, [r1, #0]
 80073ca:	608b      	str	r3, [r1, #8]
 80073cc:	2e00      	cmp	r6, #0
 80073ce:	ddeb      	ble.n	80073a8 <__sflush_r+0xac>
 80073d0:	4633      	mov	r3, r6
 80073d2:	463a      	mov	r2, r7
 80073d4:	4628      	mov	r0, r5
 80073d6:	6a21      	ldr	r1, [r4, #32]
 80073d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80073dc:	47e0      	blx	ip
 80073de:	2800      	cmp	r0, #0
 80073e0:	dc07      	bgt.n	80073f2 <__sflush_r+0xf6>
 80073e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073ea:	f04f 30ff 	mov.w	r0, #4294967295
 80073ee:	81a3      	strh	r3, [r4, #12]
 80073f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073f2:	4407      	add	r7, r0
 80073f4:	1a36      	subs	r6, r6, r0
 80073f6:	e7e9      	b.n	80073cc <__sflush_r+0xd0>
 80073f8:	dfbffffe 	.word	0xdfbffffe

080073fc <_fflush_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	690b      	ldr	r3, [r1, #16]
 8007400:	4605      	mov	r5, r0
 8007402:	460c      	mov	r4, r1
 8007404:	b913      	cbnz	r3, 800740c <_fflush_r+0x10>
 8007406:	2500      	movs	r5, #0
 8007408:	4628      	mov	r0, r5
 800740a:	bd38      	pop	{r3, r4, r5, pc}
 800740c:	b118      	cbz	r0, 8007416 <_fflush_r+0x1a>
 800740e:	6a03      	ldr	r3, [r0, #32]
 8007410:	b90b      	cbnz	r3, 8007416 <_fflush_r+0x1a>
 8007412:	f7fe f9ef 	bl	80057f4 <__sinit>
 8007416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0f3      	beq.n	8007406 <_fflush_r+0xa>
 800741e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007420:	07d0      	lsls	r0, r2, #31
 8007422:	d404      	bmi.n	800742e <_fflush_r+0x32>
 8007424:	0599      	lsls	r1, r3, #22
 8007426:	d402      	bmi.n	800742e <_fflush_r+0x32>
 8007428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800742a:	f7fe fb2e 	bl	8005a8a <__retarget_lock_acquire_recursive>
 800742e:	4628      	mov	r0, r5
 8007430:	4621      	mov	r1, r4
 8007432:	f7ff ff63 	bl	80072fc <__sflush_r>
 8007436:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007438:	4605      	mov	r5, r0
 800743a:	07da      	lsls	r2, r3, #31
 800743c:	d4e4      	bmi.n	8007408 <_fflush_r+0xc>
 800743e:	89a3      	ldrh	r3, [r4, #12]
 8007440:	059b      	lsls	r3, r3, #22
 8007442:	d4e1      	bmi.n	8007408 <_fflush_r+0xc>
 8007444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007446:	f7fe fb21 	bl	8005a8c <__retarget_lock_release_recursive>
 800744a:	e7dd      	b.n	8007408 <_fflush_r+0xc>

0800744c <memmove>:
 800744c:	4288      	cmp	r0, r1
 800744e:	b510      	push	{r4, lr}
 8007450:	eb01 0402 	add.w	r4, r1, r2
 8007454:	d902      	bls.n	800745c <memmove+0x10>
 8007456:	4284      	cmp	r4, r0
 8007458:	4623      	mov	r3, r4
 800745a:	d807      	bhi.n	800746c <memmove+0x20>
 800745c:	1e43      	subs	r3, r0, #1
 800745e:	42a1      	cmp	r1, r4
 8007460:	d008      	beq.n	8007474 <memmove+0x28>
 8007462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800746a:	e7f8      	b.n	800745e <memmove+0x12>
 800746c:	4601      	mov	r1, r0
 800746e:	4402      	add	r2, r0
 8007470:	428a      	cmp	r2, r1
 8007472:	d100      	bne.n	8007476 <memmove+0x2a>
 8007474:	bd10      	pop	{r4, pc}
 8007476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800747a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800747e:	e7f7      	b.n	8007470 <memmove+0x24>

08007480 <_sbrk_r>:
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	2300      	movs	r3, #0
 8007484:	4d05      	ldr	r5, [pc, #20]	@ (800749c <_sbrk_r+0x1c>)
 8007486:	4604      	mov	r4, r0
 8007488:	4608      	mov	r0, r1
 800748a:	602b      	str	r3, [r5, #0]
 800748c:	f7fa ff90 	bl	80023b0 <_sbrk>
 8007490:	1c43      	adds	r3, r0, #1
 8007492:	d102      	bne.n	800749a <_sbrk_r+0x1a>
 8007494:	682b      	ldr	r3, [r5, #0]
 8007496:	b103      	cbz	r3, 800749a <_sbrk_r+0x1a>
 8007498:	6023      	str	r3, [r4, #0]
 800749a:	bd38      	pop	{r3, r4, r5, pc}
 800749c:	200004c4 	.word	0x200004c4

080074a0 <memcpy>:
 80074a0:	440a      	add	r2, r1
 80074a2:	4291      	cmp	r1, r2
 80074a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80074a8:	d100      	bne.n	80074ac <memcpy+0xc>
 80074aa:	4770      	bx	lr
 80074ac:	b510      	push	{r4, lr}
 80074ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074b2:	4291      	cmp	r1, r2
 80074b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074b8:	d1f9      	bne.n	80074ae <memcpy+0xe>
 80074ba:	bd10      	pop	{r4, pc}

080074bc <__assert_func>:
 80074bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074be:	4614      	mov	r4, r2
 80074c0:	461a      	mov	r2, r3
 80074c2:	4b09      	ldr	r3, [pc, #36]	@ (80074e8 <__assert_func+0x2c>)
 80074c4:	4605      	mov	r5, r0
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68d8      	ldr	r0, [r3, #12]
 80074ca:	b954      	cbnz	r4, 80074e2 <__assert_func+0x26>
 80074cc:	4b07      	ldr	r3, [pc, #28]	@ (80074ec <__assert_func+0x30>)
 80074ce:	461c      	mov	r4, r3
 80074d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074d4:	9100      	str	r1, [sp, #0]
 80074d6:	462b      	mov	r3, r5
 80074d8:	4905      	ldr	r1, [pc, #20]	@ (80074f0 <__assert_func+0x34>)
 80074da:	f000 f86f 	bl	80075bc <fiprintf>
 80074de:	f000 f87f 	bl	80075e0 <abort>
 80074e2:	4b04      	ldr	r3, [pc, #16]	@ (80074f4 <__assert_func+0x38>)
 80074e4:	e7f4      	b.n	80074d0 <__assert_func+0x14>
 80074e6:	bf00      	nop
 80074e8:	20000020 	.word	0x20000020
 80074ec:	08008fa6 	.word	0x08008fa6
 80074f0:	08008f78 	.word	0x08008f78
 80074f4:	08008f6b 	.word	0x08008f6b

080074f8 <_calloc_r>:
 80074f8:	b570      	push	{r4, r5, r6, lr}
 80074fa:	fba1 5402 	umull	r5, r4, r1, r2
 80074fe:	b93c      	cbnz	r4, 8007510 <_calloc_r+0x18>
 8007500:	4629      	mov	r1, r5
 8007502:	f7ff f997 	bl	8006834 <_malloc_r>
 8007506:	4606      	mov	r6, r0
 8007508:	b928      	cbnz	r0, 8007516 <_calloc_r+0x1e>
 800750a:	2600      	movs	r6, #0
 800750c:	4630      	mov	r0, r6
 800750e:	bd70      	pop	{r4, r5, r6, pc}
 8007510:	220c      	movs	r2, #12
 8007512:	6002      	str	r2, [r0, #0]
 8007514:	e7f9      	b.n	800750a <_calloc_r+0x12>
 8007516:	462a      	mov	r2, r5
 8007518:	4621      	mov	r1, r4
 800751a:	f7fe fa38 	bl	800598e <memset>
 800751e:	e7f5      	b.n	800750c <_calloc_r+0x14>

08007520 <__ascii_mbtowc>:
 8007520:	b082      	sub	sp, #8
 8007522:	b901      	cbnz	r1, 8007526 <__ascii_mbtowc+0x6>
 8007524:	a901      	add	r1, sp, #4
 8007526:	b142      	cbz	r2, 800753a <__ascii_mbtowc+0x1a>
 8007528:	b14b      	cbz	r3, 800753e <__ascii_mbtowc+0x1e>
 800752a:	7813      	ldrb	r3, [r2, #0]
 800752c:	600b      	str	r3, [r1, #0]
 800752e:	7812      	ldrb	r2, [r2, #0]
 8007530:	1e10      	subs	r0, r2, #0
 8007532:	bf18      	it	ne
 8007534:	2001      	movne	r0, #1
 8007536:	b002      	add	sp, #8
 8007538:	4770      	bx	lr
 800753a:	4610      	mov	r0, r2
 800753c:	e7fb      	b.n	8007536 <__ascii_mbtowc+0x16>
 800753e:	f06f 0001 	mvn.w	r0, #1
 8007542:	e7f8      	b.n	8007536 <__ascii_mbtowc+0x16>

08007544 <_realloc_r>:
 8007544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007548:	4680      	mov	r8, r0
 800754a:	4615      	mov	r5, r2
 800754c:	460c      	mov	r4, r1
 800754e:	b921      	cbnz	r1, 800755a <_realloc_r+0x16>
 8007550:	4611      	mov	r1, r2
 8007552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007556:	f7ff b96d 	b.w	8006834 <_malloc_r>
 800755a:	b92a      	cbnz	r2, 8007568 <_realloc_r+0x24>
 800755c:	f7ff f8f8 	bl	8006750 <_free_r>
 8007560:	2400      	movs	r4, #0
 8007562:	4620      	mov	r0, r4
 8007564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007568:	f000 f841 	bl	80075ee <_malloc_usable_size_r>
 800756c:	4285      	cmp	r5, r0
 800756e:	4606      	mov	r6, r0
 8007570:	d802      	bhi.n	8007578 <_realloc_r+0x34>
 8007572:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007576:	d8f4      	bhi.n	8007562 <_realloc_r+0x1e>
 8007578:	4629      	mov	r1, r5
 800757a:	4640      	mov	r0, r8
 800757c:	f7ff f95a 	bl	8006834 <_malloc_r>
 8007580:	4607      	mov	r7, r0
 8007582:	2800      	cmp	r0, #0
 8007584:	d0ec      	beq.n	8007560 <_realloc_r+0x1c>
 8007586:	42b5      	cmp	r5, r6
 8007588:	462a      	mov	r2, r5
 800758a:	4621      	mov	r1, r4
 800758c:	bf28      	it	cs
 800758e:	4632      	movcs	r2, r6
 8007590:	f7ff ff86 	bl	80074a0 <memcpy>
 8007594:	4621      	mov	r1, r4
 8007596:	4640      	mov	r0, r8
 8007598:	f7ff f8da 	bl	8006750 <_free_r>
 800759c:	463c      	mov	r4, r7
 800759e:	e7e0      	b.n	8007562 <_realloc_r+0x1e>

080075a0 <__ascii_wctomb>:
 80075a0:	4603      	mov	r3, r0
 80075a2:	4608      	mov	r0, r1
 80075a4:	b141      	cbz	r1, 80075b8 <__ascii_wctomb+0x18>
 80075a6:	2aff      	cmp	r2, #255	@ 0xff
 80075a8:	d904      	bls.n	80075b4 <__ascii_wctomb+0x14>
 80075aa:	228a      	movs	r2, #138	@ 0x8a
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	4770      	bx	lr
 80075b4:	2001      	movs	r0, #1
 80075b6:	700a      	strb	r2, [r1, #0]
 80075b8:	4770      	bx	lr
	...

080075bc <fiprintf>:
 80075bc:	b40e      	push	{r1, r2, r3}
 80075be:	b503      	push	{r0, r1, lr}
 80075c0:	4601      	mov	r1, r0
 80075c2:	ab03      	add	r3, sp, #12
 80075c4:	4805      	ldr	r0, [pc, #20]	@ (80075dc <fiprintf+0x20>)
 80075c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ca:	6800      	ldr	r0, [r0, #0]
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	f000 f83d 	bl	800764c <_vfiprintf_r>
 80075d2:	b002      	add	sp, #8
 80075d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80075d8:	b003      	add	sp, #12
 80075da:	4770      	bx	lr
 80075dc:	20000020 	.word	0x20000020

080075e0 <abort>:
 80075e0:	2006      	movs	r0, #6
 80075e2:	b508      	push	{r3, lr}
 80075e4:	f000 fa06 	bl	80079f4 <raise>
 80075e8:	2001      	movs	r0, #1
 80075ea:	f7fa fe6c 	bl	80022c6 <_exit>

080075ee <_malloc_usable_size_r>:
 80075ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075f2:	1f18      	subs	r0, r3, #4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	bfbc      	itt	lt
 80075f8:	580b      	ldrlt	r3, [r1, r0]
 80075fa:	18c0      	addlt	r0, r0, r3
 80075fc:	4770      	bx	lr

080075fe <__sfputc_r>:
 80075fe:	6893      	ldr	r3, [r2, #8]
 8007600:	b410      	push	{r4}
 8007602:	3b01      	subs	r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	6093      	str	r3, [r2, #8]
 8007608:	da07      	bge.n	800761a <__sfputc_r+0x1c>
 800760a:	6994      	ldr	r4, [r2, #24]
 800760c:	42a3      	cmp	r3, r4
 800760e:	db01      	blt.n	8007614 <__sfputc_r+0x16>
 8007610:	290a      	cmp	r1, #10
 8007612:	d102      	bne.n	800761a <__sfputc_r+0x1c>
 8007614:	bc10      	pop	{r4}
 8007616:	f000 b931 	b.w	800787c <__swbuf_r>
 800761a:	6813      	ldr	r3, [r2, #0]
 800761c:	1c58      	adds	r0, r3, #1
 800761e:	6010      	str	r0, [r2, #0]
 8007620:	7019      	strb	r1, [r3, #0]
 8007622:	4608      	mov	r0, r1
 8007624:	bc10      	pop	{r4}
 8007626:	4770      	bx	lr

08007628 <__sfputs_r>:
 8007628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762a:	4606      	mov	r6, r0
 800762c:	460f      	mov	r7, r1
 800762e:	4614      	mov	r4, r2
 8007630:	18d5      	adds	r5, r2, r3
 8007632:	42ac      	cmp	r4, r5
 8007634:	d101      	bne.n	800763a <__sfputs_r+0x12>
 8007636:	2000      	movs	r0, #0
 8007638:	e007      	b.n	800764a <__sfputs_r+0x22>
 800763a:	463a      	mov	r2, r7
 800763c:	4630      	mov	r0, r6
 800763e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007642:	f7ff ffdc 	bl	80075fe <__sfputc_r>
 8007646:	1c43      	adds	r3, r0, #1
 8007648:	d1f3      	bne.n	8007632 <__sfputs_r+0xa>
 800764a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800764c <_vfiprintf_r>:
 800764c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007650:	460d      	mov	r5, r1
 8007652:	4614      	mov	r4, r2
 8007654:	4698      	mov	r8, r3
 8007656:	4606      	mov	r6, r0
 8007658:	b09d      	sub	sp, #116	@ 0x74
 800765a:	b118      	cbz	r0, 8007664 <_vfiprintf_r+0x18>
 800765c:	6a03      	ldr	r3, [r0, #32]
 800765e:	b90b      	cbnz	r3, 8007664 <_vfiprintf_r+0x18>
 8007660:	f7fe f8c8 	bl	80057f4 <__sinit>
 8007664:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007666:	07d9      	lsls	r1, r3, #31
 8007668:	d405      	bmi.n	8007676 <_vfiprintf_r+0x2a>
 800766a:	89ab      	ldrh	r3, [r5, #12]
 800766c:	059a      	lsls	r2, r3, #22
 800766e:	d402      	bmi.n	8007676 <_vfiprintf_r+0x2a>
 8007670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007672:	f7fe fa0a 	bl	8005a8a <__retarget_lock_acquire_recursive>
 8007676:	89ab      	ldrh	r3, [r5, #12]
 8007678:	071b      	lsls	r3, r3, #28
 800767a:	d501      	bpl.n	8007680 <_vfiprintf_r+0x34>
 800767c:	692b      	ldr	r3, [r5, #16]
 800767e:	b99b      	cbnz	r3, 80076a8 <_vfiprintf_r+0x5c>
 8007680:	4629      	mov	r1, r5
 8007682:	4630      	mov	r0, r6
 8007684:	f000 f938 	bl	80078f8 <__swsetup_r>
 8007688:	b170      	cbz	r0, 80076a8 <_vfiprintf_r+0x5c>
 800768a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800768c:	07dc      	lsls	r4, r3, #31
 800768e:	d504      	bpl.n	800769a <_vfiprintf_r+0x4e>
 8007690:	f04f 30ff 	mov.w	r0, #4294967295
 8007694:	b01d      	add	sp, #116	@ 0x74
 8007696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769a:	89ab      	ldrh	r3, [r5, #12]
 800769c:	0598      	lsls	r0, r3, #22
 800769e:	d4f7      	bmi.n	8007690 <_vfiprintf_r+0x44>
 80076a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076a2:	f7fe f9f3 	bl	8005a8c <__retarget_lock_release_recursive>
 80076a6:	e7f3      	b.n	8007690 <_vfiprintf_r+0x44>
 80076a8:	2300      	movs	r3, #0
 80076aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ac:	2320      	movs	r3, #32
 80076ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076b2:	2330      	movs	r3, #48	@ 0x30
 80076b4:	f04f 0901 	mov.w	r9, #1
 80076b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80076bc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007868 <_vfiprintf_r+0x21c>
 80076c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076c4:	4623      	mov	r3, r4
 80076c6:	469a      	mov	sl, r3
 80076c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076cc:	b10a      	cbz	r2, 80076d2 <_vfiprintf_r+0x86>
 80076ce:	2a25      	cmp	r2, #37	@ 0x25
 80076d0:	d1f9      	bne.n	80076c6 <_vfiprintf_r+0x7a>
 80076d2:	ebba 0b04 	subs.w	fp, sl, r4
 80076d6:	d00b      	beq.n	80076f0 <_vfiprintf_r+0xa4>
 80076d8:	465b      	mov	r3, fp
 80076da:	4622      	mov	r2, r4
 80076dc:	4629      	mov	r1, r5
 80076de:	4630      	mov	r0, r6
 80076e0:	f7ff ffa2 	bl	8007628 <__sfputs_r>
 80076e4:	3001      	adds	r0, #1
 80076e6:	f000 80a7 	beq.w	8007838 <_vfiprintf_r+0x1ec>
 80076ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076ec:	445a      	add	r2, fp
 80076ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80076f0:	f89a 3000 	ldrb.w	r3, [sl]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 809f 	beq.w	8007838 <_vfiprintf_r+0x1ec>
 80076fa:	2300      	movs	r3, #0
 80076fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007704:	f10a 0a01 	add.w	sl, sl, #1
 8007708:	9304      	str	r3, [sp, #16]
 800770a:	9307      	str	r3, [sp, #28]
 800770c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007710:	931a      	str	r3, [sp, #104]	@ 0x68
 8007712:	4654      	mov	r4, sl
 8007714:	2205      	movs	r2, #5
 8007716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800771a:	4853      	ldr	r0, [pc, #332]	@ (8007868 <_vfiprintf_r+0x21c>)
 800771c:	f7fe f9b7 	bl	8005a8e <memchr>
 8007720:	9a04      	ldr	r2, [sp, #16]
 8007722:	b9d8      	cbnz	r0, 800775c <_vfiprintf_r+0x110>
 8007724:	06d1      	lsls	r1, r2, #27
 8007726:	bf44      	itt	mi
 8007728:	2320      	movmi	r3, #32
 800772a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800772e:	0713      	lsls	r3, r2, #28
 8007730:	bf44      	itt	mi
 8007732:	232b      	movmi	r3, #43	@ 0x2b
 8007734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007738:	f89a 3000 	ldrb.w	r3, [sl]
 800773c:	2b2a      	cmp	r3, #42	@ 0x2a
 800773e:	d015      	beq.n	800776c <_vfiprintf_r+0x120>
 8007740:	4654      	mov	r4, sl
 8007742:	2000      	movs	r0, #0
 8007744:	f04f 0c0a 	mov.w	ip, #10
 8007748:	9a07      	ldr	r2, [sp, #28]
 800774a:	4621      	mov	r1, r4
 800774c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007750:	3b30      	subs	r3, #48	@ 0x30
 8007752:	2b09      	cmp	r3, #9
 8007754:	d94b      	bls.n	80077ee <_vfiprintf_r+0x1a2>
 8007756:	b1b0      	cbz	r0, 8007786 <_vfiprintf_r+0x13a>
 8007758:	9207      	str	r2, [sp, #28]
 800775a:	e014      	b.n	8007786 <_vfiprintf_r+0x13a>
 800775c:	eba0 0308 	sub.w	r3, r0, r8
 8007760:	fa09 f303 	lsl.w	r3, r9, r3
 8007764:	4313      	orrs	r3, r2
 8007766:	46a2      	mov	sl, r4
 8007768:	9304      	str	r3, [sp, #16]
 800776a:	e7d2      	b.n	8007712 <_vfiprintf_r+0xc6>
 800776c:	9b03      	ldr	r3, [sp, #12]
 800776e:	1d19      	adds	r1, r3, #4
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	9103      	str	r1, [sp, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	bfbb      	ittet	lt
 8007778:	425b      	neglt	r3, r3
 800777a:	f042 0202 	orrlt.w	r2, r2, #2
 800777e:	9307      	strge	r3, [sp, #28]
 8007780:	9307      	strlt	r3, [sp, #28]
 8007782:	bfb8      	it	lt
 8007784:	9204      	strlt	r2, [sp, #16]
 8007786:	7823      	ldrb	r3, [r4, #0]
 8007788:	2b2e      	cmp	r3, #46	@ 0x2e
 800778a:	d10a      	bne.n	80077a2 <_vfiprintf_r+0x156>
 800778c:	7863      	ldrb	r3, [r4, #1]
 800778e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007790:	d132      	bne.n	80077f8 <_vfiprintf_r+0x1ac>
 8007792:	9b03      	ldr	r3, [sp, #12]
 8007794:	3402      	adds	r4, #2
 8007796:	1d1a      	adds	r2, r3, #4
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	9203      	str	r2, [sp, #12]
 800779c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077a0:	9305      	str	r3, [sp, #20]
 80077a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800786c <_vfiprintf_r+0x220>
 80077a6:	2203      	movs	r2, #3
 80077a8:	4650      	mov	r0, sl
 80077aa:	7821      	ldrb	r1, [r4, #0]
 80077ac:	f7fe f96f 	bl	8005a8e <memchr>
 80077b0:	b138      	cbz	r0, 80077c2 <_vfiprintf_r+0x176>
 80077b2:	2240      	movs	r2, #64	@ 0x40
 80077b4:	9b04      	ldr	r3, [sp, #16]
 80077b6:	eba0 000a 	sub.w	r0, r0, sl
 80077ba:	4082      	lsls	r2, r0
 80077bc:	4313      	orrs	r3, r2
 80077be:	3401      	adds	r4, #1
 80077c0:	9304      	str	r3, [sp, #16]
 80077c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c6:	2206      	movs	r2, #6
 80077c8:	4829      	ldr	r0, [pc, #164]	@ (8007870 <_vfiprintf_r+0x224>)
 80077ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077ce:	f7fe f95e 	bl	8005a8e <memchr>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d03f      	beq.n	8007856 <_vfiprintf_r+0x20a>
 80077d6:	4b27      	ldr	r3, [pc, #156]	@ (8007874 <_vfiprintf_r+0x228>)
 80077d8:	bb1b      	cbnz	r3, 8007822 <_vfiprintf_r+0x1d6>
 80077da:	9b03      	ldr	r3, [sp, #12]
 80077dc:	3307      	adds	r3, #7
 80077de:	f023 0307 	bic.w	r3, r3, #7
 80077e2:	3308      	adds	r3, #8
 80077e4:	9303      	str	r3, [sp, #12]
 80077e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077e8:	443b      	add	r3, r7
 80077ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80077ec:	e76a      	b.n	80076c4 <_vfiprintf_r+0x78>
 80077ee:	460c      	mov	r4, r1
 80077f0:	2001      	movs	r0, #1
 80077f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80077f6:	e7a8      	b.n	800774a <_vfiprintf_r+0xfe>
 80077f8:	2300      	movs	r3, #0
 80077fa:	f04f 0c0a 	mov.w	ip, #10
 80077fe:	4619      	mov	r1, r3
 8007800:	3401      	adds	r4, #1
 8007802:	9305      	str	r3, [sp, #20]
 8007804:	4620      	mov	r0, r4
 8007806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800780a:	3a30      	subs	r2, #48	@ 0x30
 800780c:	2a09      	cmp	r2, #9
 800780e:	d903      	bls.n	8007818 <_vfiprintf_r+0x1cc>
 8007810:	2b00      	cmp	r3, #0
 8007812:	d0c6      	beq.n	80077a2 <_vfiprintf_r+0x156>
 8007814:	9105      	str	r1, [sp, #20]
 8007816:	e7c4      	b.n	80077a2 <_vfiprintf_r+0x156>
 8007818:	4604      	mov	r4, r0
 800781a:	2301      	movs	r3, #1
 800781c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007820:	e7f0      	b.n	8007804 <_vfiprintf_r+0x1b8>
 8007822:	ab03      	add	r3, sp, #12
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	462a      	mov	r2, r5
 8007828:	4630      	mov	r0, r6
 800782a:	4b13      	ldr	r3, [pc, #76]	@ (8007878 <_vfiprintf_r+0x22c>)
 800782c:	a904      	add	r1, sp, #16
 800782e:	f7fd fb97 	bl	8004f60 <_printf_float>
 8007832:	4607      	mov	r7, r0
 8007834:	1c78      	adds	r0, r7, #1
 8007836:	d1d6      	bne.n	80077e6 <_vfiprintf_r+0x19a>
 8007838:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800783a:	07d9      	lsls	r1, r3, #31
 800783c:	d405      	bmi.n	800784a <_vfiprintf_r+0x1fe>
 800783e:	89ab      	ldrh	r3, [r5, #12]
 8007840:	059a      	lsls	r2, r3, #22
 8007842:	d402      	bmi.n	800784a <_vfiprintf_r+0x1fe>
 8007844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007846:	f7fe f921 	bl	8005a8c <__retarget_lock_release_recursive>
 800784a:	89ab      	ldrh	r3, [r5, #12]
 800784c:	065b      	lsls	r3, r3, #25
 800784e:	f53f af1f 	bmi.w	8007690 <_vfiprintf_r+0x44>
 8007852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007854:	e71e      	b.n	8007694 <_vfiprintf_r+0x48>
 8007856:	ab03      	add	r3, sp, #12
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	462a      	mov	r2, r5
 800785c:	4630      	mov	r0, r6
 800785e:	4b06      	ldr	r3, [pc, #24]	@ (8007878 <_vfiprintf_r+0x22c>)
 8007860:	a904      	add	r1, sp, #16
 8007862:	f7fd fe1b 	bl	800549c <_printf_i>
 8007866:	e7e4      	b.n	8007832 <_vfiprintf_r+0x1e6>
 8007868:	08008f50 	.word	0x08008f50
 800786c:	08008f56 	.word	0x08008f56
 8007870:	08008f5a 	.word	0x08008f5a
 8007874:	08004f61 	.word	0x08004f61
 8007878:	08007629 	.word	0x08007629

0800787c <__swbuf_r>:
 800787c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787e:	460e      	mov	r6, r1
 8007880:	4614      	mov	r4, r2
 8007882:	4605      	mov	r5, r0
 8007884:	b118      	cbz	r0, 800788e <__swbuf_r+0x12>
 8007886:	6a03      	ldr	r3, [r0, #32]
 8007888:	b90b      	cbnz	r3, 800788e <__swbuf_r+0x12>
 800788a:	f7fd ffb3 	bl	80057f4 <__sinit>
 800788e:	69a3      	ldr	r3, [r4, #24]
 8007890:	60a3      	str	r3, [r4, #8]
 8007892:	89a3      	ldrh	r3, [r4, #12]
 8007894:	071a      	lsls	r2, r3, #28
 8007896:	d501      	bpl.n	800789c <__swbuf_r+0x20>
 8007898:	6923      	ldr	r3, [r4, #16]
 800789a:	b943      	cbnz	r3, 80078ae <__swbuf_r+0x32>
 800789c:	4621      	mov	r1, r4
 800789e:	4628      	mov	r0, r5
 80078a0:	f000 f82a 	bl	80078f8 <__swsetup_r>
 80078a4:	b118      	cbz	r0, 80078ae <__swbuf_r+0x32>
 80078a6:	f04f 37ff 	mov.w	r7, #4294967295
 80078aa:	4638      	mov	r0, r7
 80078ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	6922      	ldr	r2, [r4, #16]
 80078b2:	b2f6      	uxtb	r6, r6
 80078b4:	1a98      	subs	r0, r3, r2
 80078b6:	6963      	ldr	r3, [r4, #20]
 80078b8:	4637      	mov	r7, r6
 80078ba:	4283      	cmp	r3, r0
 80078bc:	dc05      	bgt.n	80078ca <__swbuf_r+0x4e>
 80078be:	4621      	mov	r1, r4
 80078c0:	4628      	mov	r0, r5
 80078c2:	f7ff fd9b 	bl	80073fc <_fflush_r>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d1ed      	bne.n	80078a6 <__swbuf_r+0x2a>
 80078ca:	68a3      	ldr	r3, [r4, #8]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	60a3      	str	r3, [r4, #8]
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	6022      	str	r2, [r4, #0]
 80078d6:	701e      	strb	r6, [r3, #0]
 80078d8:	6962      	ldr	r2, [r4, #20]
 80078da:	1c43      	adds	r3, r0, #1
 80078dc:	429a      	cmp	r2, r3
 80078de:	d004      	beq.n	80078ea <__swbuf_r+0x6e>
 80078e0:	89a3      	ldrh	r3, [r4, #12]
 80078e2:	07db      	lsls	r3, r3, #31
 80078e4:	d5e1      	bpl.n	80078aa <__swbuf_r+0x2e>
 80078e6:	2e0a      	cmp	r6, #10
 80078e8:	d1df      	bne.n	80078aa <__swbuf_r+0x2e>
 80078ea:	4621      	mov	r1, r4
 80078ec:	4628      	mov	r0, r5
 80078ee:	f7ff fd85 	bl	80073fc <_fflush_r>
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d0d9      	beq.n	80078aa <__swbuf_r+0x2e>
 80078f6:	e7d6      	b.n	80078a6 <__swbuf_r+0x2a>

080078f8 <__swsetup_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	4b29      	ldr	r3, [pc, #164]	@ (80079a0 <__swsetup_r+0xa8>)
 80078fc:	4605      	mov	r5, r0
 80078fe:	6818      	ldr	r0, [r3, #0]
 8007900:	460c      	mov	r4, r1
 8007902:	b118      	cbz	r0, 800790c <__swsetup_r+0x14>
 8007904:	6a03      	ldr	r3, [r0, #32]
 8007906:	b90b      	cbnz	r3, 800790c <__swsetup_r+0x14>
 8007908:	f7fd ff74 	bl	80057f4 <__sinit>
 800790c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007910:	0719      	lsls	r1, r3, #28
 8007912:	d422      	bmi.n	800795a <__swsetup_r+0x62>
 8007914:	06da      	lsls	r2, r3, #27
 8007916:	d407      	bmi.n	8007928 <__swsetup_r+0x30>
 8007918:	2209      	movs	r2, #9
 800791a:	602a      	str	r2, [r5, #0]
 800791c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007920:	f04f 30ff 	mov.w	r0, #4294967295
 8007924:	81a3      	strh	r3, [r4, #12]
 8007926:	e033      	b.n	8007990 <__swsetup_r+0x98>
 8007928:	0758      	lsls	r0, r3, #29
 800792a:	d512      	bpl.n	8007952 <__swsetup_r+0x5a>
 800792c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800792e:	b141      	cbz	r1, 8007942 <__swsetup_r+0x4a>
 8007930:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007934:	4299      	cmp	r1, r3
 8007936:	d002      	beq.n	800793e <__swsetup_r+0x46>
 8007938:	4628      	mov	r0, r5
 800793a:	f7fe ff09 	bl	8006750 <_free_r>
 800793e:	2300      	movs	r3, #0
 8007940:	6363      	str	r3, [r4, #52]	@ 0x34
 8007942:	89a3      	ldrh	r3, [r4, #12]
 8007944:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007948:	81a3      	strh	r3, [r4, #12]
 800794a:	2300      	movs	r3, #0
 800794c:	6063      	str	r3, [r4, #4]
 800794e:	6923      	ldr	r3, [r4, #16]
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	89a3      	ldrh	r3, [r4, #12]
 8007954:	f043 0308 	orr.w	r3, r3, #8
 8007958:	81a3      	strh	r3, [r4, #12]
 800795a:	6923      	ldr	r3, [r4, #16]
 800795c:	b94b      	cbnz	r3, 8007972 <__swsetup_r+0x7a>
 800795e:	89a3      	ldrh	r3, [r4, #12]
 8007960:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007968:	d003      	beq.n	8007972 <__swsetup_r+0x7a>
 800796a:	4621      	mov	r1, r4
 800796c:	4628      	mov	r0, r5
 800796e:	f000 f882 	bl	8007a76 <__smakebuf_r>
 8007972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007976:	f013 0201 	ands.w	r2, r3, #1
 800797a:	d00a      	beq.n	8007992 <__swsetup_r+0x9a>
 800797c:	2200      	movs	r2, #0
 800797e:	60a2      	str	r2, [r4, #8]
 8007980:	6962      	ldr	r2, [r4, #20]
 8007982:	4252      	negs	r2, r2
 8007984:	61a2      	str	r2, [r4, #24]
 8007986:	6922      	ldr	r2, [r4, #16]
 8007988:	b942      	cbnz	r2, 800799c <__swsetup_r+0xa4>
 800798a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800798e:	d1c5      	bne.n	800791c <__swsetup_r+0x24>
 8007990:	bd38      	pop	{r3, r4, r5, pc}
 8007992:	0799      	lsls	r1, r3, #30
 8007994:	bf58      	it	pl
 8007996:	6962      	ldrpl	r2, [r4, #20]
 8007998:	60a2      	str	r2, [r4, #8]
 800799a:	e7f4      	b.n	8007986 <__swsetup_r+0x8e>
 800799c:	2000      	movs	r0, #0
 800799e:	e7f7      	b.n	8007990 <__swsetup_r+0x98>
 80079a0:	20000020 	.word	0x20000020

080079a4 <_raise_r>:
 80079a4:	291f      	cmp	r1, #31
 80079a6:	b538      	push	{r3, r4, r5, lr}
 80079a8:	4605      	mov	r5, r0
 80079aa:	460c      	mov	r4, r1
 80079ac:	d904      	bls.n	80079b8 <_raise_r+0x14>
 80079ae:	2316      	movs	r3, #22
 80079b0:	6003      	str	r3, [r0, #0]
 80079b2:	f04f 30ff 	mov.w	r0, #4294967295
 80079b6:	bd38      	pop	{r3, r4, r5, pc}
 80079b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80079ba:	b112      	cbz	r2, 80079c2 <_raise_r+0x1e>
 80079bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079c0:	b94b      	cbnz	r3, 80079d6 <_raise_r+0x32>
 80079c2:	4628      	mov	r0, r5
 80079c4:	f000 f830 	bl	8007a28 <_getpid_r>
 80079c8:	4622      	mov	r2, r4
 80079ca:	4601      	mov	r1, r0
 80079cc:	4628      	mov	r0, r5
 80079ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079d2:	f000 b817 	b.w	8007a04 <_kill_r>
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d00a      	beq.n	80079f0 <_raise_r+0x4c>
 80079da:	1c59      	adds	r1, r3, #1
 80079dc:	d103      	bne.n	80079e6 <_raise_r+0x42>
 80079de:	2316      	movs	r3, #22
 80079e0:	6003      	str	r3, [r0, #0]
 80079e2:	2001      	movs	r0, #1
 80079e4:	e7e7      	b.n	80079b6 <_raise_r+0x12>
 80079e6:	2100      	movs	r1, #0
 80079e8:	4620      	mov	r0, r4
 80079ea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80079ee:	4798      	blx	r3
 80079f0:	2000      	movs	r0, #0
 80079f2:	e7e0      	b.n	80079b6 <_raise_r+0x12>

080079f4 <raise>:
 80079f4:	4b02      	ldr	r3, [pc, #8]	@ (8007a00 <raise+0xc>)
 80079f6:	4601      	mov	r1, r0
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	f7ff bfd3 	b.w	80079a4 <_raise_r>
 80079fe:	bf00      	nop
 8007a00:	20000020 	.word	0x20000020

08007a04 <_kill_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	2300      	movs	r3, #0
 8007a08:	4d06      	ldr	r5, [pc, #24]	@ (8007a24 <_kill_r+0x20>)
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	4611      	mov	r1, r2
 8007a10:	602b      	str	r3, [r5, #0]
 8007a12:	f7fa fc48 	bl	80022a6 <_kill>
 8007a16:	1c43      	adds	r3, r0, #1
 8007a18:	d102      	bne.n	8007a20 <_kill_r+0x1c>
 8007a1a:	682b      	ldr	r3, [r5, #0]
 8007a1c:	b103      	cbz	r3, 8007a20 <_kill_r+0x1c>
 8007a1e:	6023      	str	r3, [r4, #0]
 8007a20:	bd38      	pop	{r3, r4, r5, pc}
 8007a22:	bf00      	nop
 8007a24:	200004c4 	.word	0x200004c4

08007a28 <_getpid_r>:
 8007a28:	f7fa bc36 	b.w	8002298 <_getpid>

08007a2c <__swhatbuf_r>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	460c      	mov	r4, r1
 8007a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a34:	4615      	mov	r5, r2
 8007a36:	2900      	cmp	r1, #0
 8007a38:	461e      	mov	r6, r3
 8007a3a:	b096      	sub	sp, #88	@ 0x58
 8007a3c:	da0c      	bge.n	8007a58 <__swhatbuf_r+0x2c>
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	2100      	movs	r1, #0
 8007a42:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a46:	bf14      	ite	ne
 8007a48:	2340      	movne	r3, #64	@ 0x40
 8007a4a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a4e:	2000      	movs	r0, #0
 8007a50:	6031      	str	r1, [r6, #0]
 8007a52:	602b      	str	r3, [r5, #0]
 8007a54:	b016      	add	sp, #88	@ 0x58
 8007a56:	bd70      	pop	{r4, r5, r6, pc}
 8007a58:	466a      	mov	r2, sp
 8007a5a:	f000 f849 	bl	8007af0 <_fstat_r>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	dbed      	blt.n	8007a3e <__swhatbuf_r+0x12>
 8007a62:	9901      	ldr	r1, [sp, #4]
 8007a64:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a68:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a6c:	4259      	negs	r1, r3
 8007a6e:	4159      	adcs	r1, r3
 8007a70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a74:	e7eb      	b.n	8007a4e <__swhatbuf_r+0x22>

08007a76 <__smakebuf_r>:
 8007a76:	898b      	ldrh	r3, [r1, #12]
 8007a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a7a:	079d      	lsls	r5, r3, #30
 8007a7c:	4606      	mov	r6, r0
 8007a7e:	460c      	mov	r4, r1
 8007a80:	d507      	bpl.n	8007a92 <__smakebuf_r+0x1c>
 8007a82:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a86:	6023      	str	r3, [r4, #0]
 8007a88:	6123      	str	r3, [r4, #16]
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	6163      	str	r3, [r4, #20]
 8007a8e:	b003      	add	sp, #12
 8007a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a92:	466a      	mov	r2, sp
 8007a94:	ab01      	add	r3, sp, #4
 8007a96:	f7ff ffc9 	bl	8007a2c <__swhatbuf_r>
 8007a9a:	9f00      	ldr	r7, [sp, #0]
 8007a9c:	4605      	mov	r5, r0
 8007a9e:	4639      	mov	r1, r7
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f7fe fec7 	bl	8006834 <_malloc_r>
 8007aa6:	b948      	cbnz	r0, 8007abc <__smakebuf_r+0x46>
 8007aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aac:	059a      	lsls	r2, r3, #22
 8007aae:	d4ee      	bmi.n	8007a8e <__smakebuf_r+0x18>
 8007ab0:	f023 0303 	bic.w	r3, r3, #3
 8007ab4:	f043 0302 	orr.w	r3, r3, #2
 8007ab8:	81a3      	strh	r3, [r4, #12]
 8007aba:	e7e2      	b.n	8007a82 <__smakebuf_r+0xc>
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ac6:	81a3      	strh	r3, [r4, #12]
 8007ac8:	9b01      	ldr	r3, [sp, #4]
 8007aca:	6020      	str	r0, [r4, #0]
 8007acc:	b15b      	cbz	r3, 8007ae6 <__smakebuf_r+0x70>
 8007ace:	4630      	mov	r0, r6
 8007ad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ad4:	f000 f81e 	bl	8007b14 <_isatty_r>
 8007ad8:	b128      	cbz	r0, 8007ae6 <__smakebuf_r+0x70>
 8007ada:	89a3      	ldrh	r3, [r4, #12]
 8007adc:	f023 0303 	bic.w	r3, r3, #3
 8007ae0:	f043 0301 	orr.w	r3, r3, #1
 8007ae4:	81a3      	strh	r3, [r4, #12]
 8007ae6:	89a3      	ldrh	r3, [r4, #12]
 8007ae8:	431d      	orrs	r5, r3
 8007aea:	81a5      	strh	r5, [r4, #12]
 8007aec:	e7cf      	b.n	8007a8e <__smakebuf_r+0x18>
	...

08007af0 <_fstat_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	2300      	movs	r3, #0
 8007af4:	4d06      	ldr	r5, [pc, #24]	@ (8007b10 <_fstat_r+0x20>)
 8007af6:	4604      	mov	r4, r0
 8007af8:	4608      	mov	r0, r1
 8007afa:	4611      	mov	r1, r2
 8007afc:	602b      	str	r3, [r5, #0]
 8007afe:	f7fa fc31 	bl	8002364 <_fstat>
 8007b02:	1c43      	adds	r3, r0, #1
 8007b04:	d102      	bne.n	8007b0c <_fstat_r+0x1c>
 8007b06:	682b      	ldr	r3, [r5, #0]
 8007b08:	b103      	cbz	r3, 8007b0c <_fstat_r+0x1c>
 8007b0a:	6023      	str	r3, [r4, #0]
 8007b0c:	bd38      	pop	{r3, r4, r5, pc}
 8007b0e:	bf00      	nop
 8007b10:	200004c4 	.word	0x200004c4

08007b14 <_isatty_r>:
 8007b14:	b538      	push	{r3, r4, r5, lr}
 8007b16:	2300      	movs	r3, #0
 8007b18:	4d05      	ldr	r5, [pc, #20]	@ (8007b30 <_isatty_r+0x1c>)
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	4608      	mov	r0, r1
 8007b1e:	602b      	str	r3, [r5, #0]
 8007b20:	f7fa fc2f 	bl	8002382 <_isatty>
 8007b24:	1c43      	adds	r3, r0, #1
 8007b26:	d102      	bne.n	8007b2e <_isatty_r+0x1a>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	b103      	cbz	r3, 8007b2e <_isatty_r+0x1a>
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	bd38      	pop	{r3, r4, r5, pc}
 8007b30:	200004c4 	.word	0x200004c4

08007b34 <_init>:
 8007b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b36:	bf00      	nop
 8007b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3a:	bc08      	pop	{r3}
 8007b3c:	469e      	mov	lr, r3
 8007b3e:	4770      	bx	lr

08007b40 <_fini>:
 8007b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b42:	bf00      	nop
 8007b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b46:	bc08      	pop	{r3}
 8007b48:	469e      	mov	lr, r3
 8007b4a:	4770      	bx	lr
