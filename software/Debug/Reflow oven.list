
Reflow oven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000799c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001558  08007ab0  08007ab0  00008ab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009008  08009008  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009008  08009008  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009010  08009010  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009010  08009010  0000a010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009014  08009014  0000a014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009018  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  200001d8  080091f0  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  080091f0  0000b4d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa49  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d3  00000000  00000000  0001ac4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  0001d320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c43  00000000  00000000  0001e2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194af  00000000  00000000  0001ef33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122ba  00000000  00000000  000383e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ebb7  00000000  00000000  0004a69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9253  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005390  00000000  00000000  000d9298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000de628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a94 	.word	0x08007a94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08007a94 	.word	0x08007a94

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b08d      	sub	sp, #52	@ 0x34
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	4611      	mov	r1, r2
 8000b32:	461a      	mov	r2, r3
 8000b34:	4603      	mov	r3, r0
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	81bb      	strh	r3, [r7, #12]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	2b1e      	cmp	r3, #30
 8000b44:	d964      	bls.n	8000c10 <ILI9341_DrawChar+0xe8>
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db60      	blt.n	8000c10 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	3301      	adds	r3, #1
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	3302      	adds	r3, #2
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	3303      	adds	r3, #3
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	3b20      	subs	r3, #32
 8000b70:	7ffa      	ldrb	r2, [r7, #31]
 8000b72:	fb02 f303 	mul.w	r3, r2, r3
 8000b76:	3304      	adds	r3, #4
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000b7e:	7fbb      	ldrb	r3, [r7, #30]
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	7f7b      	ldrb	r3, [r7, #29]
 8000b84:	b29c      	uxth	r4, r3
 8000b86:	88f9      	ldrh	r1, [r7, #6]
 8000b88:	89b8      	ldrh	r0, [r7, #12]
 8000b8a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	4623      	mov	r3, r4
 8000b90:	f000 fc1e 	bl	80013d0 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b98:	e035      	b.n	8000c06 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
 8000b9e:	e02b      	b.n	8000bf8 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000ba0:	7f3b      	ldrb	r3, [r7, #28]
 8000ba2:	6a3a      	ldr	r2, [r7, #32]
 8000ba4:	fb03 f202 	mul.w	r2, r3, r2
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000baa:	10db      	asrs	r3, r3, #3
 8000bac:	f003 031f 	and.w	r3, r3, #31
 8000bb0:	4413      	add	r3, r2
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8000bca:	7dfa      	ldrb	r2, [r7, #23]
 8000bcc:	7dbb      	ldrb	r3, [r7, #22]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00d      	beq.n	8000bf2 <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	89bb      	ldrh	r3, [r7, #12]
 8000bdc:	4413      	add	r3, r2
 8000bde:	b298      	uxth	r0, r3
 8000be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	4413      	add	r3, r2
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8000bec:	4619      	mov	r1, r3
 8000bee:	f000 fb89 	bl	8001304 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000bf2:	6a3b      	ldr	r3, [r7, #32]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	623b      	str	r3, [r7, #32]
 8000bf8:	7fbb      	ldrb	r3, [r7, #30]
 8000bfa:	6a3a      	ldr	r2, [r7, #32]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	dbcf      	blt.n	8000ba0 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 8000c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c02:	3301      	adds	r3, #1
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c06:	7f7b      	ldrb	r3, [r7, #29]
 8000c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	dbc5      	blt.n	8000b9a <ILI9341_DrawChar+0x72>
 8000c0e:	e000      	b.n	8000c12 <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 8000c10:	bf00      	nop
			}
		}
	}
}
 8000c12:	372c      	adds	r7, #44	@ 0x2c
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd90      	pop	{r4, r7, pc}

08000c18 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	@ 0x28
 8000c1c:	af02      	add	r7, sp, #8
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	4611      	mov	r1, r2
 8000c24:	461a      	mov	r2, r3
 8000c26:	460b      	mov	r3, r1
 8000c28:	80fb      	strh	r3, [r7, #6]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	3301      	adds	r3, #1
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000c3c:	e02d      	b.n	8000c9a <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	7818      	ldrb	r0, [r3, #0]
 8000c42:	88b9      	ldrh	r1, [r7, #4]
 8000c44:	88fa      	ldrh	r2, [r7, #6]
 8000c46:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	f7ff ff69 	bl	8000b28 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	3b20      	subs	r3, #32
 8000c5c:	7ffa      	ldrb	r2, [r7, #31]
 8000c5e:	fb02 f303 	mul.w	r3, r2, r3
 8000c62:	3304      	adds	r3, #4
 8000c64:	68ba      	ldr	r2, [r7, #8]
 8000c66:	4413      	add	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000c70:	7dfb      	ldrb	r3, [r7, #23]
 8000c72:	1c9a      	adds	r2, r3, #2
 8000c74:	7fbb      	ldrb	r3, [r7, #30]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	da07      	bge.n	8000c8a <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8000c7a:	7dfb      	ldrb	r3, [r7, #23]
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	4413      	add	r3, r2
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	3302      	adds	r3, #2
 8000c86:	80fb      	strh	r3, [r7, #6]
 8000c88:	e004      	b.n	8000c94 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 8000c8a:	7fbb      	ldrb	r3, [r7, #30]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	4413      	add	r3, r2
 8000c92:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	3301      	adds	r3, #1
 8000c98:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1cd      	bne.n	8000c3e <ILI9341_DrawText+0x26>
	}
}
 8000ca2:	bf00      	nop
 8000ca4:	bf00      	nop
 8000ca6:	3720      	adds	r7, #32
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a06      	ldr	r2, [pc, #24]	@ (8000cd0 <HAL_SPI_TxCpltCallback+0x24>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d105      	bne.n	8000cc8 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc2:	4804      	ldr	r0, [pc, #16]	@ (8000cd4 <HAL_SPI_TxCpltCallback+0x28>)
 8000cc4:	f002 f88c 	bl	8002de0 <HAL_GPIO_WritePin>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200001f4 	.word	0x200001f4
 8000cd4:	40010c00 	.word	0x40010c00

08000cd8 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000ce2:	bf00      	nop
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <ILI9341_SPI_Tx+0x30>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d1f8      	bne.n	8000ce4 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4803      	ldr	r0, [pc, #12]	@ (8000d08 <ILI9341_SPI_Tx+0x30>)
 8000cfa:	f003 f929 	bl	8003f50 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200001f4 	.word	0x200001f4

08000d0c <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000d18:	bf00      	nop
 8000d1a:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <ILI9341_SPI_TxBuffer+0x30>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d1f8      	bne.n	8000d1a <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000d28:	887b      	ldrh	r3, [r7, #2]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	4803      	ldr	r0, [pc, #12]	@ (8000d3c <ILI9341_SPI_TxBuffer+0x30>)
 8000d30:	f003 f90e 	bl	8003f50 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200001f4 	.word	0x200001f4

08000d40 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	4808      	ldr	r0, [pc, #32]	@ (8000d70 <ILI9341_WriteCommand+0x30>)
 8000d50:	f002 f846 	bl	8002de0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d5a:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <ILI9341_WriteCommand+0x30>)
 8000d5c:	f002 f840 	bl	8002de0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ffb8 	bl	8000cd8 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40010c00 	.word	0x40010c00

08000d74 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2101      	movs	r1, #1
 8000d82:	4808      	ldr	r0, [pc, #32]	@ (8000da4 <ILI9341_WriteData+0x30>)
 8000d84:	f002 f82c 	bl	8002de0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d8e:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <ILI9341_WriteData+0x30>)
 8000d90:	f002 f826 	bl	8002de0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff9e 	bl	8000cd8 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40010c00 	.word	0x40010c00

08000da8 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000db4:	2201      	movs	r2, #1
 8000db6:	2101      	movs	r1, #1
 8000db8:	4808      	ldr	r0, [pc, #32]	@ (8000ddc <ILI9341_WriteBuffer+0x34>)
 8000dba:	f002 f811 	bl	8002de0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dc4:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <ILI9341_WriteBuffer+0x34>)
 8000dc6:	f002 f80b 	bl	8002de0 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000dca:	887b      	ldrh	r3, [r7, #2]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ff9c 	bl	8000d0c <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40010c00 	.word	0x40010c00

08000de0 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4604      	mov	r4, r0
 8000de8:	4608      	mov	r0, r1
 8000dea:	4611      	mov	r1, r2
 8000dec:	461a      	mov	r2, r3
 8000dee:	4623      	mov	r3, r4
 8000df0:	80fb      	strh	r3, [r7, #6]
 8000df2:	4603      	mov	r3, r0
 8000df4:	80bb      	strh	r3, [r7, #4]
 8000df6:	460b      	mov	r3, r1
 8000df8:	807b      	strh	r3, [r7, #2]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	0a1b      	lsrs	r3, r3, #8
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000e0e:	887b      	ldrh	r3, [r7, #2]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8000e18:	887b      	ldrh	r3, [r7, #2]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000e1e:	202a      	movs	r0, #42	@ 0x2a
 8000e20:	f7ff ff8e 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	2104      	movs	r1, #4
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ffbc 	bl	8000da8 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000e30:	88bb      	ldrh	r3, [r7, #4]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000e3a:	88bb      	ldrh	r3, [r7, #4]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000e40:	883b      	ldrh	r3, [r7, #0]
 8000e42:	0a1b      	lsrs	r3, r3, #8
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000e4a:	883b      	ldrh	r3, [r7, #0]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000e50:	202b      	movs	r0, #43	@ 0x2b
 8000e52:	f7ff ff75 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ffa3 	bl	8000da8 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000e62:	202c      	movs	r0, #44	@ 0x2c
 8000e64:	f7ff ff6c 	bl	8000d40 <ILI9341_WriteCommand>
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd90      	pop	{r4, r7, pc}

08000e70 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000e74:	2200      	movs	r2, #0
 8000e76:	2102      	movs	r1, #2
 8000e78:	480d      	ldr	r0, [pc, #52]	@ (8000eb0 <ILI9341_Reset+0x40>)
 8000e7a:	f001 ffb1 	bl	8002de0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000e7e:	200a      	movs	r0, #10
 8000e80:	f001 fb0a 	bl	8002498 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000e84:	2200      	movs	r2, #0
 8000e86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e8a:	4809      	ldr	r0, [pc, #36]	@ (8000eb0 <ILI9341_Reset+0x40>)
 8000e8c:	f001 ffa8 	bl	8002de0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000e90:	200a      	movs	r0, #10
 8000e92:	f001 fb01 	bl	8002498 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000e96:	2201      	movs	r2, #1
 8000e98:	2102      	movs	r1, #2
 8000e9a:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <ILI9341_Reset+0x40>)
 8000e9c:	f001 ffa0 	bl	8002de0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ea6:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <ILI9341_Reset+0x40>)
 8000ea8:	f001 ff9a 	bl	8002de0 <HAL_GPIO_WritePin>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40010c00 	.word	0x40010c00

08000eb4 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2102      	movs	r1, #2
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <ILI9341_Enable+0x14>)
 8000ebe:	f001 ff8f 	bl	8002de0 <HAL_GPIO_WritePin>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40010c00 	.word	0x40010c00

08000ecc <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000ed0:	f7ff fff0 	bl	8000eb4 <ILI9341_Enable>
	ILI9341_Reset();
 8000ed4:	f7ff ffcc 	bl	8000e70 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff ff31 	bl	8000d40 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f001 fada 	bl	8002498 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000ee4:	20cb      	movs	r0, #203	@ 0xcb
 8000ee6:	f7ff ff2b 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000eea:	2039      	movs	r0, #57	@ 0x39
 8000eec:	f7ff ff42 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000ef0:	202c      	movs	r0, #44	@ 0x2c
 8000ef2:	f7ff ff3f 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f7ff ff3c 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000efc:	2034      	movs	r0, #52	@ 0x34
 8000efe:	f7ff ff39 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000f02:	2002      	movs	r0, #2
 8000f04:	f7ff ff36 	bl	8000d74 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000f08:	20cf      	movs	r0, #207	@ 0xcf
 8000f0a:	f7ff ff19 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff ff30 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000f14:	20c1      	movs	r0, #193	@ 0xc1
 8000f16:	f7ff ff2d 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000f1a:	2030      	movs	r0, #48	@ 0x30
 8000f1c:	f7ff ff2a 	bl	8000d74 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000f20:	20e8      	movs	r0, #232	@ 0xe8
 8000f22:	f7ff ff0d 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000f26:	2085      	movs	r0, #133	@ 0x85
 8000f28:	f7ff ff24 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f7ff ff21 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000f32:	2078      	movs	r0, #120	@ 0x78
 8000f34:	f7ff ff1e 	bl	8000d74 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000f38:	20ea      	movs	r0, #234	@ 0xea
 8000f3a:	f7ff ff01 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f7ff ff18 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000f44:	2000      	movs	r0, #0
 8000f46:	f7ff ff15 	bl	8000d74 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000f4a:	20ed      	movs	r0, #237	@ 0xed
 8000f4c:	f7ff fef8 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000f50:	2064      	movs	r0, #100	@ 0x64
 8000f52:	f7ff ff0f 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000f56:	2003      	movs	r0, #3
 8000f58:	f7ff ff0c 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000f5c:	2012      	movs	r0, #18
 8000f5e:	f7ff ff09 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000f62:	2081      	movs	r0, #129	@ 0x81
 8000f64:	f7ff ff06 	bl	8000d74 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000f68:	20f7      	movs	r0, #247	@ 0xf7
 8000f6a:	f7ff fee9 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000f6e:	2020      	movs	r0, #32
 8000f70:	f7ff ff00 	bl	8000d74 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000f74:	20c0      	movs	r0, #192	@ 0xc0
 8000f76:	f7ff fee3 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000f7a:	2023      	movs	r0, #35	@ 0x23
 8000f7c:	f7ff fefa 	bl	8000d74 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000f80:	20c1      	movs	r0, #193	@ 0xc1
 8000f82:	f7ff fedd 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000f86:	2010      	movs	r0, #16
 8000f88:	f7ff fef4 	bl	8000d74 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000f8c:	20c5      	movs	r0, #197	@ 0xc5
 8000f8e:	f7ff fed7 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000f92:	203e      	movs	r0, #62	@ 0x3e
 8000f94:	f7ff feee 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000f98:	2028      	movs	r0, #40	@ 0x28
 8000f9a:	f7ff feeb 	bl	8000d74 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000f9e:	20c7      	movs	r0, #199	@ 0xc7
 8000fa0:	f7ff fece 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000fa4:	2086      	movs	r0, #134	@ 0x86
 8000fa6:	f7ff fee5 	bl	8000d74 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000faa:	2036      	movs	r0, #54	@ 0x36
 8000fac:	f7ff fec8 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000fb0:	2048      	movs	r0, #72	@ 0x48
 8000fb2:	f7ff fedf 	bl	8000d74 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000fb6:	203a      	movs	r0, #58	@ 0x3a
 8000fb8:	f7ff fec2 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000fbc:	2055      	movs	r0, #85	@ 0x55
 8000fbe:	f7ff fed9 	bl	8000d74 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000fc2:	20b1      	movs	r0, #177	@ 0xb1
 8000fc4:	f7ff febc 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff fed3 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000fce:	2018      	movs	r0, #24
 8000fd0:	f7ff fed0 	bl	8000d74 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000fd4:	20b6      	movs	r0, #182	@ 0xb6
 8000fd6:	f7ff feb3 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000fda:	2008      	movs	r0, #8
 8000fdc:	f7ff feca 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000fe0:	2082      	movs	r0, #130	@ 0x82
 8000fe2:	f7ff fec7 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000fe6:	2027      	movs	r0, #39	@ 0x27
 8000fe8:	f7ff fec4 	bl	8000d74 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000fec:	20f2      	movs	r0, #242	@ 0xf2
 8000fee:	f7ff fea7 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f7ff febe 	bl	8000d74 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000ff8:	2026      	movs	r0, #38	@ 0x26
 8000ffa:	f7ff fea1 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f7ff feb8 	bl	8000d74 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8001004:	20e0      	movs	r0, #224	@ 0xe0
 8001006:	f7ff fe9b 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 800100a:	200f      	movs	r0, #15
 800100c:	f7ff feb2 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001010:	2031      	movs	r0, #49	@ 0x31
 8001012:	f7ff feaf 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8001016:	202b      	movs	r0, #43	@ 0x2b
 8001018:	f7ff feac 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 800101c:	200c      	movs	r0, #12
 800101e:	f7ff fea9 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001022:	200e      	movs	r0, #14
 8001024:	f7ff fea6 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001028:	2008      	movs	r0, #8
 800102a:	f7ff fea3 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 800102e:	204e      	movs	r0, #78	@ 0x4e
 8001030:	f7ff fea0 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8001034:	20f1      	movs	r0, #241	@ 0xf1
 8001036:	f7ff fe9d 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 800103a:	2037      	movs	r0, #55	@ 0x37
 800103c:	f7ff fe9a 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001040:	2007      	movs	r0, #7
 8001042:	f7ff fe97 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8001046:	2010      	movs	r0, #16
 8001048:	f7ff fe94 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800104c:	2003      	movs	r0, #3
 800104e:	f7ff fe91 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001052:	200e      	movs	r0, #14
 8001054:	f7ff fe8e 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8001058:	2009      	movs	r0, #9
 800105a:	f7ff fe8b 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff fe88 	bl	8000d74 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8001064:	20e1      	movs	r0, #225	@ 0xe1
 8001066:	f7ff fe6b 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800106a:	2000      	movs	r0, #0
 800106c:	f7ff fe82 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001070:	200e      	movs	r0, #14
 8001072:	f7ff fe7f 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8001076:	2014      	movs	r0, #20
 8001078:	f7ff fe7c 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800107c:	2003      	movs	r0, #3
 800107e:	f7ff fe79 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8001082:	2011      	movs	r0, #17
 8001084:	f7ff fe76 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001088:	2007      	movs	r0, #7
 800108a:	f7ff fe73 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800108e:	2031      	movs	r0, #49	@ 0x31
 8001090:	f7ff fe70 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001094:	20c1      	movs	r0, #193	@ 0xc1
 8001096:	f7ff fe6d 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 800109a:	2048      	movs	r0, #72	@ 0x48
 800109c:	f7ff fe6a 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80010a0:	2008      	movs	r0, #8
 80010a2:	f7ff fe67 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80010a6:	200f      	movs	r0, #15
 80010a8:	f7ff fe64 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80010ac:	200c      	movs	r0, #12
 80010ae:	f7ff fe61 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80010b2:	2031      	movs	r0, #49	@ 0x31
 80010b4:	f7ff fe5e 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 80010b8:	2036      	movs	r0, #54	@ 0x36
 80010ba:	f7ff fe5b 	bl	8000d74 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80010be:	200f      	movs	r0, #15
 80010c0:	f7ff fe58 	bl	8000d74 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 80010c4:	2011      	movs	r0, #17
 80010c6:	f7ff fe3b 	bl	8000d40 <ILI9341_WriteCommand>
	HAL_Delay(100);
 80010ca:	2064      	movs	r0, #100	@ 0x64
 80010cc:	f001 f9e4 	bl	8002498 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 80010d0:	2029      	movs	r0, #41	@ 0x29
 80010d2:	f7ff fe35 	bl	8000d40 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f802 	bl	80010e0 <ILI9341_SetRotation>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 80010ea:	2036      	movs	r0, #54	@ 0x36
 80010ec:	f7ff fe28 	bl	8000d40 <ILI9341_WriteCommand>
	HAL_Delay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f001 f9d1 	bl	8002498 <HAL_Delay>

	switch(rotation)
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d837      	bhi.n	800116c <ILI9341_SetRotation+0x8c>
 80010fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001104 <ILI9341_SetRotation+0x24>)
 80010fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001102:	bf00      	nop
 8001104:	08001115 	.word	0x08001115
 8001108:	0800112b 	.word	0x0800112b
 800110c:	08001141 	.word	0x08001141
 8001110:	08001157 	.word	0x08001157
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8001114:	2048      	movs	r0, #72	@ 0x48
 8001116:	f7ff fe2d 	bl	8000d74 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 800111a:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <ILI9341_SetRotation+0x98>)
 800111c:	22f0      	movs	r2, #240	@ 0xf0
 800111e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001120:	4b16      	ldr	r3, [pc, #88]	@ (800117c <ILI9341_SetRotation+0x9c>)
 8001122:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001126:	801a      	strh	r2, [r3, #0]
		break;
 8001128:	e021      	b.n	800116e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 800112a:	2028      	movs	r0, #40	@ 0x28
 800112c:	f7ff fe22 	bl	8000d74 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001130:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <ILI9341_SetRotation+0x98>)
 8001132:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001136:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001138:	4b10      	ldr	r3, [pc, #64]	@ (800117c <ILI9341_SetRotation+0x9c>)
 800113a:	22f0      	movs	r2, #240	@ 0xf0
 800113c:	801a      	strh	r2, [r3, #0]
		break;
 800113e:	e016      	b.n	800116e <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8001140:	2088      	movs	r0, #136	@ 0x88
 8001142:	f7ff fe17 	bl	8000d74 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8001146:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <ILI9341_SetRotation+0x98>)
 8001148:	22f0      	movs	r2, #240	@ 0xf0
 800114a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 800114c:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <ILI9341_SetRotation+0x9c>)
 800114e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001152:	801a      	strh	r2, [r3, #0]
		break;
 8001154:	e00b      	b.n	800116e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8001156:	20e8      	movs	r0, #232	@ 0xe8
 8001158:	f7ff fe0c 	bl	8000d74 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <ILI9341_SetRotation+0x98>)
 800115e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001162:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <ILI9341_SetRotation+0x9c>)
 8001166:	22f0      	movs	r2, #240	@ 0xf0
 8001168:	801a      	strh	r2, [r3, #0]
		break;
 800116a:	e000      	b.n	800116e <ILI9341_SetRotation+0x8e>
	default:
		break;
 800116c:	bf00      	nop
	}
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000002 	.word	0x20000002
 800117c:	20000000 	.word	0x20000000

08001180 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8001180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001184:	b08d      	sub	sp, #52	@ 0x34
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	6039      	str	r1, [r7, #0]
 800118c:	80fb      	strh	r3, [r7, #6]
 800118e:	466b      	mov	r3, sp
 8001190:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800119e:	d202      	bcs.n	80011a6 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011a4:	e002      	b.n	80011ac <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 80011a6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80011aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2101      	movs	r1, #1
 80011b0:	483f      	ldr	r0, [pc, #252]	@ (80012b0 <ILI9341_DrawColorBurst+0x130>)
 80011b2:	f001 fe15 	bl	8002de0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011bc:	483c      	ldr	r0, [pc, #240]	@ (80012b0 <ILI9341_DrawColorBurst+0x130>)
 80011be:	f001 fe0f 	bl	8002de0 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 80011cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80011ce:	460b      	mov	r3, r1
 80011d0:	3b01      	subs	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	2300      	movs	r3, #0
 80011d6:	4688      	mov	r8, r1
 80011d8:	4699      	mov	r9, r3
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011ee:	2300      	movs	r3, #0
 80011f0:	460c      	mov	r4, r1
 80011f2:	461d      	mov	r5, r3
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	00eb      	lsls	r3, r5, #3
 80011fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001202:	00e2      	lsls	r2, r4, #3
 8001204:	1dcb      	adds	r3, r1, #7
 8001206:	08db      	lsrs	r3, r3, #3
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	ebad 0d03 	sub.w	sp, sp, r3
 800120e:	466b      	mov	r3, sp
 8001210:	3300      	adds	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001214:	2300      	movs	r3, #0
 8001216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001218:	e00e      	b.n	8001238 <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800121e:	4413      	add	r3, r2
 8001220:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001224:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8001226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001228:	3301      	adds	r3, #1
 800122a:	88fa      	ldrh	r2, [r7, #6]
 800122c:	b2d1      	uxtb	r1, r2
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001234:	3302      	adds	r3, #2
 8001236:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001238:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800123a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800123c:	429a      	cmp	r2, r3
 800123e:	d3ec      	bcc.n	800121a <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001254:	fbb3 f2f2 	udiv	r2, r3, r2
 8001258:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800125a:	fb01 f202 	mul.w	r2, r1, r2
 800125e:	1a9b      	subs	r3, r3, r2
 8001260:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d010      	beq.n	800128a <ILI9341_DrawColorBurst+0x10a>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
 800126c:	e009      	b.n	8001282 <ILI9341_DrawColorBurst+0x102>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 800126e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001270:	b29a      	uxth	r2, r3
 8001272:	230a      	movs	r3, #10
 8001274:	69b9      	ldr	r1, [r7, #24]
 8001276:	480f      	ldr	r0, [pc, #60]	@ (80012b4 <ILI9341_DrawColorBurst+0x134>)
 8001278:	f002 fa5e 	bl	8003738 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800127c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127e:	3301      	adds	r3, #1
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
 8001282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	429a      	cmp	r2, r3
 8001288:	d3f1      	bcc.n	800126e <ILI9341_DrawColorBurst+0xee>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	b29a      	uxth	r2, r3
 800128e:	230a      	movs	r3, #10
 8001290:	69b9      	ldr	r1, [r7, #24]
 8001292:	4808      	ldr	r0, [pc, #32]	@ (80012b4 <ILI9341_DrawColorBurst+0x134>)
 8001294:	f002 fa50 	bl	8003738 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800129e:	4804      	ldr	r0, [pc, #16]	@ (80012b0 <ILI9341_DrawColorBurst+0x130>)
 80012a0:	f001 fd9e 	bl	8002de0 <HAL_GPIO_WritePin>
 80012a4:	46b5      	mov	sp, r6
}
 80012a6:	bf00      	nop
 80012a8:	3734      	adds	r7, #52	@ 0x34
 80012aa:	46bd      	mov	sp, r7
 80012ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012b0:	40010c00 	.word	0x40010c00
 80012b4:	200001f4 	.word	0x200001f4

080012b8 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <ILI9341_FillScreen+0x44>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <ILI9341_FillScreen+0x48>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	2100      	movs	r1, #0
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff fd85 	bl	8000de0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 80012d6:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <ILI9341_FillScreen+0x44>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <ILI9341_FillScreen+0x48>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff46 	bl	8001180 <ILI9341_DrawColorBurst>
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000002 	.word	0x20000002
 8001300:	20000000 	.word	0x20000000

08001304 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
 800130e:	460b      	mov	r3, r1
 8001310:	80bb      	strh	r3, [r7, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001316:	4b2c      	ldr	r3, [pc, #176]	@ (80013c8 <ILI9341_DrawPixel+0xc4>)
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	b29b      	uxth	r3, r3
 800131c:	88fa      	ldrh	r2, [r7, #6]
 800131e:	429a      	cmp	r2, r3
 8001320:	d24d      	bcs.n	80013be <ILI9341_DrawPixel+0xba>
 8001322:	4b2a      	ldr	r3, [pc, #168]	@ (80013cc <ILI9341_DrawPixel+0xc8>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	88ba      	ldrh	r2, [r7, #4]
 800132a:	429a      	cmp	r2, r3
 800132c:	d247      	bcs.n	80013be <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	b29b      	uxth	r3, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	753b      	strb	r3, [r7, #20]
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	757b      	strb	r3, [r7, #21]
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	3301      	adds	r3, #1
 8001342:	121b      	asrs	r3, r3, #8
 8001344:	b2db      	uxtb	r3, r3
 8001346:	75bb      	strb	r3, [r7, #22]
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	3301      	adds	r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8001352:	88bb      	ldrh	r3, [r7, #4]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	b29b      	uxth	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	743b      	strb	r3, [r7, #16]
 800135c:	88bb      	ldrh	r3, [r7, #4]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	747b      	strb	r3, [r7, #17]
 8001362:	88bb      	ldrh	r3, [r7, #4]
 8001364:	3301      	adds	r3, #1
 8001366:	121b      	asrs	r3, r3, #8
 8001368:	b2db      	uxtb	r3, r3
 800136a:	74bb      	strb	r3, [r7, #18]
 800136c:	88bb      	ldrh	r3, [r7, #4]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	3301      	adds	r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	b29b      	uxth	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	733b      	strb	r3, [r7, #12]
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001386:	202a      	movs	r0, #42	@ 0x2a
 8001388:	f7ff fcda 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2104      	movs	r1, #4
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fd08 	bl	8000da8 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001398:	202b      	movs	r0, #43	@ 0x2b
 800139a:	f7ff fcd1 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	2104      	movs	r1, #4
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fcff 	bl	8000da8 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 80013aa:	202c      	movs	r0, #44	@ 0x2c
 80013ac:	f7ff fcc8 	bl	8000d40 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	2102      	movs	r1, #2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fcf6 	bl	8000da8 <ILI9341_WriteBuffer>
 80013bc:	e000      	b.n	80013c0 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80013be:	bf00      	nop
}
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000002 	.word	0x20000002
 80013cc:	20000000 	.word	0x20000000

080013d0 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4604      	mov	r4, r0
 80013d8:	4608      	mov	r0, r1
 80013da:	4611      	mov	r1, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	4623      	mov	r3, r4
 80013e0:	80fb      	strh	r3, [r7, #6]
 80013e2:	4603      	mov	r3, r0
 80013e4:	80bb      	strh	r3, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	807b      	strh	r3, [r7, #2]
 80013ea:	4613      	mov	r3, r2
 80013ec:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80013ee:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <ILI9341_DrawRectangle+0xb0>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	88fa      	ldrh	r2, [r7, #6]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d23d      	bcs.n	8001476 <ILI9341_DrawRectangle+0xa6>
 80013fa:	4b22      	ldr	r3, [pc, #136]	@ (8001484 <ILI9341_DrawRectangle+0xb4>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	88ba      	ldrh	r2, [r7, #4]
 8001402:	429a      	cmp	r2, r3
 8001404:	d237      	bcs.n	8001476 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8001406:	88fa      	ldrh	r2, [r7, #6]
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	4413      	add	r3, r2
 800140c:	4a1c      	ldr	r2, [pc, #112]	@ (8001480 <ILI9341_DrawRectangle+0xb0>)
 800140e:	8812      	ldrh	r2, [r2, #0]
 8001410:	b292      	uxth	r2, r2
 8001412:	4293      	cmp	r3, r2
 8001414:	dd05      	ble.n	8001422 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8001416:	4b1a      	ldr	r3, [pc, #104]	@ (8001480 <ILI9341_DrawRectangle+0xb0>)
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	b29a      	uxth	r2, r3
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8001422:	88ba      	ldrh	r2, [r7, #4]
 8001424:	883b      	ldrh	r3, [r7, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4a16      	ldr	r2, [pc, #88]	@ (8001484 <ILI9341_DrawRectangle+0xb4>)
 800142a:	8812      	ldrh	r2, [r2, #0]
 800142c:	b292      	uxth	r2, r2
 800142e:	4293      	cmp	r3, r2
 8001430:	dd05      	ble.n	800143e <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8001432:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <ILI9341_DrawRectangle+0xb4>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	b29a      	uxth	r2, r3
 8001438:	88bb      	ldrh	r3, [r7, #4]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 800143e:	88fa      	ldrh	r2, [r7, #6]
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	4413      	add	r3, r2
 8001444:	b29b      	uxth	r3, r3
 8001446:	3b01      	subs	r3, #1
 8001448:	b29c      	uxth	r4, r3
 800144a:	88ba      	ldrh	r2, [r7, #4]
 800144c:	883b      	ldrh	r3, [r7, #0]
 800144e:	4413      	add	r3, r2
 8001450:	b29b      	uxth	r3, r3
 8001452:	3b01      	subs	r3, #1
 8001454:	b29b      	uxth	r3, r3
 8001456:	88b9      	ldrh	r1, [r7, #4]
 8001458:	88f8      	ldrh	r0, [r7, #6]
 800145a:	4622      	mov	r2, r4
 800145c:	f7ff fcc0 	bl	8000de0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001460:	883b      	ldrh	r3, [r7, #0]
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	fb02 f303 	mul.w	r3, r2, r3
 8001468:	461a      	mov	r2, r3
 800146a:	8b3b      	ldrh	r3, [r7, #24]
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fe86 	bl	8001180 <ILI9341_DrawColorBurst>
 8001474:	e000      	b.n	8001478 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001476:	bf00      	nop
}
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bd90      	pop	{r4, r7, pc}
 800147e:	bf00      	nop
 8001480:	20000002 	.word	0x20000002
 8001484:	20000000 	.word	0x20000000

08001488 <MAX31855_ReadData>:
//		Temp = (data_rec[2] << 4) | (data_rec[3] >> 4);
//		return((double)Temp / 16);
//	}
//}

MAX31855_Data MAX31855_ReadData(void) {
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b089      	sub	sp, #36	@ 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
    MAX31855_Data data;
    uint8_t buffer[4] = {0};
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]

    HAL_GPIO_WritePin(MAX31855_CS_PORT, MAX31855_CS_PIN, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800149a:	4835      	ldr	r0, [pc, #212]	@ (8001570 <MAX31855_ReadData+0xe8>)
 800149c:	f001 fca0 	bl	8002de0 <HAL_GPIO_WritePin>
    if (HAL_SPI_Receive(&hspi2, buffer, 4, MAX31855_SPI_TIMEOUT) != HAL_OK) {
 80014a0:	f107 0108 	add.w	r1, r7, #8
 80014a4:	2364      	movs	r3, #100	@ 0x64
 80014a6:	2204      	movs	r2, #4
 80014a8:	4832      	ldr	r0, [pc, #200]	@ (8001574 <MAX31855_ReadData+0xec>)
 80014aa:	f002 fa88 	bl	80039be <HAL_SPI_Receive>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d016      	beq.n	80014e2 <MAX31855_ReadData+0x5a>
        // Handle SPI error
        data.temperature = 0;
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
        data.internalTemperature = 0;
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
        data.fault = 0xFF;
 80014c0:	23ff      	movs	r3, #255	@ 0xff
 80014c2:	753b      	strb	r3, [r7, #20]
        HAL_GPIO_WritePin(MAX31855_CS_PORT, MAX31855_CS_PIN, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014ca:	4829      	ldr	r0, [pc, #164]	@ (8001570 <MAX31855_ReadData+0xe8>)
 80014cc:	f001 fc88 	bl	8002de0 <HAL_GPIO_WritePin>
        return data;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	461c      	mov	r4, r3
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014e0:	e041      	b.n	8001566 <MAX31855_ReadData+0xde>
    }

    HAL_GPIO_WritePin(MAX31855_CS_PORT, MAX31855_CS_PIN, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014e8:	4821      	ldr	r0, [pc, #132]	@ (8001570 <MAX31855_ReadData+0xe8>)
 80014ea:	f001 fc79 	bl	8002de0 <HAL_GPIO_WritePin>

    int32_t rawTemperature = ((buffer[0] << 24) | (buffer[1] << 16)) >> 18;
 80014ee:	7a3b      	ldrb	r3, [r7, #8]
 80014f0:	061a      	lsls	r2, r3, #24
 80014f2:	7a7b      	ldrb	r3, [r7, #9]
 80014f4:	041b      	lsls	r3, r3, #16
 80014f6:	4313      	orrs	r3, r2
 80014f8:	149b      	asrs	r3, r3, #18
 80014fa:	61fb      	str	r3, [r7, #28]
    int16_t rawInternalTemperature = ((buffer[2] << 8) | buffer[3]) >> 4;
 80014fc:	7abb      	ldrb	r3, [r7, #10]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	7afa      	ldrb	r2, [r7, #11]
 8001502:	4313      	orrs	r3, r2
 8001504:	111b      	asrs	r3, r3, #4
 8001506:	837b      	strh	r3, [r7, #26]

    data.temperature = rawTemperature * 0.25;
 8001508:	69f8      	ldr	r0, [r7, #28]
 800150a:	f7fe ff7b 	bl	8000404 <__aeabi_i2d>
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <MAX31855_ReadData+0xf0>)
 8001514:	f7fe ffe0 	bl	80004d8 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fab2 	bl	8000a88 <__aeabi_d2f>
 8001524:	4603      	mov	r3, r0
 8001526:	60fb      	str	r3, [r7, #12]
    data.internalTemperature = rawInternalTemperature * 0.0625;
 8001528:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ff69 	bl	8000404 <__aeabi_i2d>
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <MAX31855_ReadData+0xf4>)
 8001538:	f7fe ffce 	bl	80004d8 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	f7ff faa0 	bl	8000a88 <__aeabi_d2f>
 8001548:	4603      	mov	r3, r0
 800154a:	613b      	str	r3, [r7, #16]
    data.fault = buffer[3] & 0x07;
 800154c:	7afb      	ldrb	r3, [r7, #11]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	b2db      	uxtb	r3, r3
 8001554:	753b      	strb	r3, [r7, #20]

    return data;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	461c      	mov	r4, r3
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	3724      	adds	r7, #36	@ 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd90      	pop	{r4, r7, pc}
 800156e:	bf00      	nop
 8001570:	40010800 	.word	0x40010800
 8001574:	2000024c 	.word	0x2000024c
 8001578:	3fd00000 	.word	0x3fd00000
 800157c:	3fb00000 	.word	0x3fb00000

08001580 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
//	Check which timer trigered the callback
	if (htim == &htim4) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a08      	ldr	r2, [pc, #32]	@ (80015ac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d108      	bne.n	80015a2 <HAL_TIM_PeriodElapsedCallback+0x22>
		if (time_left_current_stage > 0) {
 8001590:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	dd04      	ble.n	80015a2 <HAL_TIM_PeriodElapsedCallback+0x22>
			time_left_current_stage--;
 8001598:	4b05      	ldr	r3, [pc, #20]	@ (80015b0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3b01      	subs	r3, #1
 800159e:	4a04      	ldr	r2, [pc, #16]	@ (80015b0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015a0:	6013      	str	r3, [r2, #0]
		}
	}
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	200002e8 	.word	0x200002e8
 80015b0:	20000378 	.word	0x20000378

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b5b0      	push	{r4, r5, r7, lr}
 80015b6:	b0a6      	sub	sp, #152	@ 0x98
 80015b8:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	enum e_state current_state;
	current_state = splash;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87


	struct s_profile profile;
	profile.preheat.temperature = 180;
 80015c0:	23b4      	movs	r3, #180	@ 0xb4
 80015c2:	667b      	str	r3, [r7, #100]	@ 0x64
	profile.preheat.time = 120;
 80015c4:	2378      	movs	r3, #120	@ 0x78
 80015c6:	66bb      	str	r3, [r7, #104]	@ 0x68
	profile.soak.temperature = 150;
 80015c8:	2396      	movs	r3, #150	@ 0x96
 80015ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
	profile.soak.time = 60;
 80015cc:	233c      	movs	r3, #60	@ 0x3c
 80015ce:	673b      	str	r3, [r7, #112]	@ 0x70
	profile.reflow.temperature = 230;
 80015d0:	23e6      	movs	r3, #230	@ 0xe6
 80015d2:	677b      	str	r3, [r7, #116]	@ 0x74
	profile.reflow.time = 120;
 80015d4:	2378      	movs	r3, #120	@ 0x78
 80015d6:	67bb      	str	r3, [r7, #120]	@ 0x78

	bool drawn = false;
 80015d8:	2300      	movs	r3, #0
 80015da:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

	int section_height = ILI9341_SCREEN_WIDTH/4;
 80015de:	2350      	movs	r3, #80	@ 0x50
 80015e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e4:	f000 fef6 	bl	80023d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e8:	f000 faaa 	bl	8001b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ec:	f000 fbf2 	bl	8001dd4 <MX_GPIO_Init>
  MX_DMA_Init();
 80015f0:	f000 fbd2 	bl	8001d98 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015f4:	f000 fba6 	bl	8001d44 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80015f8:	f000 fae8 	bl	8001bcc <MX_SPI1_Init>
  MX_SPI2_Init();
 80015fc:	f000 fb1c 	bl	8001c38 <MX_SPI2_Init>
  MX_TIM4_Init();
 8001600:	f000 fb52 	bl	8001ca8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	ILI9341_Init();
 8001604:	f7ff fc62 	bl	8000ecc <ILI9341_Init>

	HAL_TIM_Base_Start_IT(&htim4);
 8001608:	4815      	ldr	r0, [pc, #84]	@ (8001660 <main+0xac>)
 800160a:	f002 ff2f 	bl	800446c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	// Draw the screens based on the current_state
  	if (current_state == splash) {
 800160e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001612:	2b00      	cmp	r3, #0
 8001614:	d12c      	bne.n	8001670 <main+0xbc>
//  		ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
  	  ILI9341_FillScreen(BLACK);
 8001616:	2000      	movs	r0, #0
 8001618:	f7ff fe4e 	bl	80012b8 <ILI9341_FillScreen>
  		ILI9341_DrawText ("ABC", FONT4, 20, 150, WHITE, RED);
 800161c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2396      	movs	r3, #150	@ 0x96
 800162a:	2214      	movs	r2, #20
 800162c:	490d      	ldr	r1, [pc, #52]	@ (8001664 <main+0xb0>)
 800162e:	480e      	ldr	r0, [pc, #56]	@ (8001668 <main+0xb4>)
 8001630:	f7ff faf2 	bl	8000c18 <ILI9341_DrawText>
  	  ILI9341_DrawText("Solder Reflow Oven", FONT4, 5, 110, WHITE, BLACK);
 8001634:	2300      	movs	r3, #0
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	236e      	movs	r3, #110	@ 0x6e
 8001640:	2205      	movs	r2, #5
 8001642:	4908      	ldr	r1, [pc, #32]	@ (8001664 <main+0xb0>)
 8001644:	4809      	ldr	r0, [pc, #36]	@ (800166c <main+0xb8>)
 8001646:	f7ff fae7 	bl	8000c18 <ILI9341_DrawText>
  	  HAL_Delay(1000);
 800164a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800164e:	f000 ff23 	bl	8002498 <HAL_Delay>
  	  current_state = homepage;
 8001652:	2301      	movs	r3, #1
 8001654:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  	  drawn = false;
 8001658:	2300      	movs	r3, #0
 800165a:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800165e:	e7d6      	b.n	800160e <main+0x5a>
 8001660:	200002e8 	.word	0x200002e8
 8001664:	08007b28 	.word	0x08007b28
 8001668:	08007ab0 	.word	0x08007ab0
 800166c:	08007ab4 	.word	0x08007ab4
  	} else if (current_state == homepage) {
 8001670:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001674:	2b01      	cmp	r3, #1
 8001676:	f040 818f 	bne.w	8001998 <main+0x3e4>
//  		Show the current profile on the home screen
  		if (!drawn) {
 800167a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800167e:	f083 0301 	eor.w	r3, r3, #1
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0c2      	beq.n	800160e <main+0x5a>
    	  ILI9341_FillScreen(BLACK);
 8001688:	2000      	movs	r0, #0
 800168a:	f7ff fe15 	bl	80012b8 <ILI9341_FillScreen>
				ILI9341_DrawRectangle(0, 0*section_height, ILI9341_SCREEN_HEIGHT, section_height, RED);
 800168e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001692:	b29b      	uxth	r3, r3
 8001694:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001698:	9200      	str	r2, [sp, #0]
 800169a:	22f0      	movs	r2, #240	@ 0xf0
 800169c:	2100      	movs	r1, #0
 800169e:	2000      	movs	r0, #0
 80016a0:	f7ff fe96 	bl	80013d0 <ILI9341_DrawRectangle>
				ILI9341_DrawRectangle(0, 1*section_height, ILI9341_SCREEN_HEIGHT, section_height, ORANGE);
 80016a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016a8:	b299      	uxth	r1, r3
 80016aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	f64f 5220 	movw	r2, #64800	@ 0xfd20
 80016b4:	9200      	str	r2, [sp, #0]
 80016b6:	22f0      	movs	r2, #240	@ 0xf0
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff fe89 	bl	80013d0 <ILI9341_DrawRectangle>
				ILI9341_DrawRectangle(0, 2*section_height, ILI9341_SCREEN_HEIGHT, section_height, CYAN);
 80016be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	b299      	uxth	r1, r3
 80016c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80016d2:	9200      	str	r2, [sp, #0]
 80016d4:	22f0      	movs	r2, #240	@ 0xf0
 80016d6:	2000      	movs	r0, #0
 80016d8:	f7ff fe7a 	bl	80013d0 <ILI9341_DrawRectangle>
//				Titles
				ILI9341_DrawText ("Preheat", FONT4, 20, 0*section_height+(section_height-19)/2, WHITE, RED);
 80016dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016e0:	3b13      	subs	r3, #19
 80016e2:	0fda      	lsrs	r2, r3, #31
 80016e4:	4413      	add	r3, r2
 80016e6:	105b      	asrs	r3, r3, #1
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80016ee:	9201      	str	r2, [sp, #4]
 80016f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016f4:	9200      	str	r2, [sp, #0]
 80016f6:	2214      	movs	r2, #20
 80016f8:	49c3      	ldr	r1, [pc, #780]	@ (8001a08 <main+0x454>)
 80016fa:	48c4      	ldr	r0, [pc, #784]	@ (8001a0c <main+0x458>)
 80016fc:	f7ff fa8c 	bl	8000c18 <ILI9341_DrawText>
				ILI9341_DrawText ("Soak", FONT4, 20, 1*section_height+(section_height-19)/2, WHITE, ORANGE);
 8001700:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001704:	3b13      	subs	r3, #19
 8001706:	0fda      	lsrs	r2, r3, #31
 8001708:	4413      	add	r3, r2
 800170a:	105b      	asrs	r3, r3, #1
 800170c:	b29a      	uxth	r2, r3
 800170e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001712:	b29b      	uxth	r3, r3
 8001714:	4413      	add	r3, r2
 8001716:	b29b      	uxth	r3, r3
 8001718:	f64f 5220 	movw	r2, #64800	@ 0xfd20
 800171c:	9201      	str	r2, [sp, #4]
 800171e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001722:	9200      	str	r2, [sp, #0]
 8001724:	2214      	movs	r2, #20
 8001726:	49b8      	ldr	r1, [pc, #736]	@ (8001a08 <main+0x454>)
 8001728:	48b9      	ldr	r0, [pc, #740]	@ (8001a10 <main+0x45c>)
 800172a:	f7ff fa75 	bl	8000c18 <ILI9341_DrawText>
				ILI9341_DrawText ("Reflow", FONT4, 20, 2*section_height+(section_height-19)/2, BLACK, CYAN);
 800172e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001732:	b29b      	uxth	r3, r3
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	b29a      	uxth	r2, r3
 8001738:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800173c:	3b13      	subs	r3, #19
 800173e:	0fd9      	lsrs	r1, r3, #31
 8001740:	440b      	add	r3, r1
 8001742:	105b      	asrs	r3, r3, #1
 8001744:	b29b      	uxth	r3, r3
 8001746:	4413      	add	r3, r2
 8001748:	b29b      	uxth	r3, r3
 800174a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800174e:	9201      	str	r2, [sp, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	9200      	str	r2, [sp, #0]
 8001754:	2214      	movs	r2, #20
 8001756:	49ac      	ldr	r1, [pc, #688]	@ (8001a08 <main+0x454>)
 8001758:	48ae      	ldr	r0, [pc, #696]	@ (8001a14 <main+0x460>)
 800175a:	f7ff fa5d 	bl	8000c18 <ILI9341_DrawText>

//				Temps
				char preheat_temp[5];
				sprintf(preheat_temp, "%3dC", profile.preheat.temperature);
 800175e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001760:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001764:	49ac      	ldr	r1, [pc, #688]	@ (8001a18 <main+0x464>)
 8001766:	4618      	mov	r0, r3
 8001768:	f004 f85e 	bl	8005828 <siprintf>
				ILI9341_DrawText (preheat_temp, FONT4, 100, 0*section_height+(section_height-19)/2, WHITE, RED);
 800176c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001770:	3b13      	subs	r3, #19
 8001772:	0fda      	lsrs	r2, r3, #31
 8001774:	4413      	add	r3, r2
 8001776:	105b      	asrs	r3, r3, #1
 8001778:	b29b      	uxth	r3, r3
 800177a:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800177e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001782:	9201      	str	r2, [sp, #4]
 8001784:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001788:	9200      	str	r2, [sp, #0]
 800178a:	2264      	movs	r2, #100	@ 0x64
 800178c:	499e      	ldr	r1, [pc, #632]	@ (8001a08 <main+0x454>)
 800178e:	f7ff fa43 	bl	8000c18 <ILI9341_DrawText>
				char soak_temp[5];
				sprintf(soak_temp, "%3dC", profile.soak.temperature);
 8001792:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001794:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001798:	499f      	ldr	r1, [pc, #636]	@ (8001a18 <main+0x464>)
 800179a:	4618      	mov	r0, r3
 800179c:	f004 f844 	bl	8005828 <siprintf>
				ILI9341_DrawText (soak_temp, FONT4, 100, 1*section_height+(section_height-19)/2, WHITE, ORANGE);
 80017a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80017a4:	3b13      	subs	r3, #19
 80017a6:	0fda      	lsrs	r2, r3, #31
 80017a8:	4413      	add	r3, r2
 80017aa:	105b      	asrs	r3, r3, #1
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80017bc:	f64f 5220 	movw	r2, #64800	@ 0xfd20
 80017c0:	9201      	str	r2, [sp, #4]
 80017c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017c6:	9200      	str	r2, [sp, #0]
 80017c8:	2264      	movs	r2, #100	@ 0x64
 80017ca:	498f      	ldr	r1, [pc, #572]	@ (8001a08 <main+0x454>)
 80017cc:	f7ff fa24 	bl	8000c18 <ILI9341_DrawText>
				char reflow_temp[5];
				sprintf(reflow_temp, "%3dC", profile.reflow.temperature);
 80017d0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80017d2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017d6:	4990      	ldr	r1, [pc, #576]	@ (8001a18 <main+0x464>)
 80017d8:	4618      	mov	r0, r3
 80017da:	f004 f825 	bl	8005828 <siprintf>
				ILI9341_DrawText (reflow_temp, FONT4, 100, 2*section_height+(section_height-19)/2, BLACK, CYAN);
 80017de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80017ec:	3b13      	subs	r3, #19
 80017ee:	0fd9      	lsrs	r1, r3, #31
 80017f0:	440b      	add	r3, r1
 80017f2:	105b      	asrs	r3, r3, #1
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80017fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001802:	9201      	str	r2, [sp, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	9200      	str	r2, [sp, #0]
 8001808:	2264      	movs	r2, #100	@ 0x64
 800180a:	497f      	ldr	r1, [pc, #508]	@ (8001a08 <main+0x454>)
 800180c:	f7ff fa04 	bl	8000c18 <ILI9341_DrawText>

//				Times
				char preheat_time[8];
				sprintf(preheat_time, "%02i:%02i", (int) floor(profile.preheat.time/60), profile.preheat.time%60);
 8001810:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001812:	4a82      	ldr	r2, [pc, #520]	@ (8001a1c <main+0x468>)
 8001814:	fb82 1203 	smull	r1, r2, r2, r3
 8001818:	441a      	add	r2, r3
 800181a:	1152      	asrs	r2, r2, #5
 800181c:	17db      	asrs	r3, r3, #31
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fdef 	bl	8000404 <__aeabi_i2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f903 	bl	8000a38 <__aeabi_d2iz>
 8001832:	4604      	mov	r4, r0
 8001834:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001836:	4b79      	ldr	r3, [pc, #484]	@ (8001a1c <main+0x468>)
 8001838:	fb83 1302 	smull	r1, r3, r3, r2
 800183c:	4413      	add	r3, r2
 800183e:	1159      	asrs	r1, r3, #5
 8001840:	17d3      	asrs	r3, r2, #31
 8001842:	1ac9      	subs	r1, r1, r3
 8001844:	460b      	mov	r3, r1
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	1a5b      	subs	r3, r3, r1
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	1ad1      	subs	r1, r2, r3
 800184e:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001852:	460b      	mov	r3, r1
 8001854:	4622      	mov	r2, r4
 8001856:	4972      	ldr	r1, [pc, #456]	@ (8001a20 <main+0x46c>)
 8001858:	f003 ffe6 	bl	8005828 <siprintf>
				ILI9341_DrawText (preheat_time, FONT4, 180, 0*section_height+(section_height-19)/2, WHITE, RED);
 800185c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001860:	3b13      	subs	r3, #19
 8001862:	0fda      	lsrs	r2, r3, #31
 8001864:	4413      	add	r3, r2
 8001866:	105b      	asrs	r3, r3, #1
 8001868:	b29b      	uxth	r3, r3
 800186a:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800186e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001872:	9201      	str	r2, [sp, #4]
 8001874:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001878:	9200      	str	r2, [sp, #0]
 800187a:	22b4      	movs	r2, #180	@ 0xb4
 800187c:	4962      	ldr	r1, [pc, #392]	@ (8001a08 <main+0x454>)
 800187e:	f7ff f9cb 	bl	8000c18 <ILI9341_DrawText>
				char soak_time[8];
				sprintf(soak_time, "%02i:%02i", (int) floor(profile.soak.time/60), profile.soak.time%60);
 8001882:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001884:	4a65      	ldr	r2, [pc, #404]	@ (8001a1c <main+0x468>)
 8001886:	fb82 1203 	smull	r1, r2, r2, r3
 800188a:	441a      	add	r2, r3
 800188c:	1152      	asrs	r2, r2, #5
 800188e:	17db      	asrs	r3, r3, #31
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fdb6 	bl	8000404 <__aeabi_i2d>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f7ff f8ca 	bl	8000a38 <__aeabi_d2iz>
 80018a4:	4604      	mov	r4, r0
 80018a6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80018a8:	4b5c      	ldr	r3, [pc, #368]	@ (8001a1c <main+0x468>)
 80018aa:	fb83 1302 	smull	r1, r3, r3, r2
 80018ae:	4413      	add	r3, r2
 80018b0:	1159      	asrs	r1, r3, #5
 80018b2:	17d3      	asrs	r3, r2, #31
 80018b4:	1ac9      	subs	r1, r1, r3
 80018b6:	460b      	mov	r3, r1
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	1a5b      	subs	r3, r3, r1
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	1ad1      	subs	r1, r2, r3
 80018c0:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80018c4:	460b      	mov	r3, r1
 80018c6:	4622      	mov	r2, r4
 80018c8:	4955      	ldr	r1, [pc, #340]	@ (8001a20 <main+0x46c>)
 80018ca:	f003 ffad 	bl	8005828 <siprintf>
				ILI9341_DrawText (soak_time, FONT4, 180, 1*section_height+(section_height-19)/2, WHITE, ORANGE);
 80018ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018d2:	3b13      	subs	r3, #19
 80018d4:	0fda      	lsrs	r2, r3, #31
 80018d6:	4413      	add	r3, r2
 80018d8:	105b      	asrs	r3, r3, #1
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80018ea:	f64f 5220 	movw	r2, #64800	@ 0xfd20
 80018ee:	9201      	str	r2, [sp, #4]
 80018f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018f4:	9200      	str	r2, [sp, #0]
 80018f6:	22b4      	movs	r2, #180	@ 0xb4
 80018f8:	4943      	ldr	r1, [pc, #268]	@ (8001a08 <main+0x454>)
 80018fa:	f7ff f98d 	bl	8000c18 <ILI9341_DrawText>
				char reflow_time[8];
				sprintf(reflow_time, "%02i:%02i", (int) floor(profile.reflow.time/60), profile.reflow.time%60);
 80018fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001900:	4a46      	ldr	r2, [pc, #280]	@ (8001a1c <main+0x468>)
 8001902:	fb82 1203 	smull	r1, r2, r2, r3
 8001906:	441a      	add	r2, r3
 8001908:	1152      	asrs	r2, r2, #5
 800190a:	17db      	asrs	r3, r3, #31
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fd78 	bl	8000404 <__aeabi_i2d>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f88c 	bl	8000a38 <__aeabi_d2iz>
 8001920:	4604      	mov	r4, r0
 8001922:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001924:	4b3d      	ldr	r3, [pc, #244]	@ (8001a1c <main+0x468>)
 8001926:	fb83 1302 	smull	r1, r3, r3, r2
 800192a:	4413      	add	r3, r2
 800192c:	1159      	asrs	r1, r3, #5
 800192e:	17d3      	asrs	r3, r2, #31
 8001930:	1ac9      	subs	r1, r1, r3
 8001932:	460b      	mov	r3, r1
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	1a5b      	subs	r3, r3, r1
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	1ad1      	subs	r1, r2, r3
 800193c:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001940:	460b      	mov	r3, r1
 8001942:	4622      	mov	r2, r4
 8001944:	4936      	ldr	r1, [pc, #216]	@ (8001a20 <main+0x46c>)
 8001946:	f003 ff6f 	bl	8005828 <siprintf>
				ILI9341_DrawText (reflow_time, FONT4, 180, 2*section_height+(section_height-19)/2, BLACK, CYAN);
 800194a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800194e:	b29b      	uxth	r3, r3
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	b29a      	uxth	r2, r3
 8001954:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001958:	3b13      	subs	r3, #19
 800195a:	0fd9      	lsrs	r1, r3, #31
 800195c:	440b      	add	r3, r1
 800195e:	105b      	asrs	r3, r3, #1
 8001960:	b29b      	uxth	r3, r3
 8001962:	4413      	add	r3, r2
 8001964:	b29b      	uxth	r3, r3
 8001966:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800196a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800196e:	9201      	str	r2, [sp, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	9200      	str	r2, [sp, #0]
 8001974:	22b4      	movs	r2, #180	@ 0xb4
 8001976:	4924      	ldr	r1, [pc, #144]	@ (8001a08 <main+0x454>)
 8001978:	f7ff f94e 	bl	8000c18 <ILI9341_DrawText>

				drawn = true;
 800197c:	2301      	movs	r3, #1
 800197e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

//				Debug to switch to next screen - will use a button in due course
				HAL_Delay(2000);
 8001982:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001986:	f000 fd87 	bl	8002498 <HAL_Delay>
				current_state = preheat;
 800198a:	2302      	movs	r3, #2
 800198c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
				drawn = false;
 8001990:	2300      	movs	r3, #0
 8001992:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8001996:	e63a      	b.n	800160e <main+0x5a>

  		}
  	}else if (current_state == preheat) {
 8001998:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800199c:	2b02      	cmp	r3, #2
 800199e:	f040 8086 	bne.w	8001aae <main+0x4fa>
  		if (!drawn) {
 80019a2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80019a6:	f083 0301 	eor.w	r3, r3, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f43f ae2e 	beq.w	800160e <main+0x5a>
  			time_left_current_stage = profile.preheat.time;
 80019b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a24 <main+0x470>)
 80019b6:	6013      	str	r3, [r2, #0]
    	  ILI9341_FillScreen(BLACK);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f7ff fc7d 	bl	80012b8 <ILI9341_FillScreen>

//    	  Display the title block for the preheat screen
    	  char preheat_title[32];
				ILI9341_DrawRectangle(0, 0*section_height, ILI9341_SCREEN_HEIGHT, section_height, RED);
 80019be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80019c8:	9200      	str	r2, [sp, #0]
 80019ca:	22f0      	movs	r2, #240	@ 0xf0
 80019cc:	2100      	movs	r1, #0
 80019ce:	2000      	movs	r0, #0
 80019d0:	f7ff fcfe 	bl	80013d0 <ILI9341_DrawRectangle>
				sprintf(preheat_title, "Preheat - Target %dC", profile.preheat.temperature);
 80019d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80019d6:	463b      	mov	r3, r7
 80019d8:	4913      	ldr	r1, [pc, #76]	@ (8001a28 <main+0x474>)
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 ff24 	bl	8005828 <siprintf>
				ILI9341_DrawText (preheat_title, FONT4, 20, 0*section_height+(section_height-19)/2, WHITE, RED);
 80019e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80019e4:	3b13      	subs	r3, #19
 80019e6:	0fda      	lsrs	r2, r3, #31
 80019e8:	4413      	add	r3, r2
 80019ea:	105b      	asrs	r3, r3, #1
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4638      	mov	r0, r7
 80019f0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80019f4:	9201      	str	r2, [sp, #4]
 80019f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019fa:	9200      	str	r2, [sp, #0]
 80019fc:	2214      	movs	r2, #20
 80019fe:	4902      	ldr	r1, [pc, #8]	@ (8001a08 <main+0x454>)
 8001a00:	f7ff f90a 	bl	8000c18 <ILI9341_DrawText>

				while (time_left_current_stage > 0) {
 8001a04:	e049      	b.n	8001a9a <main+0x4e6>
 8001a06:	bf00      	nop
 8001a08:	08007b28 	.word	0x08007b28
 8001a0c:	08007ac8 	.word	0x08007ac8
 8001a10:	08007ad0 	.word	0x08007ad0
 8001a14:	08007ad8 	.word	0x08007ad8
 8001a18:	08007ae0 	.word	0x08007ae0
 8001a1c:	88888889 	.word	0x88888889
 8001a20:	08007ae8 	.word	0x08007ae8
 8001a24:	20000378 	.word	0x20000378
 8001a28:	08007af4 	.word	0x08007af4
					HAL_Delay(250);
 8001a2c:	20fa      	movs	r0, #250	@ 0xfa
 8001a2e:	f000 fd33 	bl	8002498 <HAL_Delay>
					char remaining_time_str[8];
					sprintf(remaining_time_str, "%02i:%02i", (int) floor(time_left_current_stage/60), time_left_current_stage%60);
 8001a32:	4b3d      	ldr	r3, [pc, #244]	@ (8001b28 <main+0x574>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a3d      	ldr	r2, [pc, #244]	@ (8001b2c <main+0x578>)
 8001a38:	fb82 1203 	smull	r1, r2, r2, r3
 8001a3c:	441a      	add	r2, r3
 8001a3e:	1152      	asrs	r2, r2, #5
 8001a40:	17db      	asrs	r3, r3, #31
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fcdd 	bl	8000404 <__aeabi_i2d>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	f7fe fff1 	bl	8000a38 <__aeabi_d2iz>
 8001a56:	4604      	mov	r4, r0
 8001a58:	4b33      	ldr	r3, [pc, #204]	@ (8001b28 <main+0x574>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b33      	ldr	r3, [pc, #204]	@ (8001b2c <main+0x578>)
 8001a5e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a62:	4413      	add	r3, r2
 8001a64:	1159      	asrs	r1, r3, #5
 8001a66:	17d3      	asrs	r3, r2, #31
 8001a68:	1ac9      	subs	r1, r1, r3
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	1a5b      	subs	r3, r3, r1
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	1ad1      	subs	r1, r2, r3
 8001a74:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4622      	mov	r2, r4
 8001a7c:	492c      	ldr	r1, [pc, #176]	@ (8001b30 <main+0x57c>)
 8001a7e:	f003 fed3 	bl	8005828 <siprintf>
					ILI9341_DrawText (remaining_time_str, FONT4, 80, 100, WHITE, BLACK);
 8001a82:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001a86:	2300      	movs	r3, #0
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	2364      	movs	r3, #100	@ 0x64
 8001a92:	2250      	movs	r2, #80	@ 0x50
 8001a94:	4927      	ldr	r1, [pc, #156]	@ (8001b34 <main+0x580>)
 8001a96:	f7ff f8bf 	bl	8000c18 <ILI9341_DrawText>
				while (time_left_current_stage > 0) {
 8001a9a:	4b23      	ldr	r3, [pc, #140]	@ (8001b28 <main+0x574>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	dcc4      	bgt.n	8001a2c <main+0x478>
				}

//				Display the current temperature
				int current_temp = 122;
 8001aa2:	237a      	movs	r3, #122	@ 0x7a
 8001aa4:	67fb      	str	r3, [r7, #124]	@ 0x7c

//				Display the countdown timer

				drawn = true;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8001aac:	e5af      	b.n	800160e <main+0x5a>
  		}

  	} else {
  	  ILI9341_FillScreen(WHITE);
 8001aae:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ab2:	f7ff fc01 	bl	80012b8 <ILI9341_FillScreen>
  	  HAL_Delay(100);
 8001ab6:	2064      	movs	r0, #100	@ 0x64
 8001ab8:	f000 fcee 	bl	8002498 <HAL_Delay>
  	  char str2 [32];
  	  MAX31855_Data data = MAX31855_ReadData();
 8001abc:	f107 0320 	add.w	r3, r7, #32
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fce1 	bl	8001488 <MAX31855_ReadData>
  	  if (data.fault == MAX31855_NO_FAULT) {
 8001ac6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d115      	bne.n	8001afa <main+0x546>
  		  snprintf(str2, sizeof str2, "Int: %.2f Ext: %.2f", data.internalTemperature, data.temperature);
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fca9 	bl	8000428 <__aeabi_f2d>
 8001ad6:	4604      	mov	r4, r0
 8001ad8:	460d      	mov	r5, r1
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fca3 	bl	8000428 <__aeabi_f2d>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4638      	mov	r0, r7
 8001ae8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001aec:	e9cd 4500 	strd	r4, r5, [sp]
 8001af0:	4a11      	ldr	r2, [pc, #68]	@ (8001b38 <main+0x584>)
 8001af2:	2120      	movs	r1, #32
 8001af4:	f003 fe64 	bl	80057c0 <sniprintf>
 8001af8:	e005      	b.n	8001b06 <main+0x552>
  	  } else {
  	  	snprintf(str2, sizeof str2, "Fault");
 8001afa:	463b      	mov	r3, r7
 8001afc:	4a0f      	ldr	r2, [pc, #60]	@ (8001b3c <main+0x588>)
 8001afe:	2120      	movs	r1, #32
 8001b00:	4618      	mov	r0, r3
 8001b02:	f003 fe5d 	bl	80057c0 <sniprintf>
			}
  	  ILI9341_DrawText(str2, FONT4, 5, 110, BLACK, WHITE);
 8001b06:	4638      	mov	r0, r7
 8001b08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	236e      	movs	r3, #110	@ 0x6e
 8001b14:	2205      	movs	r2, #5
 8001b16:	4907      	ldr	r1, [pc, #28]	@ (8001b34 <main+0x580>)
 8001b18:	f7ff f87e 	bl	8000c18 <ILI9341_DrawText>
  	  HAL_Delay(500);
 8001b1c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b20:	f000 fcba 	bl	8002498 <HAL_Delay>
  	if (current_state == splash) {
 8001b24:	e573      	b.n	800160e <main+0x5a>
 8001b26:	bf00      	nop
 8001b28:	20000378 	.word	0x20000378
 8001b2c:	88888889 	.word	0x88888889
 8001b30:	08007ae8 	.word	0x08007ae8
 8001b34:	08007b28 	.word	0x08007b28
 8001b38:	08007b0c 	.word	0x08007b0c
 8001b3c:	08007b20 	.word	0x08007b20

08001b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b090      	sub	sp, #64	@ 0x40
 8001b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b46:	f107 0318 	add.w	r3, r7, #24
 8001b4a:	2228      	movs	r2, #40	@ 0x28
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 fecd 	bl	80058ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b62:	2301      	movs	r3, #1
 8001b64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b70:	2301      	movs	r3, #1
 8001b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b74:	2302      	movs	r3, #2
 8001b76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b7e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b84:	f107 0318 	add.w	r3, r7, #24
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f001 f941 	bl	8002e10 <HAL_RCC_OscConfig>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b94:	f000 f9a4 	bl	8001ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b98:	230f      	movs	r3, #15
 8001b9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ba4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ba8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f001 fbae 	bl	8003314 <HAL_RCC_ClockConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001bbe:	f000 f98f 	bl	8001ee0 <Error_Handler>
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	3740      	adds	r7, #64	@ 0x40
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bd0:	4b17      	ldr	r3, [pc, #92]	@ (8001c30 <MX_SPI1_Init+0x64>)
 8001bd2:	4a18      	ldr	r2, [pc, #96]	@ (8001c34 <MX_SPI1_Init+0x68>)
 8001bd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bd6:	4b16      	ldr	r3, [pc, #88]	@ (8001c30 <MX_SPI1_Init+0x64>)
 8001bd8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bde:	4b14      	ldr	r3, [pc, #80]	@ (8001c30 <MX_SPI1_Init+0x64>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001be4:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <MX_SPI1_Init+0x64>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bea:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <MX_SPI1_Init+0x64>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <MX_SPI1_Init+0x64>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <MX_SPI1_Init+0x64>)
 8001bf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bfc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <MX_SPI1_Init+0x64>)
 8001c00:	2208      	movs	r2, #8
 8001c02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c04:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <MX_SPI1_Init+0x64>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c0a:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <MX_SPI1_Init+0x64>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c10:	4b07      	ldr	r3, [pc, #28]	@ (8001c30 <MX_SPI1_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <MX_SPI1_Init+0x64>)
 8001c18:	220a      	movs	r2, #10
 8001c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c1c:	4804      	ldr	r0, [pc, #16]	@ (8001c30 <MX_SPI1_Init+0x64>)
 8001c1e:	f001 fd07 	bl	8003630 <HAL_SPI_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c28:	f000 f95a 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	200001f4 	.word	0x200001f4
 8001c34:	40013000 	.word	0x40013000

08001c38 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ca0 <MX_SPI2_Init+0x68>)
 8001c3e:	4a19      	ldr	r2, [pc, #100]	@ (8001ca4 <MX_SPI2_Init+0x6c>)
 8001c40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c42:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <MX_SPI2_Init+0x68>)
 8001c44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001c4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <MX_SPI2_Init+0x68>)
 8001c4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c50:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c52:	4b13      	ldr	r3, [pc, #76]	@ (8001ca0 <MX_SPI2_Init+0x68>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c58:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <MX_SPI2_Init+0x68>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <MX_SPI2_Init+0x68>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca0 <MX_SPI2_Init+0x68>)
 8001c66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c6a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <MX_SPI2_Init+0x68>)
 8001c6e:	2238      	movs	r2, #56	@ 0x38
 8001c70:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <MX_SPI2_Init+0x68>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c78:	4b09      	ldr	r3, [pc, #36]	@ (8001ca0 <MX_SPI2_Init+0x68>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <MX_SPI2_Init+0x68>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c84:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <MX_SPI2_Init+0x68>)
 8001c86:	220a      	movs	r2, #10
 8001c88:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c8a:	4805      	ldr	r0, [pc, #20]	@ (8001ca0 <MX_SPI2_Init+0x68>)
 8001c8c:	f001 fcd0 	bl	8003630 <HAL_SPI_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001c96:	f000 f923 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000024c 	.word	0x2000024c
 8001ca4:	40003800 	.word	0x40003800

08001ca8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cae:	f107 0308 	add.w	r3, r7, #8
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d3c <MX_TIM4_Init+0x94>)
 8001cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d40 <MX_TIM4_Init+0x98>)
 8001cc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8001cca:	4b1c      	ldr	r3, [pc, #112]	@ (8001d3c <MX_TIM4_Init+0x94>)
 8001ccc:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001cd0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <MX_TIM4_Init+0x94>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9990-1;
 8001cd8:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <MX_TIM4_Init+0x94>)
 8001cda:	f242 7205 	movw	r2, #9989	@ 0x2705
 8001cde:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce0:	4b16      	ldr	r3, [pc, #88]	@ (8001d3c <MX_TIM4_Init+0x94>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce6:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <MX_TIM4_Init+0x94>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cec:	4813      	ldr	r0, [pc, #76]	@ (8001d3c <MX_TIM4_Init+0x94>)
 8001cee:	f002 fb6d 	bl	80043cc <HAL_TIM_Base_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001cf8:	f000 f8f2 	bl	8001ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d02:	f107 0308 	add.w	r3, r7, #8
 8001d06:	4619      	mov	r1, r3
 8001d08:	480c      	ldr	r0, [pc, #48]	@ (8001d3c <MX_TIM4_Init+0x94>)
 8001d0a:	f002 fd09 	bl	8004720 <HAL_TIM_ConfigClockSource>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001d14:	f000 f8e4 	bl	8001ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d20:	463b      	mov	r3, r7
 8001d22:	4619      	mov	r1, r3
 8001d24:	4805      	ldr	r0, [pc, #20]	@ (8001d3c <MX_TIM4_Init+0x94>)
 8001d26:	f002 fedf 	bl	8004ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001d30:	f000 f8d6 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200002e8 	.word	0x200002e8
 8001d40:	40000800 	.word	0x40000800

08001d44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d48:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	@ (8001d94 <MX_USART2_UART_Init+0x50>)
 8001d4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d68:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d74:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d7a:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d7c:	f002 ff24 	bl	8004bc8 <HAL_UART_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d86:	f000 f8ab 	bl	8001ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000330 	.word	0x20000330
 8001d94:	40004400 	.word	0x40004400

08001d98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <MX_DMA_Init+0x38>)
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd0 <MX_DMA_Init+0x38>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6153      	str	r3, [r2, #20]
 8001daa:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <MX_DMA_Init+0x38>)
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2100      	movs	r1, #0
 8001dba:	200d      	movs	r0, #13
 8001dbc:	f000 fc67 	bl	800268e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001dc0:	200d      	movs	r0, #13
 8001dc2:	f000 fc80 	bl	80026c6 <HAL_NVIC_EnableIRQ>

}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dda:	f107 0310 	add.w	r3, r7, #16
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de8:	4b39      	ldr	r3, [pc, #228]	@ (8001ed0 <MX_GPIO_Init+0xfc>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	4a38      	ldr	r2, [pc, #224]	@ (8001ed0 <MX_GPIO_Init+0xfc>)
 8001dee:	f043 0310 	orr.w	r3, r3, #16
 8001df2:	6193      	str	r3, [r2, #24]
 8001df4:	4b36      	ldr	r3, [pc, #216]	@ (8001ed0 <MX_GPIO_Init+0xfc>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e00:	4b33      	ldr	r3, [pc, #204]	@ (8001ed0 <MX_GPIO_Init+0xfc>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4a32      	ldr	r2, [pc, #200]	@ (8001ed0 <MX_GPIO_Init+0xfc>)
 8001e06:	f043 0320 	orr.w	r3, r3, #32
 8001e0a:	6193      	str	r3, [r2, #24]
 8001e0c:	4b30      	ldr	r3, [pc, #192]	@ (8001ed0 <MX_GPIO_Init+0xfc>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e18:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed0 <MX_GPIO_Init+0xfc>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8001ed0 <MX_GPIO_Init+0xfc>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	6193      	str	r3, [r2, #24]
 8001e24:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed0 <MX_GPIO_Init+0xfc>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e30:	4b27      	ldr	r3, [pc, #156]	@ (8001ed0 <MX_GPIO_Init+0xfc>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a26      	ldr	r2, [pc, #152]	@ (8001ed0 <MX_GPIO_Init+0xfc>)
 8001e36:	f043 0308 	orr.w	r3, r3, #8
 8001e3a:	6193      	str	r3, [r2, #24]
 8001e3c:	4b24      	ldr	r3, [pc, #144]	@ (8001ed0 <MX_GPIO_Init+0xfc>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e4e:	4821      	ldr	r0, [pc, #132]	@ (8001ed4 <MX_GPIO_Init+0x100>)
 8001e50:	f000 ffc6 	bl	8002de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 8001e54:	2200      	movs	r2, #0
 8001e56:	f240 4103 	movw	r1, #1027	@ 0x403
 8001e5a:	481f      	ldr	r0, [pc, #124]	@ (8001ed8 <MX_GPIO_Init+0x104>)
 8001e5c:	f000 ffc0 	bl	8002de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001e60:	2200      	movs	r2, #0
 8001e62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e66:	481d      	ldr	r0, [pc, #116]	@ (8001edc <MX_GPIO_Init+0x108>)
 8001e68:	f000 ffba 	bl	8002de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e72:	2301      	movs	r3, #1
 8001e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	4619      	mov	r1, r3
 8001e84:	4813      	ldr	r0, [pc, #76]	@ (8001ed4 <MX_GPIO_Init+0x100>)
 8001e86:	f000 fe27 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 8001e8a:	f240 4303 	movw	r3, #1027	@ 0x403
 8001e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480d      	ldr	r0, [pc, #52]	@ (8001ed8 <MX_GPIO_Init+0x104>)
 8001ea4:	f000 fe18 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ea8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f107 0310 	add.w	r3, r7, #16
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4806      	ldr	r0, [pc, #24]	@ (8001edc <MX_GPIO_Init+0x108>)
 8001ec2:	f000 fe09 	bl	8002ad8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ec6:	bf00      	nop
 8001ec8:	3720      	adds	r7, #32
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40011000 	.word	0x40011000
 8001ed8:	40010c00 	.word	0x40010c00
 8001edc:	40010800 	.word	0x40010800

08001ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee4:	b672      	cpsid	i
}
 8001ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <Error_Handler+0x8>

08001eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ef2:	4b15      	ldr	r3, [pc, #84]	@ (8001f48 <HAL_MspInit+0x5c>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	4a14      	ldr	r2, [pc, #80]	@ (8001f48 <HAL_MspInit+0x5c>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6193      	str	r3, [r2, #24]
 8001efe:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <HAL_MspInit+0x5c>)
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f48 <HAL_MspInit+0x5c>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f48 <HAL_MspInit+0x5c>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f14:	61d3      	str	r3, [r2, #28]
 8001f16:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <HAL_MspInit+0x5c>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f22:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_MspInit+0x60>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <HAL_MspInit+0x60>)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010000 	.word	0x40010000

08001f50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	@ 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0318 	add.w	r3, r7, #24
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a44      	ldr	r2, [pc, #272]	@ (800207c <HAL_SPI_MspInit+0x12c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d14a      	bne.n	8002006 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f70:	4b43      	ldr	r3, [pc, #268]	@ (8002080 <HAL_SPI_MspInit+0x130>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	4a42      	ldr	r2, [pc, #264]	@ (8002080 <HAL_SPI_MspInit+0x130>)
 8001f76:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f7a:	6193      	str	r3, [r2, #24]
 8001f7c:	4b40      	ldr	r3, [pc, #256]	@ (8002080 <HAL_SPI_MspInit+0x130>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f88:	4b3d      	ldr	r3, [pc, #244]	@ (8002080 <HAL_SPI_MspInit+0x130>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	4a3c      	ldr	r2, [pc, #240]	@ (8002080 <HAL_SPI_MspInit+0x130>)
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	6193      	str	r3, [r2, #24]
 8001f94:	4b3a      	ldr	r3, [pc, #232]	@ (8002080 <HAL_SPI_MspInit+0x130>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001fa0:	23a0      	movs	r3, #160	@ 0xa0
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fac:	f107 0318 	add.w	r3, r7, #24
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4834      	ldr	r0, [pc, #208]	@ (8002084 <HAL_SPI_MspInit+0x134>)
 8001fb4:	f000 fd90 	bl	8002ad8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001fb8:	4b33      	ldr	r3, [pc, #204]	@ (8002088 <HAL_SPI_MspInit+0x138>)
 8001fba:	4a34      	ldr	r2, [pc, #208]	@ (800208c <HAL_SPI_MspInit+0x13c>)
 8001fbc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fbe:	4b32      	ldr	r3, [pc, #200]	@ (8002088 <HAL_SPI_MspInit+0x138>)
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc4:	4b30      	ldr	r3, [pc, #192]	@ (8002088 <HAL_SPI_MspInit+0x138>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fca:	4b2f      	ldr	r3, [pc, #188]	@ (8002088 <HAL_SPI_MspInit+0x138>)
 8001fcc:	2280      	movs	r2, #128	@ 0x80
 8001fce:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8002088 <HAL_SPI_MspInit+0x138>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8002088 <HAL_SPI_MspInit+0x138>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002088 <HAL_SPI_MspInit+0x138>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fe2:	4b29      	ldr	r3, [pc, #164]	@ (8002088 <HAL_SPI_MspInit+0x138>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001fe8:	4827      	ldr	r0, [pc, #156]	@ (8002088 <HAL_SPI_MspInit+0x138>)
 8001fea:	f000 fb87 	bl	80026fc <HAL_DMA_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8001ff4:	f7ff ff74 	bl	8001ee0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a23      	ldr	r2, [pc, #140]	@ (8002088 <HAL_SPI_MspInit+0x138>)
 8001ffc:	649a      	str	r2, [r3, #72]	@ 0x48
 8001ffe:	4a22      	ldr	r2, [pc, #136]	@ (8002088 <HAL_SPI_MspInit+0x138>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002004:	e036      	b.n	8002074 <HAL_SPI_MspInit+0x124>
  else if(hspi->Instance==SPI2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a21      	ldr	r2, [pc, #132]	@ (8002090 <HAL_SPI_MspInit+0x140>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d131      	bne.n	8002074 <HAL_SPI_MspInit+0x124>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002010:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <HAL_SPI_MspInit+0x130>)
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	4a1a      	ldr	r2, [pc, #104]	@ (8002080 <HAL_SPI_MspInit+0x130>)
 8002016:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800201a:	61d3      	str	r3, [r2, #28]
 800201c:	4b18      	ldr	r3, [pc, #96]	@ (8002080 <HAL_SPI_MspInit+0x130>)
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002028:	4b15      	ldr	r3, [pc, #84]	@ (8002080 <HAL_SPI_MspInit+0x130>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4a14      	ldr	r2, [pc, #80]	@ (8002080 <HAL_SPI_MspInit+0x130>)
 800202e:	f043 0308 	orr.w	r3, r3, #8
 8002032:	6193      	str	r3, [r2, #24]
 8002034:	4b12      	ldr	r3, [pc, #72]	@ (8002080 <HAL_SPI_MspInit+0x130>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002040:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204e:	f107 0318 	add.w	r3, r7, #24
 8002052:	4619      	mov	r1, r3
 8002054:	480f      	ldr	r0, [pc, #60]	@ (8002094 <HAL_SPI_MspInit+0x144>)
 8002056:	f000 fd3f 	bl	8002ad8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800205a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800205e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002068:	f107 0318 	add.w	r3, r7, #24
 800206c:	4619      	mov	r1, r3
 800206e:	4809      	ldr	r0, [pc, #36]	@ (8002094 <HAL_SPI_MspInit+0x144>)
 8002070:	f000 fd32 	bl	8002ad8 <HAL_GPIO_Init>
}
 8002074:	bf00      	nop
 8002076:	3728      	adds	r7, #40	@ 0x28
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40013000 	.word	0x40013000
 8002080:	40021000 	.word	0x40021000
 8002084:	40010800 	.word	0x40010800
 8002088:	200002a4 	.word	0x200002a4
 800208c:	40020030 	.word	0x40020030
 8002090:	40003800 	.word	0x40003800
 8002094:	40010c00 	.word	0x40010c00

08002098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0d      	ldr	r2, [pc, #52]	@ (80020dc <HAL_TIM_Base_MspInit+0x44>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d113      	bne.n	80020d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020aa:	4b0d      	ldr	r3, [pc, #52]	@ (80020e0 <HAL_TIM_Base_MspInit+0x48>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	4a0c      	ldr	r2, [pc, #48]	@ (80020e0 <HAL_TIM_Base_MspInit+0x48>)
 80020b0:	f043 0304 	orr.w	r3, r3, #4
 80020b4:	61d3      	str	r3, [r2, #28]
 80020b6:	4b0a      	ldr	r3, [pc, #40]	@ (80020e0 <HAL_TIM_Base_MspInit+0x48>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	201e      	movs	r0, #30
 80020c8:	f000 fae1 	bl	800268e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80020cc:	201e      	movs	r0, #30
 80020ce:	f000 fafa 	bl	80026c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40000800 	.word	0x40000800
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1b      	ldr	r2, [pc, #108]	@ (800216c <HAL_UART_MspInit+0x88>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d12f      	bne.n	8002164 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002104:	4b1a      	ldr	r3, [pc, #104]	@ (8002170 <HAL_UART_MspInit+0x8c>)
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	4a19      	ldr	r2, [pc, #100]	@ (8002170 <HAL_UART_MspInit+0x8c>)
 800210a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800210e:	61d3      	str	r3, [r2, #28]
 8002110:	4b17      	ldr	r3, [pc, #92]	@ (8002170 <HAL_UART_MspInit+0x8c>)
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211c:	4b14      	ldr	r3, [pc, #80]	@ (8002170 <HAL_UART_MspInit+0x8c>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a13      	ldr	r2, [pc, #76]	@ (8002170 <HAL_UART_MspInit+0x8c>)
 8002122:	f043 0304 	orr.w	r3, r3, #4
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <HAL_UART_MspInit+0x8c>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002134:	2304      	movs	r3, #4
 8002136:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800213c:	2303      	movs	r3, #3
 800213e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	f107 0310 	add.w	r3, r7, #16
 8002144:	4619      	mov	r1, r3
 8002146:	480b      	ldr	r0, [pc, #44]	@ (8002174 <HAL_UART_MspInit+0x90>)
 8002148:	f000 fcc6 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800214c:	2308      	movs	r3, #8
 800214e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	4619      	mov	r1, r3
 800215e:	4805      	ldr	r0, [pc, #20]	@ (8002174 <HAL_UART_MspInit+0x90>)
 8002160:	f000 fcba 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002164:	bf00      	nop
 8002166:	3720      	adds	r7, #32
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40004400 	.word	0x40004400
 8002170:	40021000 	.word	0x40021000
 8002174:	40010800 	.word	0x40010800

08002178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <NMI_Handler+0x4>

08002180 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002184:	bf00      	nop
 8002186:	e7fd      	b.n	8002184 <HardFault_Handler+0x4>

08002188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <MemManage_Handler+0x4>

08002190 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <BusFault_Handler+0x4>

08002198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <UsageFault_Handler+0x4>

080021a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021c8:	f000 f94a 	bl	8002460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80021d4:	4802      	ldr	r0, [pc, #8]	@ (80021e0 <DMA1_Channel3_IRQHandler+0x10>)
 80021d6:	f000 fb4b 	bl	8002870 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200002a4 	.word	0x200002a4

080021e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021e8:	4802      	ldr	r0, [pc, #8]	@ (80021f4 <TIM4_IRQHandler+0x10>)
 80021ea:	f002 f991 	bl	8004510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200002e8 	.word	0x200002e8

080021f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return 1;
 80021fc:	2301      	movs	r3, #1
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr

08002206 <_kill>:

int _kill(int pid, int sig)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002210:	f003 fbc0 	bl	8005994 <__errno>
 8002214:	4603      	mov	r3, r0
 8002216:	2216      	movs	r2, #22
 8002218:	601a      	str	r2, [r3, #0]
  return -1;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_exit>:

void _exit (int status)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800222e:	f04f 31ff 	mov.w	r1, #4294967295
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ffe7 	bl	8002206 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <_exit+0x12>

0800223c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	e00a      	b.n	8002264 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800224e:	f3af 8000 	nop.w
 8002252:	4601      	mov	r1, r0
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	60ba      	str	r2, [r7, #8]
 800225a:	b2ca      	uxtb	r2, r1
 800225c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	3301      	adds	r3, #1
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	dbf0      	blt.n	800224e <_read+0x12>
  }

  return len;
 800226c:	687b      	ldr	r3, [r7, #4]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e009      	b.n	800229c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	60ba      	str	r2, [r7, #8]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	3301      	adds	r3, #1
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	dbf1      	blt.n	8002288 <_write+0x12>
  }
  return len;
 80022a4:	687b      	ldr	r3, [r7, #4]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <_close>:

int _close(int file)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022d4:	605a      	str	r2, [r3, #4]
  return 0;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <_isatty>:

int _isatty(int file)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022ea:	2301      	movs	r3, #1
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b085      	sub	sp, #20
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
	...

08002310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002318:	4a14      	ldr	r2, [pc, #80]	@ (800236c <_sbrk+0x5c>)
 800231a:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <_sbrk+0x60>)
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002324:	4b13      	ldr	r3, [pc, #76]	@ (8002374 <_sbrk+0x64>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800232c:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <_sbrk+0x64>)
 800232e:	4a12      	ldr	r2, [pc, #72]	@ (8002378 <_sbrk+0x68>)
 8002330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002332:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <_sbrk+0x64>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	429a      	cmp	r2, r3
 800233e:	d207      	bcs.n	8002350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002340:	f003 fb28 	bl	8005994 <__errno>
 8002344:	4603      	mov	r3, r0
 8002346:	220c      	movs	r2, #12
 8002348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295
 800234e:	e009      	b.n	8002364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002350:	4b08      	ldr	r3, [pc, #32]	@ (8002374 <_sbrk+0x64>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002356:	4b07      	ldr	r3, [pc, #28]	@ (8002374 <_sbrk+0x64>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	4a05      	ldr	r2, [pc, #20]	@ (8002374 <_sbrk+0x64>)
 8002360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002362:	68fb      	ldr	r3, [r7, #12]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20005000 	.word	0x20005000
 8002370:	00000400 	.word	0x00000400
 8002374:	2000037c 	.word	0x2000037c
 8002378:	200004d0 	.word	0x200004d0

0800237c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002388:	f7ff fff8 	bl	800237c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800238c:	480b      	ldr	r0, [pc, #44]	@ (80023bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800238e:	490c      	ldr	r1, [pc, #48]	@ (80023c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002390:	4a0c      	ldr	r2, [pc, #48]	@ (80023c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002394:	e002      	b.n	800239c <LoopCopyDataInit>

08002396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800239a:	3304      	adds	r3, #4

0800239c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800239c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a0:	d3f9      	bcc.n	8002396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023a2:	4a09      	ldr	r2, [pc, #36]	@ (80023c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80023a4:	4c09      	ldr	r4, [pc, #36]	@ (80023cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a8:	e001      	b.n	80023ae <LoopFillZerobss>

080023aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023ac:	3204      	adds	r2, #4

080023ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b0:	d3fb      	bcc.n	80023aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023b2:	f003 faf5 	bl	80059a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023b6:	f7ff f8fd 	bl	80015b4 <main>
  bx lr
 80023ba:	4770      	bx	lr
  ldr r0, =_sdata
 80023bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80023c4:	08009018 	.word	0x08009018
  ldr r2, =_sbss
 80023c8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80023cc:	200004d0 	.word	0x200004d0

080023d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023d0:	e7fe      	b.n	80023d0 <ADC1_2_IRQHandler>
	...

080023d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023d8:	4b08      	ldr	r3, [pc, #32]	@ (80023fc <HAL_Init+0x28>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a07      	ldr	r2, [pc, #28]	@ (80023fc <HAL_Init+0x28>)
 80023de:	f043 0310 	orr.w	r3, r3, #16
 80023e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e4:	2003      	movs	r0, #3
 80023e6:	f000 f947 	bl	8002678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ea:	200f      	movs	r0, #15
 80023ec:	f000 f808 	bl	8002400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023f0:	f7ff fd7c 	bl	8001eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40022000 	.word	0x40022000

08002400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002408:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <HAL_InitTick+0x54>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b12      	ldr	r3, [pc, #72]	@ (8002458 <HAL_InitTick+0x58>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	4619      	mov	r1, r3
 8002412:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002416:	fbb3 f3f1 	udiv	r3, r3, r1
 800241a:	fbb2 f3f3 	udiv	r3, r2, r3
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f95f 	bl	80026e2 <HAL_SYSTICK_Config>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e00e      	b.n	800244c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b0f      	cmp	r3, #15
 8002432:	d80a      	bhi.n	800244a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002434:	2200      	movs	r2, #0
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	f000 f927 	bl	800268e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002440:	4a06      	ldr	r2, [pc, #24]	@ (800245c <HAL_InitTick+0x5c>)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	e000      	b.n	800244c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000004 	.word	0x20000004
 8002458:	2000000c 	.word	0x2000000c
 800245c:	20000008 	.word	0x20000008

08002460 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002464:	4b05      	ldr	r3, [pc, #20]	@ (800247c <HAL_IncTick+0x1c>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <HAL_IncTick+0x20>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4413      	add	r3, r2
 8002470:	4a03      	ldr	r2, [pc, #12]	@ (8002480 <HAL_IncTick+0x20>)
 8002472:	6013      	str	r3, [r2, #0]
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr
 800247c:	2000000c 	.word	0x2000000c
 8002480:	20000380 	.word	0x20000380

08002484 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return uwTick;
 8002488:	4b02      	ldr	r3, [pc, #8]	@ (8002494 <HAL_GetTick+0x10>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	20000380 	.word	0x20000380

08002498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a0:	f7ff fff0 	bl	8002484 <HAL_GetTick>
 80024a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d005      	beq.n	80024be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024b2:	4b0a      	ldr	r3, [pc, #40]	@ (80024dc <HAL_Delay+0x44>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024be:	bf00      	nop
 80024c0:	f7ff ffe0 	bl	8002484 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d8f7      	bhi.n	80024c0 <HAL_Delay+0x28>
  {
  }
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	2000000c 	.word	0x2000000c

080024e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002524 <__NVIC_SetPriorityGrouping+0x44>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024fc:	4013      	ands	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002508:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800250c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002512:	4a04      	ldr	r2, [pc, #16]	@ (8002524 <__NVIC_SetPriorityGrouping+0x44>)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	60d3      	str	r3, [r2, #12]
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800252c:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <__NVIC_GetPriorityGrouping+0x18>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	f003 0307 	and.w	r3, r3, #7
}
 8002536:	4618      	mov	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	2b00      	cmp	r3, #0
 8002554:	db0b      	blt.n	800256e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	4906      	ldr	r1, [pc, #24]	@ (8002578 <__NVIC_EnableIRQ+0x34>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	2001      	movs	r0, #1
 8002566:	fa00 f202 	lsl.w	r2, r0, r2
 800256a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	e000e100 	.word	0xe000e100

0800257c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	2b00      	cmp	r3, #0
 800258e:	db0a      	blt.n	80025a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	b2da      	uxtb	r2, r3
 8002594:	490c      	ldr	r1, [pc, #48]	@ (80025c8 <__NVIC_SetPriority+0x4c>)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	0112      	lsls	r2, r2, #4
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	440b      	add	r3, r1
 80025a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a4:	e00a      	b.n	80025bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4908      	ldr	r1, [pc, #32]	@ (80025cc <__NVIC_SetPriority+0x50>)
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	3b04      	subs	r3, #4
 80025b4:	0112      	lsls	r2, r2, #4
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	440b      	add	r3, r1
 80025ba:	761a      	strb	r2, [r3, #24]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000e100 	.word	0xe000e100
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	@ 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f1c3 0307 	rsb	r3, r3, #7
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	bf28      	it	cs
 80025ee:	2304      	movcs	r3, #4
 80025f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3304      	adds	r3, #4
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	d902      	bls.n	8002600 <NVIC_EncodePriority+0x30>
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3b03      	subs	r3, #3
 80025fe:	e000      	b.n	8002602 <NVIC_EncodePriority+0x32>
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002604:	f04f 32ff 	mov.w	r2, #4294967295
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43da      	mvns	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	401a      	ands	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002618:	f04f 31ff 	mov.w	r1, #4294967295
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa01 f303 	lsl.w	r3, r1, r3
 8002622:	43d9      	mvns	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	4313      	orrs	r3, r2
         );
}
 800262a:	4618      	mov	r0, r3
 800262c:	3724      	adds	r7, #36	@ 0x24
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002644:	d301      	bcc.n	800264a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002646:	2301      	movs	r3, #1
 8002648:	e00f      	b.n	800266a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264a:	4a0a      	ldr	r2, [pc, #40]	@ (8002674 <SysTick_Config+0x40>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3b01      	subs	r3, #1
 8002650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002652:	210f      	movs	r1, #15
 8002654:	f04f 30ff 	mov.w	r0, #4294967295
 8002658:	f7ff ff90 	bl	800257c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800265c:	4b05      	ldr	r3, [pc, #20]	@ (8002674 <SysTick_Config+0x40>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002662:	4b04      	ldr	r3, [pc, #16]	@ (8002674 <SysTick_Config+0x40>)
 8002664:	2207      	movs	r2, #7
 8002666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	e000e010 	.word	0xe000e010

08002678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ff2d 	bl	80024e0 <__NVIC_SetPriorityGrouping>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
 800269a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a0:	f7ff ff42 	bl	8002528 <__NVIC_GetPriorityGrouping>
 80026a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	6978      	ldr	r0, [r7, #20]
 80026ac:	f7ff ff90 	bl	80025d0 <NVIC_EncodePriority>
 80026b0:	4602      	mov	r2, r0
 80026b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff5f 	bl	800257c <__NVIC_SetPriority>
}
 80026be:	bf00      	nop
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	4603      	mov	r3, r0
 80026ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff35 	bl	8002544 <__NVIC_EnableIRQ>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ffa2 	bl	8002634 <SysTick_Config>
 80026f0:	4603      	mov	r3, r0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e043      	b.n	800279a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	4b22      	ldr	r3, [pc, #136]	@ (80027a4 <HAL_DMA_Init+0xa8>)
 800271a:	4413      	add	r3, r2
 800271c:	4a22      	ldr	r2, [pc, #136]	@ (80027a8 <HAL_DMA_Init+0xac>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	009a      	lsls	r2, r3, #2
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a1f      	ldr	r2, [pc, #124]	@ (80027ac <HAL_DMA_Init+0xb0>)
 800272e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002746:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800274a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002754:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002760:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	bffdfff8 	.word	0xbffdfff8
 80027a8:	cccccccd 	.word	0xcccccccd
 80027ac:	40020000 	.word	0x40020000

080027b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_DMA_Start_IT+0x20>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e04b      	b.n	8002868 <HAL_DMA_Start_IT+0xb8>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d13a      	bne.n	800285a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0201 	bic.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f937 	bl	8002a7c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002812:	2b00      	cmp	r3, #0
 8002814:	d008      	beq.n	8002828 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 020e 	orr.w	r2, r2, #14
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	e00f      	b.n	8002848 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0204 	bic.w	r2, r2, #4
 8002836:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 020a 	orr.w	r2, r2, #10
 8002846:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0201 	orr.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	e005      	b.n	8002866 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002862:	2302      	movs	r3, #2
 8002864:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002866:	7dfb      	ldrb	r3, [r7, #23]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288c:	2204      	movs	r2, #4
 800288e:	409a      	lsls	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d04f      	beq.n	8002938 <HAL_DMA_IRQHandler+0xc8>
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d04a      	beq.n	8002938 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0320 	and.w	r3, r3, #32
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d107      	bne.n	80028c0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0204 	bic.w	r2, r2, #4
 80028be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a66      	ldr	r2, [pc, #408]	@ (8002a60 <HAL_DMA_IRQHandler+0x1f0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d029      	beq.n	800291e <HAL_DMA_IRQHandler+0xae>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a65      	ldr	r2, [pc, #404]	@ (8002a64 <HAL_DMA_IRQHandler+0x1f4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d022      	beq.n	800291a <HAL_DMA_IRQHandler+0xaa>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a63      	ldr	r2, [pc, #396]	@ (8002a68 <HAL_DMA_IRQHandler+0x1f8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01a      	beq.n	8002914 <HAL_DMA_IRQHandler+0xa4>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a62      	ldr	r2, [pc, #392]	@ (8002a6c <HAL_DMA_IRQHandler+0x1fc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d012      	beq.n	800290e <HAL_DMA_IRQHandler+0x9e>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a60      	ldr	r2, [pc, #384]	@ (8002a70 <HAL_DMA_IRQHandler+0x200>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d00a      	beq.n	8002908 <HAL_DMA_IRQHandler+0x98>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a5f      	ldr	r2, [pc, #380]	@ (8002a74 <HAL_DMA_IRQHandler+0x204>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d102      	bne.n	8002902 <HAL_DMA_IRQHandler+0x92>
 80028fc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002900:	e00e      	b.n	8002920 <HAL_DMA_IRQHandler+0xb0>
 8002902:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002906:	e00b      	b.n	8002920 <HAL_DMA_IRQHandler+0xb0>
 8002908:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800290c:	e008      	b.n	8002920 <HAL_DMA_IRQHandler+0xb0>
 800290e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002912:	e005      	b.n	8002920 <HAL_DMA_IRQHandler+0xb0>
 8002914:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002918:	e002      	b.n	8002920 <HAL_DMA_IRQHandler+0xb0>
 800291a:	2340      	movs	r3, #64	@ 0x40
 800291c:	e000      	b.n	8002920 <HAL_DMA_IRQHandler+0xb0>
 800291e:	2304      	movs	r3, #4
 8002920:	4a55      	ldr	r2, [pc, #340]	@ (8002a78 <HAL_DMA_IRQHandler+0x208>)
 8002922:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 8094 	beq.w	8002a56 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002936:	e08e      	b.n	8002a56 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293c:	2202      	movs	r2, #2
 800293e:	409a      	lsls	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d056      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x186>
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d051      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10b      	bne.n	8002978 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 020a 	bic.w	r2, r2, #10
 800296e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a38      	ldr	r2, [pc, #224]	@ (8002a60 <HAL_DMA_IRQHandler+0x1f0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d029      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x166>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a37      	ldr	r2, [pc, #220]	@ (8002a64 <HAL_DMA_IRQHandler+0x1f4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d022      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x162>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a35      	ldr	r2, [pc, #212]	@ (8002a68 <HAL_DMA_IRQHandler+0x1f8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d01a      	beq.n	80029cc <HAL_DMA_IRQHandler+0x15c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a34      	ldr	r2, [pc, #208]	@ (8002a6c <HAL_DMA_IRQHandler+0x1fc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d012      	beq.n	80029c6 <HAL_DMA_IRQHandler+0x156>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a32      	ldr	r2, [pc, #200]	@ (8002a70 <HAL_DMA_IRQHandler+0x200>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00a      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x150>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a31      	ldr	r2, [pc, #196]	@ (8002a74 <HAL_DMA_IRQHandler+0x204>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d102      	bne.n	80029ba <HAL_DMA_IRQHandler+0x14a>
 80029b4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80029b8:	e00e      	b.n	80029d8 <HAL_DMA_IRQHandler+0x168>
 80029ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029be:	e00b      	b.n	80029d8 <HAL_DMA_IRQHandler+0x168>
 80029c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029c4:	e008      	b.n	80029d8 <HAL_DMA_IRQHandler+0x168>
 80029c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029ca:	e005      	b.n	80029d8 <HAL_DMA_IRQHandler+0x168>
 80029cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029d0:	e002      	b.n	80029d8 <HAL_DMA_IRQHandler+0x168>
 80029d2:	2320      	movs	r3, #32
 80029d4:	e000      	b.n	80029d8 <HAL_DMA_IRQHandler+0x168>
 80029d6:	2302      	movs	r3, #2
 80029d8:	4a27      	ldr	r2, [pc, #156]	@ (8002a78 <HAL_DMA_IRQHandler+0x208>)
 80029da:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d034      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029f4:	e02f      	b.n	8002a56 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	2208      	movs	r2, #8
 80029fc:	409a      	lsls	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d028      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x1e8>
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d023      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 020e 	bic.w	r2, r2, #14
 8002a1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a28:	2101      	movs	r1, #1
 8002a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d004      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4798      	blx	r3
    }
  }
  return;
 8002a56:	bf00      	nop
 8002a58:	bf00      	nop
}
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40020008 	.word	0x40020008
 8002a64:	4002001c 	.word	0x4002001c
 8002a68:	40020030 	.word	0x40020030
 8002a6c:	40020044 	.word	0x40020044
 8002a70:	40020058 	.word	0x40020058
 8002a74:	4002006c 	.word	0x4002006c
 8002a78:	40020000 	.word	0x40020000

08002a7c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a92:	2101      	movs	r1, #1
 8002a94:	fa01 f202 	lsl.w	r2, r1, r2
 8002a98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b10      	cmp	r3, #16
 8002aa8:	d108      	bne.n	8002abc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002aba:	e007      	b.n	8002acc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	60da      	str	r2, [r3, #12]
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
	...

08002ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b08b      	sub	sp, #44	@ 0x2c
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aea:	e169      	b.n	8002dc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002aec:	2201      	movs	r2, #1
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69fa      	ldr	r2, [r7, #28]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	f040 8158 	bne.w	8002dba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4a9a      	ldr	r2, [pc, #616]	@ (8002d78 <HAL_GPIO_Init+0x2a0>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d05e      	beq.n	8002bd2 <HAL_GPIO_Init+0xfa>
 8002b14:	4a98      	ldr	r2, [pc, #608]	@ (8002d78 <HAL_GPIO_Init+0x2a0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d875      	bhi.n	8002c06 <HAL_GPIO_Init+0x12e>
 8002b1a:	4a98      	ldr	r2, [pc, #608]	@ (8002d7c <HAL_GPIO_Init+0x2a4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d058      	beq.n	8002bd2 <HAL_GPIO_Init+0xfa>
 8002b20:	4a96      	ldr	r2, [pc, #600]	@ (8002d7c <HAL_GPIO_Init+0x2a4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d86f      	bhi.n	8002c06 <HAL_GPIO_Init+0x12e>
 8002b26:	4a96      	ldr	r2, [pc, #600]	@ (8002d80 <HAL_GPIO_Init+0x2a8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d052      	beq.n	8002bd2 <HAL_GPIO_Init+0xfa>
 8002b2c:	4a94      	ldr	r2, [pc, #592]	@ (8002d80 <HAL_GPIO_Init+0x2a8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d869      	bhi.n	8002c06 <HAL_GPIO_Init+0x12e>
 8002b32:	4a94      	ldr	r2, [pc, #592]	@ (8002d84 <HAL_GPIO_Init+0x2ac>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d04c      	beq.n	8002bd2 <HAL_GPIO_Init+0xfa>
 8002b38:	4a92      	ldr	r2, [pc, #584]	@ (8002d84 <HAL_GPIO_Init+0x2ac>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d863      	bhi.n	8002c06 <HAL_GPIO_Init+0x12e>
 8002b3e:	4a92      	ldr	r2, [pc, #584]	@ (8002d88 <HAL_GPIO_Init+0x2b0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d046      	beq.n	8002bd2 <HAL_GPIO_Init+0xfa>
 8002b44:	4a90      	ldr	r2, [pc, #576]	@ (8002d88 <HAL_GPIO_Init+0x2b0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d85d      	bhi.n	8002c06 <HAL_GPIO_Init+0x12e>
 8002b4a:	2b12      	cmp	r3, #18
 8002b4c:	d82a      	bhi.n	8002ba4 <HAL_GPIO_Init+0xcc>
 8002b4e:	2b12      	cmp	r3, #18
 8002b50:	d859      	bhi.n	8002c06 <HAL_GPIO_Init+0x12e>
 8002b52:	a201      	add	r2, pc, #4	@ (adr r2, 8002b58 <HAL_GPIO_Init+0x80>)
 8002b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b58:	08002bd3 	.word	0x08002bd3
 8002b5c:	08002bad 	.word	0x08002bad
 8002b60:	08002bbf 	.word	0x08002bbf
 8002b64:	08002c01 	.word	0x08002c01
 8002b68:	08002c07 	.word	0x08002c07
 8002b6c:	08002c07 	.word	0x08002c07
 8002b70:	08002c07 	.word	0x08002c07
 8002b74:	08002c07 	.word	0x08002c07
 8002b78:	08002c07 	.word	0x08002c07
 8002b7c:	08002c07 	.word	0x08002c07
 8002b80:	08002c07 	.word	0x08002c07
 8002b84:	08002c07 	.word	0x08002c07
 8002b88:	08002c07 	.word	0x08002c07
 8002b8c:	08002c07 	.word	0x08002c07
 8002b90:	08002c07 	.word	0x08002c07
 8002b94:	08002c07 	.word	0x08002c07
 8002b98:	08002c07 	.word	0x08002c07
 8002b9c:	08002bb5 	.word	0x08002bb5
 8002ba0:	08002bc9 	.word	0x08002bc9
 8002ba4:	4a79      	ldr	r2, [pc, #484]	@ (8002d8c <HAL_GPIO_Init+0x2b4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d013      	beq.n	8002bd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002baa:	e02c      	b.n	8002c06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	623b      	str	r3, [r7, #32]
          break;
 8002bb2:	e029      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	623b      	str	r3, [r7, #32]
          break;
 8002bbc:	e024      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	3308      	adds	r3, #8
 8002bc4:	623b      	str	r3, [r7, #32]
          break;
 8002bc6:	e01f      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	623b      	str	r3, [r7, #32]
          break;
 8002bd0:	e01a      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bda:	2304      	movs	r3, #4
 8002bdc:	623b      	str	r3, [r7, #32]
          break;
 8002bde:	e013      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d105      	bne.n	8002bf4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002be8:	2308      	movs	r3, #8
 8002bea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	611a      	str	r2, [r3, #16]
          break;
 8002bf2:	e009      	b.n	8002c08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bf4:	2308      	movs	r3, #8
 8002bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	615a      	str	r2, [r3, #20]
          break;
 8002bfe:	e003      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c00:	2300      	movs	r3, #0
 8002c02:	623b      	str	r3, [r7, #32]
          break;
 8002c04:	e000      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          break;
 8002c06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2bff      	cmp	r3, #255	@ 0xff
 8002c0c:	d801      	bhi.n	8002c12 <HAL_GPIO_Init+0x13a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	e001      	b.n	8002c16 <HAL_GPIO_Init+0x13e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3304      	adds	r3, #4
 8002c16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2bff      	cmp	r3, #255	@ 0xff
 8002c1c:	d802      	bhi.n	8002c24 <HAL_GPIO_Init+0x14c>
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	e002      	b.n	8002c2a <HAL_GPIO_Init+0x152>
 8002c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c26:	3b08      	subs	r3, #8
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	210f      	movs	r1, #15
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	fa01 f303 	lsl.w	r3, r1, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	6a39      	ldr	r1, [r7, #32]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	431a      	orrs	r2, r3
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 80b1 	beq.w	8002dba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c58:	4b4d      	ldr	r3, [pc, #308]	@ (8002d90 <HAL_GPIO_Init+0x2b8>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	4a4c      	ldr	r2, [pc, #304]	@ (8002d90 <HAL_GPIO_Init+0x2b8>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	6193      	str	r3, [r2, #24]
 8002c64:	4b4a      	ldr	r3, [pc, #296]	@ (8002d90 <HAL_GPIO_Init+0x2b8>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c70:	4a48      	ldr	r2, [pc, #288]	@ (8002d94 <HAL_GPIO_Init+0x2bc>)
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	3302      	adds	r3, #2
 8002c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	220f      	movs	r2, #15
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4013      	ands	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a40      	ldr	r2, [pc, #256]	@ (8002d98 <HAL_GPIO_Init+0x2c0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d013      	beq.n	8002cc4 <HAL_GPIO_Init+0x1ec>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8002d9c <HAL_GPIO_Init+0x2c4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_GPIO_Init+0x1e8>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a3e      	ldr	r2, [pc, #248]	@ (8002da0 <HAL_GPIO_Init+0x2c8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d007      	beq.n	8002cbc <HAL_GPIO_Init+0x1e4>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a3d      	ldr	r2, [pc, #244]	@ (8002da4 <HAL_GPIO_Init+0x2cc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d101      	bne.n	8002cb8 <HAL_GPIO_Init+0x1e0>
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e006      	b.n	8002cc6 <HAL_GPIO_Init+0x1ee>
 8002cb8:	2304      	movs	r3, #4
 8002cba:	e004      	b.n	8002cc6 <HAL_GPIO_Init+0x1ee>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e002      	b.n	8002cc6 <HAL_GPIO_Init+0x1ee>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <HAL_GPIO_Init+0x1ee>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cc8:	f002 0203 	and.w	r2, r2, #3
 8002ccc:	0092      	lsls	r2, r2, #2
 8002cce:	4093      	lsls	r3, r2
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cd6:	492f      	ldr	r1, [pc, #188]	@ (8002d94 <HAL_GPIO_Init+0x2bc>)
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cda:	089b      	lsrs	r3, r3, #2
 8002cdc:	3302      	adds	r3, #2
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d006      	beq.n	8002cfe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	492c      	ldr	r1, [pc, #176]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	608b      	str	r3, [r1, #8]
 8002cfc:	e006      	b.n	8002d0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	4928      	ldr	r1, [pc, #160]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d006      	beq.n	8002d26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d18:	4b23      	ldr	r3, [pc, #140]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	4922      	ldr	r1, [pc, #136]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60cb      	str	r3, [r1, #12]
 8002d24:	e006      	b.n	8002d34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d26:	4b20      	ldr	r3, [pc, #128]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	491e      	ldr	r1, [pc, #120]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d006      	beq.n	8002d4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d40:	4b19      	ldr	r3, [pc, #100]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	4918      	ldr	r1, [pc, #96]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
 8002d4c:	e006      	b.n	8002d5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d4e:	4b16      	ldr	r3, [pc, #88]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	4914      	ldr	r1, [pc, #80]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d021      	beq.n	8002dac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d68:	4b0f      	ldr	r3, [pc, #60]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	490e      	ldr	r1, [pc, #56]	@ (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	600b      	str	r3, [r1, #0]
 8002d74:	e021      	b.n	8002dba <HAL_GPIO_Init+0x2e2>
 8002d76:	bf00      	nop
 8002d78:	10320000 	.word	0x10320000
 8002d7c:	10310000 	.word	0x10310000
 8002d80:	10220000 	.word	0x10220000
 8002d84:	10210000 	.word	0x10210000
 8002d88:	10120000 	.word	0x10120000
 8002d8c:	10110000 	.word	0x10110000
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40010000 	.word	0x40010000
 8002d98:	40010800 	.word	0x40010800
 8002d9c:	40010c00 	.word	0x40010c00
 8002da0:	40011000 	.word	0x40011000
 8002da4:	40011400 	.word	0x40011400
 8002da8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002dac:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <HAL_GPIO_Init+0x304>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	4909      	ldr	r1, [pc, #36]	@ (8002ddc <HAL_GPIO_Init+0x304>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f47f ae8e 	bne.w	8002aec <HAL_GPIO_Init+0x14>
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	372c      	adds	r7, #44	@ 0x2c
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	40010400 	.word	0x40010400

08002de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]
 8002dec:	4613      	mov	r3, r2
 8002dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002df0:	787b      	ldrb	r3, [r7, #1]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002df6:	887a      	ldrh	r2, [r7, #2]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002dfc:	e003      	b.n	8002e06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dfe:	887b      	ldrh	r3, [r7, #2]
 8002e00:	041a      	lsls	r2, r3, #16
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	611a      	str	r2, [r3, #16]
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e272      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8087 	beq.w	8002f3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e30:	4b92      	ldr	r3, [pc, #584]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 030c 	and.w	r3, r3, #12
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d00c      	beq.n	8002e56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e3c:	4b8f      	ldr	r3, [pc, #572]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d112      	bne.n	8002e6e <HAL_RCC_OscConfig+0x5e>
 8002e48:	4b8c      	ldr	r3, [pc, #560]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e54:	d10b      	bne.n	8002e6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e56:	4b89      	ldr	r3, [pc, #548]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d06c      	beq.n	8002f3c <HAL_RCC_OscConfig+0x12c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d168      	bne.n	8002f3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e24c      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e76:	d106      	bne.n	8002e86 <HAL_RCC_OscConfig+0x76>
 8002e78:	4b80      	ldr	r3, [pc, #512]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a7f      	ldr	r2, [pc, #508]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	e02e      	b.n	8002ee4 <HAL_RCC_OscConfig+0xd4>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x98>
 8002e8e:	4b7b      	ldr	r3, [pc, #492]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a7a      	ldr	r2, [pc, #488]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002e94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	4b78      	ldr	r3, [pc, #480]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a77      	ldr	r2, [pc, #476]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e01d      	b.n	8002ee4 <HAL_RCC_OscConfig+0xd4>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0xbc>
 8002eb2:	4b72      	ldr	r3, [pc, #456]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a71      	ldr	r2, [pc, #452]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b6f      	ldr	r3, [pc, #444]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a6e      	ldr	r2, [pc, #440]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCC_OscConfig+0xd4>
 8002ecc:	4b6b      	ldr	r3, [pc, #428]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a6a      	ldr	r2, [pc, #424]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b68      	ldr	r3, [pc, #416]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a67      	ldr	r2, [pc, #412]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002ede:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ee2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d013      	beq.n	8002f14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7ff faca 	bl	8002484 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7ff fac6 	bl	8002484 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	@ 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e200      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b5d      	ldr	r3, [pc, #372]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0xe4>
 8002f12:	e014      	b.n	8002f3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7ff fab6 	bl	8002484 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7ff fab2 	bl	8002484 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	@ 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e1ec      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2e:	4b53      	ldr	r3, [pc, #332]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x10c>
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d063      	beq.n	8003012 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f4a:	4b4c      	ldr	r3, [pc, #304]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00b      	beq.n	8002f6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f56:	4b49      	ldr	r3, [pc, #292]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d11c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x18c>
 8002f62:	4b46      	ldr	r3, [pc, #280]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d116      	bne.n	8002f9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6e:	4b43      	ldr	r3, [pc, #268]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_RCC_OscConfig+0x176>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d001      	beq.n	8002f86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e1c0      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f86:	4b3d      	ldr	r3, [pc, #244]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4939      	ldr	r1, [pc, #228]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9a:	e03a      	b.n	8003012 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d020      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa4:	4b36      	ldr	r3, [pc, #216]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002faa:	f7ff fa6b 	bl	8002484 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb2:	f7ff fa67 	bl	8002484 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e1a1      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc4:	4b2d      	ldr	r3, [pc, #180]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd0:	4b2a      	ldr	r3, [pc, #168]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4927      	ldr	r1, [pc, #156]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]
 8002fe4:	e015      	b.n	8003012 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe6:	4b26      	ldr	r3, [pc, #152]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7ff fa4a 	bl	8002484 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff4:	f7ff fa46 	bl	8002484 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e180      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003006:	4b1d      	ldr	r3, [pc, #116]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d03a      	beq.n	8003094 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d019      	beq.n	800305a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003026:	4b17      	ldr	r3, [pc, #92]	@ (8003084 <HAL_RCC_OscConfig+0x274>)
 8003028:	2201      	movs	r2, #1
 800302a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302c:	f7ff fa2a 	bl	8002484 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003034:	f7ff fa26 	bl	8002484 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e160      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003046:	4b0d      	ldr	r3, [pc, #52]	@ (800307c <HAL_RCC_OscConfig+0x26c>)
 8003048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003052:	2001      	movs	r0, #1
 8003054:	f000 face 	bl	80035f4 <RCC_Delay>
 8003058:	e01c      	b.n	8003094 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800305a:	4b0a      	ldr	r3, [pc, #40]	@ (8003084 <HAL_RCC_OscConfig+0x274>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003060:	f7ff fa10 	bl	8002484 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003066:	e00f      	b.n	8003088 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003068:	f7ff fa0c 	bl	8002484 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d908      	bls.n	8003088 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e146      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
 8003080:	42420000 	.word	0x42420000
 8003084:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003088:	4b92      	ldr	r3, [pc, #584]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800308a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e9      	bne.n	8003068 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80a6 	beq.w	80031ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030a2:	2300      	movs	r3, #0
 80030a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030a6:	4b8b      	ldr	r3, [pc, #556]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10d      	bne.n	80030ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b2:	4b88      	ldr	r3, [pc, #544]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	4a87      	ldr	r2, [pc, #540]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030bc:	61d3      	str	r3, [r2, #28]
 80030be:	4b85      	ldr	r3, [pc, #532]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ca:	2301      	movs	r3, #1
 80030cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ce:	4b82      	ldr	r3, [pc, #520]	@ (80032d8 <HAL_RCC_OscConfig+0x4c8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d118      	bne.n	800310c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030da:	4b7f      	ldr	r3, [pc, #508]	@ (80032d8 <HAL_RCC_OscConfig+0x4c8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a7e      	ldr	r2, [pc, #504]	@ (80032d8 <HAL_RCC_OscConfig+0x4c8>)
 80030e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e6:	f7ff f9cd 	bl	8002484 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ee:	f7ff f9c9 	bl	8002484 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b64      	cmp	r3, #100	@ 0x64
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e103      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003100:	4b75      	ldr	r3, [pc, #468]	@ (80032d8 <HAL_RCC_OscConfig+0x4c8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d106      	bne.n	8003122 <HAL_RCC_OscConfig+0x312>
 8003114:	4b6f      	ldr	r3, [pc, #444]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	4a6e      	ldr	r2, [pc, #440]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	6213      	str	r3, [r2, #32]
 8003120:	e02d      	b.n	800317e <HAL_RCC_OscConfig+0x36e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10c      	bne.n	8003144 <HAL_RCC_OscConfig+0x334>
 800312a:	4b6a      	ldr	r3, [pc, #424]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4a69      	ldr	r2, [pc, #420]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	6213      	str	r3, [r2, #32]
 8003136:	4b67      	ldr	r3, [pc, #412]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	4a66      	ldr	r2, [pc, #408]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800313c:	f023 0304 	bic.w	r3, r3, #4
 8003140:	6213      	str	r3, [r2, #32]
 8003142:	e01c      	b.n	800317e <HAL_RCC_OscConfig+0x36e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b05      	cmp	r3, #5
 800314a:	d10c      	bne.n	8003166 <HAL_RCC_OscConfig+0x356>
 800314c:	4b61      	ldr	r3, [pc, #388]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	4a60      	ldr	r2, [pc, #384]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003152:	f043 0304 	orr.w	r3, r3, #4
 8003156:	6213      	str	r3, [r2, #32]
 8003158:	4b5e      	ldr	r3, [pc, #376]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	4a5d      	ldr	r2, [pc, #372]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6213      	str	r3, [r2, #32]
 8003164:	e00b      	b.n	800317e <HAL_RCC_OscConfig+0x36e>
 8003166:	4b5b      	ldr	r3, [pc, #364]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	4a5a      	ldr	r2, [pc, #360]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	6213      	str	r3, [r2, #32]
 8003172:	4b58      	ldr	r3, [pc, #352]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	4a57      	ldr	r2, [pc, #348]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	f023 0304 	bic.w	r3, r3, #4
 800317c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d015      	beq.n	80031b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003186:	f7ff f97d 	bl	8002484 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318c:	e00a      	b.n	80031a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7ff f979 	bl	8002484 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319c:	4293      	cmp	r3, r2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e0b1      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a4:	4b4b      	ldr	r3, [pc, #300]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0ee      	beq.n	800318e <HAL_RCC_OscConfig+0x37e>
 80031b0:	e014      	b.n	80031dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b2:	f7ff f967 	bl	8002484 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b8:	e00a      	b.n	80031d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7ff f963 	bl	8002484 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e09b      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d0:	4b40      	ldr	r3, [pc, #256]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1ee      	bne.n	80031ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d105      	bne.n	80031ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e2:	4b3c      	ldr	r3, [pc, #240]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	4a3b      	ldr	r2, [pc, #236]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80031e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8087 	beq.w	8003306 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031f8:	4b36      	ldr	r3, [pc, #216]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b08      	cmp	r3, #8
 8003202:	d061      	beq.n	80032c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d146      	bne.n	800329a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320c:	4b33      	ldr	r3, [pc, #204]	@ (80032dc <HAL_RCC_OscConfig+0x4cc>)
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003212:	f7ff f937 	bl	8002484 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800321a:	f7ff f933 	bl	8002484 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e06d      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800322c:	4b29      	ldr	r3, [pc, #164]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f0      	bne.n	800321a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003240:	d108      	bne.n	8003254 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003242:	4b24      	ldr	r3, [pc, #144]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	4921      	ldr	r1, [pc, #132]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003254:	4b1f      	ldr	r3, [pc, #124]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a19      	ldr	r1, [r3, #32]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003264:	430b      	orrs	r3, r1
 8003266:	491b      	ldr	r1, [pc, #108]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 8003268:	4313      	orrs	r3, r2
 800326a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800326c:	4b1b      	ldr	r3, [pc, #108]	@ (80032dc <HAL_RCC_OscConfig+0x4cc>)
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7ff f907 	bl	8002484 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327a:	f7ff f903 	bl	8002484 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e03d      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800328c:	4b11      	ldr	r3, [pc, #68]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x46a>
 8003298:	e035      	b.n	8003306 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329a:	4b10      	ldr	r3, [pc, #64]	@ (80032dc <HAL_RCC_OscConfig+0x4cc>)
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7ff f8f0 	bl	8002484 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a8:	f7ff f8ec 	bl	8002484 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e026      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ba:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x498>
 80032c6:	e01e      	b.n	8003306 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e019      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40007000 	.word	0x40007000
 80032dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003310 <HAL_RCC_OscConfig+0x500>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fe:	429a      	cmp	r2, r3
 8003300:	d001      	beq.n	8003306 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40021000 	.word	0x40021000

08003314 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0d0      	b.n	80034ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003328:	4b6a      	ldr	r3, [pc, #424]	@ (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d910      	bls.n	8003358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b67      	ldr	r3, [pc, #412]	@ (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 0207 	bic.w	r2, r3, #7
 800333e:	4965      	ldr	r1, [pc, #404]	@ (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003346:	4b63      	ldr	r3, [pc, #396]	@ (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d001      	beq.n	8003358 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0b8      	b.n	80034ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d020      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003370:	4b59      	ldr	r3, [pc, #356]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	4a58      	ldr	r2, [pc, #352]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800337a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003388:	4b53      	ldr	r3, [pc, #332]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	4a52      	ldr	r2, [pc, #328]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 800338e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003392:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003394:	4b50      	ldr	r3, [pc, #320]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	494d      	ldr	r1, [pc, #308]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d040      	beq.n	8003434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d107      	bne.n	80033ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	4b47      	ldr	r3, [pc, #284]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d115      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e07f      	b.n	80034ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d2:	4b41      	ldr	r3, [pc, #260]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e073      	b.n	80034ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e2:	4b3d      	ldr	r3, [pc, #244]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e06b      	b.n	80034ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f2:	4b39      	ldr	r3, [pc, #228]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f023 0203 	bic.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	4936      	ldr	r1, [pc, #216]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	4313      	orrs	r3, r2
 8003402:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003404:	f7ff f83e 	bl	8002484 <HAL_GetTick>
 8003408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	e00a      	b.n	8003422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340c:	f7ff f83a 	bl	8002484 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e053      	b.n	80034ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	4b2d      	ldr	r3, [pc, #180]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 020c 	and.w	r2, r3, #12
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	429a      	cmp	r2, r3
 8003432:	d1eb      	bne.n	800340c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003434:	4b27      	ldr	r3, [pc, #156]	@ (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d210      	bcs.n	8003464 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b24      	ldr	r3, [pc, #144]	@ (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 0207 	bic.w	r2, r3, #7
 800344a:	4922      	ldr	r1, [pc, #136]	@ (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	4b20      	ldr	r3, [pc, #128]	@ (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e032      	b.n	80034ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003470:	4b19      	ldr	r3, [pc, #100]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4916      	ldr	r1, [pc, #88]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	4313      	orrs	r3, r2
 8003480:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d009      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800348e:	4b12      	ldr	r3, [pc, #72]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	490e      	ldr	r1, [pc, #56]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034a2:	f000 f821 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 80034a6:	4602      	mov	r2, r0
 80034a8:	4b0b      	ldr	r3, [pc, #44]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	490a      	ldr	r1, [pc, #40]	@ (80034dc <HAL_RCC_ClockConfig+0x1c8>)
 80034b4:	5ccb      	ldrb	r3, [r1, r3]
 80034b6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ba:	4a09      	ldr	r2, [pc, #36]	@ (80034e0 <HAL_RCC_ClockConfig+0x1cc>)
 80034bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034be:	4b09      	ldr	r3, [pc, #36]	@ (80034e4 <HAL_RCC_ClockConfig+0x1d0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fe ff9c 	bl	8002400 <HAL_InitTick>

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40022000 	.word	0x40022000
 80034d8:	40021000 	.word	0x40021000
 80034dc:	08008c6c 	.word	0x08008c6c
 80034e0:	20000004 	.word	0x20000004
 80034e4:	20000008 	.word	0x20000008

080034e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	2300      	movs	r3, #0
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	2300      	movs	r3, #0
 80034fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003502:	4b1e      	ldr	r3, [pc, #120]	@ (800357c <HAL_RCC_GetSysClockFreq+0x94>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b04      	cmp	r3, #4
 8003510:	d002      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x30>
 8003512:	2b08      	cmp	r3, #8
 8003514:	d003      	beq.n	800351e <HAL_RCC_GetSysClockFreq+0x36>
 8003516:	e027      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003518:	4b19      	ldr	r3, [pc, #100]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x98>)
 800351a:	613b      	str	r3, [r7, #16]
      break;
 800351c:	e027      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	0c9b      	lsrs	r3, r3, #18
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	4a17      	ldr	r2, [pc, #92]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003528:	5cd3      	ldrb	r3, [r2, r3]
 800352a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d010      	beq.n	8003558 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003536:	4b11      	ldr	r3, [pc, #68]	@ (800357c <HAL_RCC_GetSysClockFreq+0x94>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	0c5b      	lsrs	r3, r3, #17
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	4a11      	ldr	r2, [pc, #68]	@ (8003588 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003542:	5cd3      	ldrb	r3, [r2, r3]
 8003544:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a0d      	ldr	r2, [pc, #52]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x98>)
 800354a:	fb03 f202 	mul.w	r2, r3, r2
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	fbb2 f3f3 	udiv	r3, r2, r3
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	e004      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a0c      	ldr	r2, [pc, #48]	@ (800358c <HAL_RCC_GetSysClockFreq+0xa4>)
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	613b      	str	r3, [r7, #16]
      break;
 8003566:	e002      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003568:	4b05      	ldr	r3, [pc, #20]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x98>)
 800356a:	613b      	str	r3, [r7, #16]
      break;
 800356c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800356e:	693b      	ldr	r3, [r7, #16]
}
 8003570:	4618      	mov	r0, r3
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40021000 	.word	0x40021000
 8003580:	007a1200 	.word	0x007a1200
 8003584:	08008c84 	.word	0x08008c84
 8003588:	08008c94 	.word	0x08008c94
 800358c:	003d0900 	.word	0x003d0900

08003590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003594:	4b02      	ldr	r3, [pc, #8]	@ (80035a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003596:	681b      	ldr	r3, [r3, #0]
}
 8003598:	4618      	mov	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr
 80035a0:	20000004 	.word	0x20000004

080035a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035a8:	f7ff fff2 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	4903      	ldr	r1, [pc, #12]	@ (80035c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ba:	5ccb      	ldrb	r3, [r1, r3]
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000
 80035c8:	08008c7c 	.word	0x08008c7c

080035cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035d0:	f7ff ffde 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035d4:	4602      	mov	r2, r0
 80035d6:	4b05      	ldr	r3, [pc, #20]	@ (80035ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	0adb      	lsrs	r3, r3, #11
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	4903      	ldr	r1, [pc, #12]	@ (80035f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035e2:	5ccb      	ldrb	r3, [r1, r3]
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40021000 	.word	0x40021000
 80035f0:	08008c7c 	.word	0x08008c7c

080035f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003628 <RCC_Delay+0x34>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a0a      	ldr	r2, [pc, #40]	@ (800362c <RCC_Delay+0x38>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	0a5b      	lsrs	r3, r3, #9
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003610:	bf00      	nop
  }
  while (Delay --);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1e5a      	subs	r2, r3, #1
 8003616:	60fa      	str	r2, [r7, #12]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f9      	bne.n	8003610 <RCC_Delay+0x1c>
}
 800361c:	bf00      	nop
 800361e:	bf00      	nop
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr
 8003628:	20000004 	.word	0x20000004
 800362c:	10624dd3 	.word	0x10624dd3

08003630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e076      	b.n	8003730 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003646:	2b00      	cmp	r3, #0
 8003648:	d108      	bne.n	800365c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003652:	d009      	beq.n	8003668 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	61da      	str	r2, [r3, #28]
 800365a:	e005      	b.n	8003668 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fe fc64 	bl	8001f50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800369e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ec:	ea42 0103 	orr.w	r1, r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	0c1a      	lsrs	r2, r3, #16
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f002 0204 	and.w	r2, r2, #4
 800370e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	69da      	ldr	r2, [r3, #28]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800371e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	4613      	mov	r3, r2
 8003746:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_SPI_Transmit+0x22>
 8003756:	2302      	movs	r3, #2
 8003758:	e12d      	b.n	80039b6 <HAL_SPI_Transmit+0x27e>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003762:	f7fe fe8f 	bl	8002484 <HAL_GetTick>
 8003766:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003768:	88fb      	ldrh	r3, [r7, #6]
 800376a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b01      	cmp	r3, #1
 8003776:	d002      	beq.n	800377e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003778:	2302      	movs	r3, #2
 800377a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800377c:	e116      	b.n	80039ac <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <HAL_SPI_Transmit+0x52>
 8003784:	88fb      	ldrh	r3, [r7, #6]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d102      	bne.n	8003790 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800378e:	e10d      	b.n	80039ac <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2203      	movs	r2, #3
 8003794:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	88fa      	ldrh	r2, [r7, #6]
 80037a8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	88fa      	ldrh	r2, [r7, #6]
 80037ae:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037d6:	d10f      	bne.n	80037f8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003802:	2b40      	cmp	r3, #64	@ 0x40
 8003804:	d007      	beq.n	8003816 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003814:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800381e:	d14f      	bne.n	80038c0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <HAL_SPI_Transmit+0xf6>
 8003828:	8afb      	ldrh	r3, [r7, #22]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d142      	bne.n	80038b4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003832:	881a      	ldrh	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383e:	1c9a      	adds	r2, r3, #2
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003852:	e02f      	b.n	80038b4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b02      	cmp	r3, #2
 8003860:	d112      	bne.n	8003888 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003866:	881a      	ldrh	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	1c9a      	adds	r2, r3, #2
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003886:	e015      	b.n	80038b4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003888:	f7fe fdfc 	bl	8002484 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d803      	bhi.n	80038a0 <HAL_SPI_Transmit+0x168>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d102      	bne.n	80038a6 <HAL_SPI_Transmit+0x16e>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80038b2:	e07b      	b.n	80039ac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1ca      	bne.n	8003854 <HAL_SPI_Transmit+0x11c>
 80038be:	e050      	b.n	8003962 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <HAL_SPI_Transmit+0x196>
 80038c8:	8afb      	ldrh	r3, [r7, #22]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d144      	bne.n	8003958 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	330c      	adds	r3, #12
 80038d8:	7812      	ldrb	r2, [r2, #0]
 80038da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038f4:	e030      	b.n	8003958 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b02      	cmp	r3, #2
 8003902:	d113      	bne.n	800392c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	330c      	adds	r3, #12
 800390e:	7812      	ldrb	r2, [r2, #0]
 8003910:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	86da      	strh	r2, [r3, #54]	@ 0x36
 800392a:	e015      	b.n	8003958 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800392c:	f7fe fdaa 	bl	8002484 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d803      	bhi.n	8003944 <HAL_SPI_Transmit+0x20c>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003942:	d102      	bne.n	800394a <HAL_SPI_Transmit+0x212>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003956:	e029      	b.n	80039ac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1c9      	bne.n	80038f6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	6839      	ldr	r1, [r7, #0]
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 fd12 	bl	8004390 <SPI_EndRxTxTransaction>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10a      	bne.n	8003996 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003980:	2300      	movs	r3, #0
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	77fb      	strb	r3, [r7, #31]
 80039a2:	e003      	b.n	80039ac <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80039b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3720      	adds	r7, #32
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b088      	sub	sp, #32
 80039c2:	af02      	add	r7, sp, #8
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	603b      	str	r3, [r7, #0]
 80039ca:	4613      	mov	r3, r2
 80039cc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d002      	beq.n	80039e4 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80039de:	2302      	movs	r3, #2
 80039e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039e2:	e0fb      	b.n	8003bdc <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039ec:	d112      	bne.n	8003a14 <HAL_SPI_Receive+0x56>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10e      	bne.n	8003a14 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2204      	movs	r2, #4
 80039fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80039fe:	88fa      	ldrh	r2, [r7, #6]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f8ef 	bl	8003bee <HAL_SPI_TransmitReceive>
 8003a10:	4603      	mov	r3, r0
 8003a12:	e0e8      	b.n	8003be6 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_SPI_Receive+0x64>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e0e1      	b.n	8003be6 <HAL_SPI_Receive+0x228>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a2a:	f7fe fd2b 	bl	8002484 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_SPI_Receive+0x7e>
 8003a36:	88fb      	ldrh	r3, [r7, #6]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d102      	bne.n	8003a42 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a40:	e0cc      	b.n	8003bdc <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2204      	movs	r2, #4
 8003a46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	88fa      	ldrh	r2, [r7, #6]
 8003a5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	88fa      	ldrh	r2, [r7, #6]
 8003a60:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a88:	d10f      	bne.n	8003aaa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003aa8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab4:	2b40      	cmp	r3, #64	@ 0x40
 8003ab6:	d007      	beq.n	8003ac8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ac6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d16a      	bne.n	8003ba6 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ad0:	e032      	b.n	8003b38 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d115      	bne.n	8003b0c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f103 020c 	add.w	r2, r3, #12
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aec:	7812      	ldrb	r2, [r2, #0]
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b0a:	e015      	b.n	8003b38 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b0c:	f7fe fcba 	bl	8002484 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d803      	bhi.n	8003b24 <HAL_SPI_Receive+0x166>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b22:	d102      	bne.n	8003b2a <HAL_SPI_Receive+0x16c>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003b36:	e051      	b.n	8003bdc <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1c7      	bne.n	8003ad2 <HAL_SPI_Receive+0x114>
 8003b42:	e035      	b.n	8003bb0 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d113      	bne.n	8003b7a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5c:	b292      	uxth	r2, r2
 8003b5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b64:	1c9a      	adds	r2, r3, #2
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b78:	e015      	b.n	8003ba6 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b7a:	f7fe fc83 	bl	8002484 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d803      	bhi.n	8003b92 <HAL_SPI_Receive+0x1d4>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b90:	d102      	bne.n	8003b98 <HAL_SPI_Receive+0x1da>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d106      	bne.n	8003ba6 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003ba4:	e01a      	b.n	8003bdc <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1c9      	bne.n	8003b44 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	6839      	ldr	r1, [r7, #0]
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 fb99 	bl	80042ec <SPI_EndRxTransaction>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	75fb      	strb	r3, [r7, #23]
 8003bd2:	e003      	b.n	8003bdc <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b08c      	sub	sp, #48	@ 0x30
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_SPI_TransmitReceive+0x26>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e198      	b.n	8003f46 <HAL_SPI_TransmitReceive+0x358>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c1c:	f7fe fc32 	bl	8002484 <HAL_GetTick>
 8003c20:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c32:	887b      	ldrh	r3, [r7, #2]
 8003c34:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d00f      	beq.n	8003c5e <HAL_SPI_TransmitReceive+0x70>
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c44:	d107      	bne.n	8003c56 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d103      	bne.n	8003c56 <HAL_SPI_TransmitReceive+0x68>
 8003c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d003      	beq.n	8003c5e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c56:	2302      	movs	r3, #2
 8003c58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003c5c:	e16d      	b.n	8003f3a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_SPI_TransmitReceive+0x82>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_SPI_TransmitReceive+0x82>
 8003c6a:	887b      	ldrh	r3, [r7, #2]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d103      	bne.n	8003c78 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003c76:	e160      	b.n	8003f3a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d003      	beq.n	8003c8c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2205      	movs	r2, #5
 8003c88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	887a      	ldrh	r2, [r7, #2]
 8003c9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	887a      	ldrh	r2, [r7, #2]
 8003ca2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	887a      	ldrh	r2, [r7, #2]
 8003cae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	887a      	ldrh	r2, [r7, #2]
 8003cb4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ccc:	2b40      	cmp	r3, #64	@ 0x40
 8003cce:	d007      	beq.n	8003ce0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ce8:	d17c      	bne.n	8003de4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <HAL_SPI_TransmitReceive+0x10a>
 8003cf2:	8b7b      	ldrh	r3, [r7, #26]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d16a      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfc:	881a      	ldrh	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d08:	1c9a      	adds	r2, r3, #2
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d1c:	e057      	b.n	8003dce <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d11b      	bne.n	8003d64 <HAL_SPI_TransmitReceive+0x176>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d016      	beq.n	8003d64 <HAL_SPI_TransmitReceive+0x176>
 8003d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d113      	bne.n	8003d64 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d40:	881a      	ldrh	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4c:	1c9a      	adds	r2, r3, #2
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d119      	bne.n	8003da6 <HAL_SPI_TransmitReceive+0x1b8>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d014      	beq.n	8003da6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d86:	b292      	uxth	r2, r2
 8003d88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8e:	1c9a      	adds	r2, r3, #2
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003da2:	2301      	movs	r3, #1
 8003da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003da6:	f7fe fb6d 	bl	8002484 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d80b      	bhi.n	8003dce <HAL_SPI_TransmitReceive+0x1e0>
 8003db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbc:	d007      	beq.n	8003dce <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003dcc:	e0b5      	b.n	8003f3a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1a2      	bne.n	8003d1e <HAL_SPI_TransmitReceive+0x130>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d19d      	bne.n	8003d1e <HAL_SPI_TransmitReceive+0x130>
 8003de2:	e080      	b.n	8003ee6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <HAL_SPI_TransmitReceive+0x204>
 8003dec:	8b7b      	ldrh	r3, [r7, #26]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d16f      	bne.n	8003ed2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	7812      	ldrb	r2, [r2, #0]
 8003dfe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e18:	e05b      	b.n	8003ed2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d11c      	bne.n	8003e62 <HAL_SPI_TransmitReceive+0x274>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d017      	beq.n	8003e62 <HAL_SPI_TransmitReceive+0x274>
 8003e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d114      	bne.n	8003e62 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	330c      	adds	r3, #12
 8003e42:	7812      	ldrb	r2, [r2, #0]
 8003e44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d119      	bne.n	8003ea4 <HAL_SPI_TransmitReceive+0x2b6>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d014      	beq.n	8003ea4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ea4:	f7fe faee 	bl	8002484 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d803      	bhi.n	8003ebc <HAL_SPI_TransmitReceive+0x2ce>
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eba:	d102      	bne.n	8003ec2 <HAL_SPI_TransmitReceive+0x2d4>
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d107      	bne.n	8003ed2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003ed0:	e033      	b.n	8003f3a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d19e      	bne.n	8003e1a <HAL_SPI_TransmitReceive+0x22c>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d199      	bne.n	8003e1a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 fa50 	bl	8004390 <SPI_EndRxTxTransaction>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d006      	beq.n	8003f04 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003f02:	e01a      	b.n	8003f3a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f30:	e003      	b.n	8003f3a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003f42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3730      	adds	r7, #48	@ 0x30
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_SPI_Transmit_DMA+0x20>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e097      	b.n	80040a0 <HAL_SPI_Transmit_DMA+0x150>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d002      	beq.n	8003f8a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003f84:	2302      	movs	r3, #2
 8003f86:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f88:	e085      	b.n	8004096 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <HAL_SPI_Transmit_DMA+0x46>
 8003f90:	88fb      	ldrh	r3, [r7, #6]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d102      	bne.n	8003f9c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f9a:	e07c      	b.n	8004096 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2203      	movs	r2, #3
 8003fa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	88fa      	ldrh	r2, [r7, #6]
 8003fb4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	88fa      	ldrh	r2, [r7, #6]
 8003fba:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fe2:	d10f      	bne.n	8004004 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ff2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004002:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004008:	4a27      	ldr	r2, [pc, #156]	@ (80040a8 <HAL_SPI_Transmit_DMA+0x158>)
 800400a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004010:	4a26      	ldr	r2, [pc, #152]	@ (80040ac <HAL_SPI_Transmit_DMA+0x15c>)
 8004012:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004018:	4a25      	ldr	r2, [pc, #148]	@ (80040b0 <HAL_SPI_Transmit_DMA+0x160>)
 800401a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004020:	2200      	movs	r2, #0
 8004022:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402c:	4619      	mov	r1, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	330c      	adds	r3, #12
 8004034:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800403a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800403c:	f7fe fbb8 	bl	80027b0 <HAL_DMA_Start_IT>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d008      	beq.n	8004058 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404a:	f043 0210 	orr.w	r2, r3, #16
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	75fb      	strb	r3, [r7, #23]

    goto error;
 8004056:	e01e      	b.n	8004096 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004062:	2b40      	cmp	r3, #64	@ 0x40
 8004064:	d007      	beq.n	8004076 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004074:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0220 	orr.w	r2, r2, #32
 8004084:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0202 	orr.w	r2, r2, #2
 8004094:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800409e:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	0800417f 	.word	0x0800417f
 80040ac:	080040d9 	.word	0x080040d9
 80040b0:	0800419b 	.word	0x0800419b

080040b4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040e6:	f7fe f9cd 	bl	8002484 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d03b      	beq.n	8004172 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0220 	bic.w	r2, r2, #32
 8004108:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0202 	bic.w	r2, r2, #2
 8004118:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	2164      	movs	r1, #100	@ 0x64
 800411e:	6978      	ldr	r0, [r7, #20]
 8004120:	f000 f936 	bl	8004390 <SPI_EndRxTxTransaction>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d005      	beq.n	8004136 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800412e:	f043 0220 	orr.w	r2, r3, #32
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800413e:	2300      	movs	r3, #0
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2200      	movs	r2, #0
 8004158:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800416a:	6978      	ldr	r0, [r7, #20]
 800416c:	f7ff ffab 	bl	80040c6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004170:	e002      	b.n	8004178 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004172:	6978      	ldr	r0, [r7, #20]
 8004174:	f7fc fd9a 	bl	8000cac <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f7ff ff91 	bl	80040b4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0203 	bic.w	r2, r2, #3
 80041b6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041bc:	f043 0210 	orr.w	r2, r3, #16
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f7ff ff7a 	bl	80040c6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041d2:	bf00      	nop
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041ec:	f7fe f94a 	bl	8002484 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	4413      	add	r3, r2
 80041fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041fc:	f7fe f942 	bl	8002484 <HAL_GetTick>
 8004200:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004202:	4b39      	ldr	r3, [pc, #228]	@ (80042e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	015b      	lsls	r3, r3, #5
 8004208:	0d1b      	lsrs	r3, r3, #20
 800420a:	69fa      	ldr	r2, [r7, #28]
 800420c:	fb02 f303 	mul.w	r3, r2, r3
 8004210:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004212:	e054      	b.n	80042be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d050      	beq.n	80042be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800421c:	f7fe f932 	bl	8002484 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	429a      	cmp	r2, r3
 800422a:	d902      	bls.n	8004232 <SPI_WaitFlagStateUntilTimeout+0x56>
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d13d      	bne.n	80042ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004240:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800424a:	d111      	bne.n	8004270 <SPI_WaitFlagStateUntilTimeout+0x94>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004254:	d004      	beq.n	8004260 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800425e:	d107      	bne.n	8004270 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800426e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004278:	d10f      	bne.n	800429a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004298:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e017      	b.n	80042de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4013      	ands	r3, r2
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	bf0c      	ite	eq
 80042ce:	2301      	moveq	r3, #1
 80042d0:	2300      	movne	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d19b      	bne.n	8004214 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3720      	adds	r7, #32
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000004 	.word	0x20000004

080042ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004300:	d111      	bne.n	8004326 <SPI_EndRxTransaction+0x3a>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800430a:	d004      	beq.n	8004316 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004314:	d107      	bne.n	8004326 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004324:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800432e:	d117      	bne.n	8004360 <SPI_EndRxTransaction+0x74>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004338:	d112      	bne.n	8004360 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2200      	movs	r2, #0
 8004342:	2101      	movs	r1, #1
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f7ff ff49 	bl	80041dc <SPI_WaitFlagStateUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01a      	beq.n	8004386 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004354:	f043 0220 	orr.w	r2, r3, #32
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e013      	b.n	8004388 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2200      	movs	r2, #0
 8004368:	2180      	movs	r1, #128	@ 0x80
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f7ff ff36 	bl	80041dc <SPI_WaitFlagStateUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437a:	f043 0220 	orr.w	r2, r3, #32
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e000      	b.n	8004388 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2200      	movs	r2, #0
 80043a4:	2180      	movs	r1, #128	@ 0x80
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f7ff ff18 	bl	80041dc <SPI_WaitFlagStateUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b6:	f043 0220 	orr.w	r2, r3, #32
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e000      	b.n	80043c4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e041      	b.n	8004462 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fd fe50 	bl	8002098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3304      	adds	r3, #4
 8004408:	4619      	mov	r1, r3
 800440a:	4610      	mov	r0, r2
 800440c:	f000 fa74 	bl	80048f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	d001      	beq.n	8004484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e03a      	b.n	80044fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a18      	ldr	r2, [pc, #96]	@ (8004504 <HAL_TIM_Base_Start_IT+0x98>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00e      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x58>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ae:	d009      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x58>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a14      	ldr	r2, [pc, #80]	@ (8004508 <HAL_TIM_Base_Start_IT+0x9c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x58>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a13      	ldr	r2, [pc, #76]	@ (800450c <HAL_TIM_Base_Start_IT+0xa0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d111      	bne.n	80044e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b06      	cmp	r3, #6
 80044d4:	d010      	beq.n	80044f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0201 	orr.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e6:	e007      	b.n	80044f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr
 8004504:	40012c00 	.word	0x40012c00
 8004508:	40000400 	.word	0x40000400
 800450c:	40000800 	.word	0x40000800

08004510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b02      	cmp	r3, #2
 8004524:	d122      	bne.n	800456c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b02      	cmp	r3, #2
 8004532:	d11b      	bne.n	800456c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0202 	mvn.w	r2, #2
 800453c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f9b4 	bl	80048c0 <HAL_TIM_IC_CaptureCallback>
 8004558:	e005      	b.n	8004566 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f9a7 	bl	80048ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f9b6 	bl	80048d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b04      	cmp	r3, #4
 8004578:	d122      	bne.n	80045c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b04      	cmp	r3, #4
 8004586:	d11b      	bne.n	80045c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0204 	mvn.w	r2, #4
 8004590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2202      	movs	r2, #2
 8004596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f98a 	bl	80048c0 <HAL_TIM_IC_CaptureCallback>
 80045ac:	e005      	b.n	80045ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f97d 	bl	80048ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f98c 	bl	80048d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d122      	bne.n	8004614 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d11b      	bne.n	8004614 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0208 	mvn.w	r2, #8
 80045e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2204      	movs	r2, #4
 80045ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f960 	bl	80048c0 <HAL_TIM_IC_CaptureCallback>
 8004600:	e005      	b.n	800460e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f953 	bl	80048ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f962 	bl	80048d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0310 	and.w	r3, r3, #16
 800461e:	2b10      	cmp	r3, #16
 8004620:	d122      	bne.n	8004668 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0310 	and.w	r3, r3, #16
 800462c:	2b10      	cmp	r3, #16
 800462e:	d11b      	bne.n	8004668 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0210 	mvn.w	r2, #16
 8004638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2208      	movs	r2, #8
 800463e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f936 	bl	80048c0 <HAL_TIM_IC_CaptureCallback>
 8004654:	e005      	b.n	8004662 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f929 	bl	80048ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f938 	bl	80048d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b01      	cmp	r3, #1
 8004674:	d10e      	bne.n	8004694 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b01      	cmp	r3, #1
 8004682:	d107      	bne.n	8004694 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0201 	mvn.w	r2, #1
 800468c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fc ff76 	bl	8001580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800469e:	2b80      	cmp	r3, #128	@ 0x80
 80046a0:	d10e      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ac:	2b80      	cmp	r3, #128	@ 0x80
 80046ae:	d107      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fa7b 	bl	8004bb6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ca:	2b40      	cmp	r3, #64	@ 0x40
 80046cc:	d10e      	bne.n	80046ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d8:	2b40      	cmp	r3, #64	@ 0x40
 80046da:	d107      	bne.n	80046ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f8fc 	bl	80048e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	d10e      	bne.n	8004718 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b20      	cmp	r3, #32
 8004706:	d107      	bne.n	8004718 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0220 	mvn.w	r2, #32
 8004710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fa46 	bl	8004ba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004718:	bf00      	nop
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_TIM_ConfigClockSource+0x1c>
 8004738:	2302      	movs	r3, #2
 800473a:	e0b4      	b.n	80048a6 <HAL_TIM_ConfigClockSource+0x186>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800475a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004762:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004774:	d03e      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0xd4>
 8004776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800477a:	f200 8087 	bhi.w	800488c <HAL_TIM_ConfigClockSource+0x16c>
 800477e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004782:	f000 8086 	beq.w	8004892 <HAL_TIM_ConfigClockSource+0x172>
 8004786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800478a:	d87f      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 800478c:	2b70      	cmp	r3, #112	@ 0x70
 800478e:	d01a      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0xa6>
 8004790:	2b70      	cmp	r3, #112	@ 0x70
 8004792:	d87b      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 8004794:	2b60      	cmp	r3, #96	@ 0x60
 8004796:	d050      	beq.n	800483a <HAL_TIM_ConfigClockSource+0x11a>
 8004798:	2b60      	cmp	r3, #96	@ 0x60
 800479a:	d877      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 800479c:	2b50      	cmp	r3, #80	@ 0x50
 800479e:	d03c      	beq.n	800481a <HAL_TIM_ConfigClockSource+0xfa>
 80047a0:	2b50      	cmp	r3, #80	@ 0x50
 80047a2:	d873      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 80047a4:	2b40      	cmp	r3, #64	@ 0x40
 80047a6:	d058      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x13a>
 80047a8:	2b40      	cmp	r3, #64	@ 0x40
 80047aa:	d86f      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 80047ac:	2b30      	cmp	r3, #48	@ 0x30
 80047ae:	d064      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x15a>
 80047b0:	2b30      	cmp	r3, #48	@ 0x30
 80047b2:	d86b      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d060      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x15a>
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d867      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d05c      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x15a>
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d05a      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x15a>
 80047c4:	e062      	b.n	800488c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047d6:	f000 f968 	bl	8004aaa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	609a      	str	r2, [r3, #8]
      break;
 80047f2:	e04f      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004804:	f000 f951 	bl	8004aaa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004816:	609a      	str	r2, [r3, #8]
      break;
 8004818:	e03c      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004826:	461a      	mov	r2, r3
 8004828:	f000 f8c8 	bl	80049bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2150      	movs	r1, #80	@ 0x50
 8004832:	4618      	mov	r0, r3
 8004834:	f000 f91f 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 8004838:	e02c      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004846:	461a      	mov	r2, r3
 8004848:	f000 f8e6 	bl	8004a18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2160      	movs	r1, #96	@ 0x60
 8004852:	4618      	mov	r0, r3
 8004854:	f000 f90f 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 8004858:	e01c      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004866:	461a      	mov	r2, r3
 8004868:	f000 f8a8 	bl	80049bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2140      	movs	r1, #64	@ 0x40
 8004872:	4618      	mov	r0, r3
 8004874:	f000 f8ff 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 8004878:	e00c      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4619      	mov	r1, r3
 8004884:	4610      	mov	r0, r2
 8004886:	f000 f8f6 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 800488a:	e003      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      break;
 8004890:	e000      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004892:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr

080048d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr

080048e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr
	...

080048f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a29      	ldr	r2, [pc, #164]	@ (80049b0 <TIM_Base_SetConfig+0xb8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00b      	beq.n	8004928 <TIM_Base_SetConfig+0x30>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004916:	d007      	beq.n	8004928 <TIM_Base_SetConfig+0x30>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a26      	ldr	r2, [pc, #152]	@ (80049b4 <TIM_Base_SetConfig+0xbc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <TIM_Base_SetConfig+0x30>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a25      	ldr	r2, [pc, #148]	@ (80049b8 <TIM_Base_SetConfig+0xc0>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d108      	bne.n	800493a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800492e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a1c      	ldr	r2, [pc, #112]	@ (80049b0 <TIM_Base_SetConfig+0xb8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00b      	beq.n	800495a <TIM_Base_SetConfig+0x62>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004948:	d007      	beq.n	800495a <TIM_Base_SetConfig+0x62>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a19      	ldr	r2, [pc, #100]	@ (80049b4 <TIM_Base_SetConfig+0xbc>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d003      	beq.n	800495a <TIM_Base_SetConfig+0x62>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a18      	ldr	r2, [pc, #96]	@ (80049b8 <TIM_Base_SetConfig+0xc0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d108      	bne.n	800496c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a07      	ldr	r2, [pc, #28]	@ (80049b0 <TIM_Base_SetConfig+0xb8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d103      	bne.n	80049a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	691a      	ldr	r2, [r3, #16]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	615a      	str	r2, [r3, #20]
}
 80049a6:	bf00      	nop
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr
 80049b0:	40012c00 	.word	0x40012c00
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800

080049bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f023 0201 	bic.w	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f023 030a 	bic.w	r3, r3, #10
 80049f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	621a      	str	r2, [r3, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr

08004a18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f023 0210 	bic.w	r2, r3, #16
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	031b      	lsls	r3, r3, #12
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	621a      	str	r2, [r3, #32]
}
 8004a6c:	bf00      	nop
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bc80      	pop	{r7}
 8004a74:	4770      	bx	lr

08004a76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f043 0307 	orr.w	r3, r3, #7
 8004a98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	609a      	str	r2, [r3, #8]
}
 8004aa0:	bf00      	nop
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr

08004aaa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b087      	sub	sp, #28
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	607a      	str	r2, [r7, #4]
 8004ab6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ac4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	021a      	lsls	r2, r3, #8
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	431a      	orrs	r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	609a      	str	r2, [r3, #8]
}
 8004ade:	bf00      	nop
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e046      	b.n	8004b8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a16      	ldr	r2, [pc, #88]	@ (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00e      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b4c:	d009      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a12      	ldr	r2, [pc, #72]	@ (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d004      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a10      	ldr	r2, [pc, #64]	@ (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d10c      	bne.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr
 8004b98:	40012c00 	.word	0x40012c00
 8004b9c:	40000400 	.word	0x40000400
 8004ba0:	40000800 	.word	0x40000800

08004ba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e042      	b.n	8004c60 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fd fa78 	bl	80020e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2224      	movs	r2, #36	@ 0x24
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f82b 	bl	8004c68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695a      	ldr	r2, [r3, #20]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004ca2:	f023 030c 	bic.w	r3, r3, #12
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6812      	ldr	r2, [r2, #0]
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	430b      	orrs	r3, r1
 8004cae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a2c      	ldr	r2, [pc, #176]	@ (8004d7c <UART_SetConfig+0x114>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d103      	bne.n	8004cd8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004cd0:	f7fe fc7c 	bl	80035cc <HAL_RCC_GetPCLK2Freq>
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	e002      	b.n	8004cde <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004cd8:	f7fe fc64 	bl	80035a4 <HAL_RCC_GetPCLK1Freq>
 8004cdc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009a      	lsls	r2, r3, #2
 8004ce8:	441a      	add	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	4a22      	ldr	r2, [pc, #136]	@ (8004d80 <UART_SetConfig+0x118>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	0119      	lsls	r1, r3, #4
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	009a      	lsls	r2, r3, #2
 8004d08:	441a      	add	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d14:	4b1a      	ldr	r3, [pc, #104]	@ (8004d80 <UART_SetConfig+0x118>)
 8004d16:	fba3 0302 	umull	r0, r3, r3, r2
 8004d1a:	095b      	lsrs	r3, r3, #5
 8004d1c:	2064      	movs	r0, #100	@ 0x64
 8004d1e:	fb00 f303 	mul.w	r3, r0, r3
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	3332      	adds	r3, #50	@ 0x32
 8004d28:	4a15      	ldr	r2, [pc, #84]	@ (8004d80 <UART_SetConfig+0x118>)
 8004d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d34:	4419      	add	r1, r3
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009a      	lsls	r2, r3, #2
 8004d40:	441a      	add	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d80 <UART_SetConfig+0x118>)
 8004d4e:	fba3 0302 	umull	r0, r3, r3, r2
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	2064      	movs	r0, #100	@ 0x64
 8004d56:	fb00 f303 	mul.w	r3, r0, r3
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	3332      	adds	r3, #50	@ 0x32
 8004d60:	4a07      	ldr	r2, [pc, #28]	@ (8004d80 <UART_SetConfig+0x118>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	095b      	lsrs	r3, r3, #5
 8004d68:	f003 020f 	and.w	r2, r3, #15
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	440a      	add	r2, r1
 8004d72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d74:	bf00      	nop
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40013800 	.word	0x40013800
 8004d80:	51eb851f 	.word	0x51eb851f

08004d84 <__cvt>:
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d8a:	461d      	mov	r5, r3
 8004d8c:	bfbb      	ittet	lt
 8004d8e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004d92:	461d      	movlt	r5, r3
 8004d94:	2300      	movge	r3, #0
 8004d96:	232d      	movlt	r3, #45	@ 0x2d
 8004d98:	b088      	sub	sp, #32
 8004d9a:	4614      	mov	r4, r2
 8004d9c:	bfb8      	it	lt
 8004d9e:	4614      	movlt	r4, r2
 8004da0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004da2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004da4:	7013      	strb	r3, [r2, #0]
 8004da6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004da8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004dac:	f023 0820 	bic.w	r8, r3, #32
 8004db0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004db4:	d005      	beq.n	8004dc2 <__cvt+0x3e>
 8004db6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004dba:	d100      	bne.n	8004dbe <__cvt+0x3a>
 8004dbc:	3601      	adds	r6, #1
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e000      	b.n	8004dc4 <__cvt+0x40>
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	aa07      	add	r2, sp, #28
 8004dc6:	9204      	str	r2, [sp, #16]
 8004dc8:	aa06      	add	r2, sp, #24
 8004dca:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004dce:	e9cd 3600 	strd	r3, r6, [sp]
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	462b      	mov	r3, r5
 8004dd6:	f000 fea3 	bl	8005b20 <_dtoa_r>
 8004dda:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004dde:	4607      	mov	r7, r0
 8004de0:	d119      	bne.n	8004e16 <__cvt+0x92>
 8004de2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004de4:	07db      	lsls	r3, r3, #31
 8004de6:	d50e      	bpl.n	8004e06 <__cvt+0x82>
 8004de8:	eb00 0906 	add.w	r9, r0, r6
 8004dec:	2200      	movs	r2, #0
 8004dee:	2300      	movs	r3, #0
 8004df0:	4620      	mov	r0, r4
 8004df2:	4629      	mov	r1, r5
 8004df4:	f7fb fdd8 	bl	80009a8 <__aeabi_dcmpeq>
 8004df8:	b108      	cbz	r0, 8004dfe <__cvt+0x7a>
 8004dfa:	f8cd 901c 	str.w	r9, [sp, #28]
 8004dfe:	2230      	movs	r2, #48	@ 0x30
 8004e00:	9b07      	ldr	r3, [sp, #28]
 8004e02:	454b      	cmp	r3, r9
 8004e04:	d31e      	bcc.n	8004e44 <__cvt+0xc0>
 8004e06:	4638      	mov	r0, r7
 8004e08:	9b07      	ldr	r3, [sp, #28]
 8004e0a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004e0c:	1bdb      	subs	r3, r3, r7
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	b008      	add	sp, #32
 8004e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e16:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e1a:	eb00 0906 	add.w	r9, r0, r6
 8004e1e:	d1e5      	bne.n	8004dec <__cvt+0x68>
 8004e20:	7803      	ldrb	r3, [r0, #0]
 8004e22:	2b30      	cmp	r3, #48	@ 0x30
 8004e24:	d10a      	bne.n	8004e3c <__cvt+0xb8>
 8004e26:	2200      	movs	r2, #0
 8004e28:	2300      	movs	r3, #0
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	4629      	mov	r1, r5
 8004e2e:	f7fb fdbb 	bl	80009a8 <__aeabi_dcmpeq>
 8004e32:	b918      	cbnz	r0, 8004e3c <__cvt+0xb8>
 8004e34:	f1c6 0601 	rsb	r6, r6, #1
 8004e38:	f8ca 6000 	str.w	r6, [sl]
 8004e3c:	f8da 3000 	ldr.w	r3, [sl]
 8004e40:	4499      	add	r9, r3
 8004e42:	e7d3      	b.n	8004dec <__cvt+0x68>
 8004e44:	1c59      	adds	r1, r3, #1
 8004e46:	9107      	str	r1, [sp, #28]
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	e7d9      	b.n	8004e00 <__cvt+0x7c>

08004e4c <__exponent>:
 8004e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e4e:	2900      	cmp	r1, #0
 8004e50:	bfb6      	itet	lt
 8004e52:	232d      	movlt	r3, #45	@ 0x2d
 8004e54:	232b      	movge	r3, #43	@ 0x2b
 8004e56:	4249      	neglt	r1, r1
 8004e58:	2909      	cmp	r1, #9
 8004e5a:	7002      	strb	r2, [r0, #0]
 8004e5c:	7043      	strb	r3, [r0, #1]
 8004e5e:	dd29      	ble.n	8004eb4 <__exponent+0x68>
 8004e60:	f10d 0307 	add.w	r3, sp, #7
 8004e64:	461d      	mov	r5, r3
 8004e66:	270a      	movs	r7, #10
 8004e68:	fbb1 f6f7 	udiv	r6, r1, r7
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	fb07 1416 	mls	r4, r7, r6, r1
 8004e72:	3430      	adds	r4, #48	@ 0x30
 8004e74:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004e78:	460c      	mov	r4, r1
 8004e7a:	2c63      	cmp	r4, #99	@ 0x63
 8004e7c:	4631      	mov	r1, r6
 8004e7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e82:	dcf1      	bgt.n	8004e68 <__exponent+0x1c>
 8004e84:	3130      	adds	r1, #48	@ 0x30
 8004e86:	1e94      	subs	r4, r2, #2
 8004e88:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e8c:	4623      	mov	r3, r4
 8004e8e:	1c41      	adds	r1, r0, #1
 8004e90:	42ab      	cmp	r3, r5
 8004e92:	d30a      	bcc.n	8004eaa <__exponent+0x5e>
 8004e94:	f10d 0309 	add.w	r3, sp, #9
 8004e98:	1a9b      	subs	r3, r3, r2
 8004e9a:	42ac      	cmp	r4, r5
 8004e9c:	bf88      	it	hi
 8004e9e:	2300      	movhi	r3, #0
 8004ea0:	3302      	adds	r3, #2
 8004ea2:	4403      	add	r3, r0
 8004ea4:	1a18      	subs	r0, r3, r0
 8004ea6:	b003      	add	sp, #12
 8004ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eaa:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004eae:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004eb2:	e7ed      	b.n	8004e90 <__exponent+0x44>
 8004eb4:	2330      	movs	r3, #48	@ 0x30
 8004eb6:	3130      	adds	r1, #48	@ 0x30
 8004eb8:	7083      	strb	r3, [r0, #2]
 8004eba:	70c1      	strb	r1, [r0, #3]
 8004ebc:	1d03      	adds	r3, r0, #4
 8004ebe:	e7f1      	b.n	8004ea4 <__exponent+0x58>

08004ec0 <_printf_float>:
 8004ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec4:	b091      	sub	sp, #68	@ 0x44
 8004ec6:	460c      	mov	r4, r1
 8004ec8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004ecc:	4616      	mov	r6, r2
 8004ece:	461f      	mov	r7, r3
 8004ed0:	4605      	mov	r5, r0
 8004ed2:	f000 fd15 	bl	8005900 <_localeconv_r>
 8004ed6:	6803      	ldr	r3, [r0, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	9308      	str	r3, [sp, #32]
 8004edc:	f7fb f938 	bl	8000150 <strlen>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	930e      	str	r3, [sp, #56]	@ 0x38
 8004ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ee8:	9009      	str	r0, [sp, #36]	@ 0x24
 8004eea:	3307      	adds	r3, #7
 8004eec:	f023 0307 	bic.w	r3, r3, #7
 8004ef0:	f103 0208 	add.w	r2, r3, #8
 8004ef4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004ef8:	f8d4 b000 	ldr.w	fp, [r4]
 8004efc:	f8c8 2000 	str.w	r2, [r8]
 8004f00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f04:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004f08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f0a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004f16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004f1a:	4b9c      	ldr	r3, [pc, #624]	@ (800518c <_printf_float+0x2cc>)
 8004f1c:	f7fb fd76 	bl	8000a0c <__aeabi_dcmpun>
 8004f20:	bb70      	cbnz	r0, 8004f80 <_printf_float+0xc0>
 8004f22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004f26:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2a:	4b98      	ldr	r3, [pc, #608]	@ (800518c <_printf_float+0x2cc>)
 8004f2c:	f7fb fd50 	bl	80009d0 <__aeabi_dcmple>
 8004f30:	bb30      	cbnz	r0, 8004f80 <_printf_float+0xc0>
 8004f32:	2200      	movs	r2, #0
 8004f34:	2300      	movs	r3, #0
 8004f36:	4640      	mov	r0, r8
 8004f38:	4649      	mov	r1, r9
 8004f3a:	f7fb fd3f 	bl	80009bc <__aeabi_dcmplt>
 8004f3e:	b110      	cbz	r0, 8004f46 <_printf_float+0x86>
 8004f40:	232d      	movs	r3, #45	@ 0x2d
 8004f42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f46:	4a92      	ldr	r2, [pc, #584]	@ (8005190 <_printf_float+0x2d0>)
 8004f48:	4b92      	ldr	r3, [pc, #584]	@ (8005194 <_printf_float+0x2d4>)
 8004f4a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004f4e:	bf94      	ite	ls
 8004f50:	4690      	movls	r8, r2
 8004f52:	4698      	movhi	r8, r3
 8004f54:	2303      	movs	r3, #3
 8004f56:	f04f 0900 	mov.w	r9, #0
 8004f5a:	6123      	str	r3, [r4, #16]
 8004f5c:	f02b 0304 	bic.w	r3, fp, #4
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	4633      	mov	r3, r6
 8004f64:	4621      	mov	r1, r4
 8004f66:	4628      	mov	r0, r5
 8004f68:	9700      	str	r7, [sp, #0]
 8004f6a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004f6c:	f000 f9d4 	bl	8005318 <_printf_common>
 8004f70:	3001      	adds	r0, #1
 8004f72:	f040 8090 	bne.w	8005096 <_printf_float+0x1d6>
 8004f76:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7a:	b011      	add	sp, #68	@ 0x44
 8004f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f80:	4642      	mov	r2, r8
 8004f82:	464b      	mov	r3, r9
 8004f84:	4640      	mov	r0, r8
 8004f86:	4649      	mov	r1, r9
 8004f88:	f7fb fd40 	bl	8000a0c <__aeabi_dcmpun>
 8004f8c:	b148      	cbz	r0, 8004fa2 <_printf_float+0xe2>
 8004f8e:	464b      	mov	r3, r9
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bfb8      	it	lt
 8004f94:	232d      	movlt	r3, #45	@ 0x2d
 8004f96:	4a80      	ldr	r2, [pc, #512]	@ (8005198 <_printf_float+0x2d8>)
 8004f98:	bfb8      	it	lt
 8004f9a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004f9e:	4b7f      	ldr	r3, [pc, #508]	@ (800519c <_printf_float+0x2dc>)
 8004fa0:	e7d3      	b.n	8004f4a <_printf_float+0x8a>
 8004fa2:	6863      	ldr	r3, [r4, #4]
 8004fa4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	d13f      	bne.n	800502c <_printf_float+0x16c>
 8004fac:	2306      	movs	r3, #6
 8004fae:	6063      	str	r3, [r4, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004fb6:	6023      	str	r3, [r4, #0]
 8004fb8:	9206      	str	r2, [sp, #24]
 8004fba:	aa0e      	add	r2, sp, #56	@ 0x38
 8004fbc:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004fc0:	aa0d      	add	r2, sp, #52	@ 0x34
 8004fc2:	9203      	str	r2, [sp, #12]
 8004fc4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004fc8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004fcc:	6863      	ldr	r3, [r4, #4]
 8004fce:	4642      	mov	r2, r8
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	464b      	mov	r3, r9
 8004fd6:	910a      	str	r1, [sp, #40]	@ 0x28
 8004fd8:	f7ff fed4 	bl	8004d84 <__cvt>
 8004fdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004fde:	4680      	mov	r8, r0
 8004fe0:	2947      	cmp	r1, #71	@ 0x47
 8004fe2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004fe4:	d128      	bne.n	8005038 <_printf_float+0x178>
 8004fe6:	1cc8      	adds	r0, r1, #3
 8004fe8:	db02      	blt.n	8004ff0 <_printf_float+0x130>
 8004fea:	6863      	ldr	r3, [r4, #4]
 8004fec:	4299      	cmp	r1, r3
 8004fee:	dd40      	ble.n	8005072 <_printf_float+0x1b2>
 8004ff0:	f1aa 0a02 	sub.w	sl, sl, #2
 8004ff4:	fa5f fa8a 	uxtb.w	sl, sl
 8004ff8:	4652      	mov	r2, sl
 8004ffa:	3901      	subs	r1, #1
 8004ffc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005000:	910d      	str	r1, [sp, #52]	@ 0x34
 8005002:	f7ff ff23 	bl	8004e4c <__exponent>
 8005006:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005008:	4681      	mov	r9, r0
 800500a:	1813      	adds	r3, r2, r0
 800500c:	2a01      	cmp	r2, #1
 800500e:	6123      	str	r3, [r4, #16]
 8005010:	dc02      	bgt.n	8005018 <_printf_float+0x158>
 8005012:	6822      	ldr	r2, [r4, #0]
 8005014:	07d2      	lsls	r2, r2, #31
 8005016:	d501      	bpl.n	800501c <_printf_float+0x15c>
 8005018:	3301      	adds	r3, #1
 800501a:	6123      	str	r3, [r4, #16]
 800501c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005020:	2b00      	cmp	r3, #0
 8005022:	d09e      	beq.n	8004f62 <_printf_float+0xa2>
 8005024:	232d      	movs	r3, #45	@ 0x2d
 8005026:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800502a:	e79a      	b.n	8004f62 <_printf_float+0xa2>
 800502c:	2947      	cmp	r1, #71	@ 0x47
 800502e:	d1bf      	bne.n	8004fb0 <_printf_float+0xf0>
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1bd      	bne.n	8004fb0 <_printf_float+0xf0>
 8005034:	2301      	movs	r3, #1
 8005036:	e7ba      	b.n	8004fae <_printf_float+0xee>
 8005038:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800503c:	d9dc      	bls.n	8004ff8 <_printf_float+0x138>
 800503e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005042:	d118      	bne.n	8005076 <_printf_float+0x1b6>
 8005044:	2900      	cmp	r1, #0
 8005046:	6863      	ldr	r3, [r4, #4]
 8005048:	dd0b      	ble.n	8005062 <_printf_float+0x1a2>
 800504a:	6121      	str	r1, [r4, #16]
 800504c:	b913      	cbnz	r3, 8005054 <_printf_float+0x194>
 800504e:	6822      	ldr	r2, [r4, #0]
 8005050:	07d0      	lsls	r0, r2, #31
 8005052:	d502      	bpl.n	800505a <_printf_float+0x19a>
 8005054:	3301      	adds	r3, #1
 8005056:	440b      	add	r3, r1
 8005058:	6123      	str	r3, [r4, #16]
 800505a:	f04f 0900 	mov.w	r9, #0
 800505e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005060:	e7dc      	b.n	800501c <_printf_float+0x15c>
 8005062:	b913      	cbnz	r3, 800506a <_printf_float+0x1aa>
 8005064:	6822      	ldr	r2, [r4, #0]
 8005066:	07d2      	lsls	r2, r2, #31
 8005068:	d501      	bpl.n	800506e <_printf_float+0x1ae>
 800506a:	3302      	adds	r3, #2
 800506c:	e7f4      	b.n	8005058 <_printf_float+0x198>
 800506e:	2301      	movs	r3, #1
 8005070:	e7f2      	b.n	8005058 <_printf_float+0x198>
 8005072:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005076:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005078:	4299      	cmp	r1, r3
 800507a:	db05      	blt.n	8005088 <_printf_float+0x1c8>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	6121      	str	r1, [r4, #16]
 8005080:	07d8      	lsls	r0, r3, #31
 8005082:	d5ea      	bpl.n	800505a <_printf_float+0x19a>
 8005084:	1c4b      	adds	r3, r1, #1
 8005086:	e7e7      	b.n	8005058 <_printf_float+0x198>
 8005088:	2900      	cmp	r1, #0
 800508a:	bfcc      	ite	gt
 800508c:	2201      	movgt	r2, #1
 800508e:	f1c1 0202 	rsble	r2, r1, #2
 8005092:	4413      	add	r3, r2
 8005094:	e7e0      	b.n	8005058 <_printf_float+0x198>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	055a      	lsls	r2, r3, #21
 800509a:	d407      	bmi.n	80050ac <_printf_float+0x1ec>
 800509c:	6923      	ldr	r3, [r4, #16]
 800509e:	4642      	mov	r2, r8
 80050a0:	4631      	mov	r1, r6
 80050a2:	4628      	mov	r0, r5
 80050a4:	47b8      	blx	r7
 80050a6:	3001      	adds	r0, #1
 80050a8:	d12b      	bne.n	8005102 <_printf_float+0x242>
 80050aa:	e764      	b.n	8004f76 <_printf_float+0xb6>
 80050ac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80050b0:	f240 80dc 	bls.w	800526c <_printf_float+0x3ac>
 80050b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80050b8:	2200      	movs	r2, #0
 80050ba:	2300      	movs	r3, #0
 80050bc:	f7fb fc74 	bl	80009a8 <__aeabi_dcmpeq>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	d033      	beq.n	800512c <_printf_float+0x26c>
 80050c4:	2301      	movs	r3, #1
 80050c6:	4631      	mov	r1, r6
 80050c8:	4628      	mov	r0, r5
 80050ca:	4a35      	ldr	r2, [pc, #212]	@ (80051a0 <_printf_float+0x2e0>)
 80050cc:	47b8      	blx	r7
 80050ce:	3001      	adds	r0, #1
 80050d0:	f43f af51 	beq.w	8004f76 <_printf_float+0xb6>
 80050d4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80050d8:	4543      	cmp	r3, r8
 80050da:	db02      	blt.n	80050e2 <_printf_float+0x222>
 80050dc:	6823      	ldr	r3, [r4, #0]
 80050de:	07d8      	lsls	r0, r3, #31
 80050e0:	d50f      	bpl.n	8005102 <_printf_float+0x242>
 80050e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80050e6:	4631      	mov	r1, r6
 80050e8:	4628      	mov	r0, r5
 80050ea:	47b8      	blx	r7
 80050ec:	3001      	adds	r0, #1
 80050ee:	f43f af42 	beq.w	8004f76 <_printf_float+0xb6>
 80050f2:	f04f 0900 	mov.w	r9, #0
 80050f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80050fa:	f104 0a1a 	add.w	sl, r4, #26
 80050fe:	45c8      	cmp	r8, r9
 8005100:	dc09      	bgt.n	8005116 <_printf_float+0x256>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	079b      	lsls	r3, r3, #30
 8005106:	f100 8102 	bmi.w	800530e <_printf_float+0x44e>
 800510a:	68e0      	ldr	r0, [r4, #12]
 800510c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800510e:	4298      	cmp	r0, r3
 8005110:	bfb8      	it	lt
 8005112:	4618      	movlt	r0, r3
 8005114:	e731      	b.n	8004f7a <_printf_float+0xba>
 8005116:	2301      	movs	r3, #1
 8005118:	4652      	mov	r2, sl
 800511a:	4631      	mov	r1, r6
 800511c:	4628      	mov	r0, r5
 800511e:	47b8      	blx	r7
 8005120:	3001      	adds	r0, #1
 8005122:	f43f af28 	beq.w	8004f76 <_printf_float+0xb6>
 8005126:	f109 0901 	add.w	r9, r9, #1
 800512a:	e7e8      	b.n	80050fe <_printf_float+0x23e>
 800512c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800512e:	2b00      	cmp	r3, #0
 8005130:	dc38      	bgt.n	80051a4 <_printf_float+0x2e4>
 8005132:	2301      	movs	r3, #1
 8005134:	4631      	mov	r1, r6
 8005136:	4628      	mov	r0, r5
 8005138:	4a19      	ldr	r2, [pc, #100]	@ (80051a0 <_printf_float+0x2e0>)
 800513a:	47b8      	blx	r7
 800513c:	3001      	adds	r0, #1
 800513e:	f43f af1a 	beq.w	8004f76 <_printf_float+0xb6>
 8005142:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005146:	ea59 0303 	orrs.w	r3, r9, r3
 800514a:	d102      	bne.n	8005152 <_printf_float+0x292>
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	07d9      	lsls	r1, r3, #31
 8005150:	d5d7      	bpl.n	8005102 <_printf_float+0x242>
 8005152:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005156:	4631      	mov	r1, r6
 8005158:	4628      	mov	r0, r5
 800515a:	47b8      	blx	r7
 800515c:	3001      	adds	r0, #1
 800515e:	f43f af0a 	beq.w	8004f76 <_printf_float+0xb6>
 8005162:	f04f 0a00 	mov.w	sl, #0
 8005166:	f104 0b1a 	add.w	fp, r4, #26
 800516a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800516c:	425b      	negs	r3, r3
 800516e:	4553      	cmp	r3, sl
 8005170:	dc01      	bgt.n	8005176 <_printf_float+0x2b6>
 8005172:	464b      	mov	r3, r9
 8005174:	e793      	b.n	800509e <_printf_float+0x1de>
 8005176:	2301      	movs	r3, #1
 8005178:	465a      	mov	r2, fp
 800517a:	4631      	mov	r1, r6
 800517c:	4628      	mov	r0, r5
 800517e:	47b8      	blx	r7
 8005180:	3001      	adds	r0, #1
 8005182:	f43f aef8 	beq.w	8004f76 <_printf_float+0xb6>
 8005186:	f10a 0a01 	add.w	sl, sl, #1
 800518a:	e7ee      	b.n	800516a <_printf_float+0x2aa>
 800518c:	7fefffff 	.word	0x7fefffff
 8005190:	08008c96 	.word	0x08008c96
 8005194:	08008c9a 	.word	0x08008c9a
 8005198:	08008c9e 	.word	0x08008c9e
 800519c:	08008ca2 	.word	0x08008ca2
 80051a0:	08008ca6 	.word	0x08008ca6
 80051a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051a6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80051aa:	4553      	cmp	r3, sl
 80051ac:	bfa8      	it	ge
 80051ae:	4653      	movge	r3, sl
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	4699      	mov	r9, r3
 80051b4:	dc36      	bgt.n	8005224 <_printf_float+0x364>
 80051b6:	f04f 0b00 	mov.w	fp, #0
 80051ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051be:	f104 021a 	add.w	r2, r4, #26
 80051c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80051c6:	eba3 0309 	sub.w	r3, r3, r9
 80051ca:	455b      	cmp	r3, fp
 80051cc:	dc31      	bgt.n	8005232 <_printf_float+0x372>
 80051ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051d0:	459a      	cmp	sl, r3
 80051d2:	dc3a      	bgt.n	800524a <_printf_float+0x38a>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	07da      	lsls	r2, r3, #31
 80051d8:	d437      	bmi.n	800524a <_printf_float+0x38a>
 80051da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051dc:	ebaa 0903 	sub.w	r9, sl, r3
 80051e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051e2:	ebaa 0303 	sub.w	r3, sl, r3
 80051e6:	4599      	cmp	r9, r3
 80051e8:	bfa8      	it	ge
 80051ea:	4699      	movge	r9, r3
 80051ec:	f1b9 0f00 	cmp.w	r9, #0
 80051f0:	dc33      	bgt.n	800525a <_printf_float+0x39a>
 80051f2:	f04f 0800 	mov.w	r8, #0
 80051f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051fa:	f104 0b1a 	add.w	fp, r4, #26
 80051fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005200:	ebaa 0303 	sub.w	r3, sl, r3
 8005204:	eba3 0309 	sub.w	r3, r3, r9
 8005208:	4543      	cmp	r3, r8
 800520a:	f77f af7a 	ble.w	8005102 <_printf_float+0x242>
 800520e:	2301      	movs	r3, #1
 8005210:	465a      	mov	r2, fp
 8005212:	4631      	mov	r1, r6
 8005214:	4628      	mov	r0, r5
 8005216:	47b8      	blx	r7
 8005218:	3001      	adds	r0, #1
 800521a:	f43f aeac 	beq.w	8004f76 <_printf_float+0xb6>
 800521e:	f108 0801 	add.w	r8, r8, #1
 8005222:	e7ec      	b.n	80051fe <_printf_float+0x33e>
 8005224:	4642      	mov	r2, r8
 8005226:	4631      	mov	r1, r6
 8005228:	4628      	mov	r0, r5
 800522a:	47b8      	blx	r7
 800522c:	3001      	adds	r0, #1
 800522e:	d1c2      	bne.n	80051b6 <_printf_float+0x2f6>
 8005230:	e6a1      	b.n	8004f76 <_printf_float+0xb6>
 8005232:	2301      	movs	r3, #1
 8005234:	4631      	mov	r1, r6
 8005236:	4628      	mov	r0, r5
 8005238:	920a      	str	r2, [sp, #40]	@ 0x28
 800523a:	47b8      	blx	r7
 800523c:	3001      	adds	r0, #1
 800523e:	f43f ae9a 	beq.w	8004f76 <_printf_float+0xb6>
 8005242:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005244:	f10b 0b01 	add.w	fp, fp, #1
 8005248:	e7bb      	b.n	80051c2 <_printf_float+0x302>
 800524a:	4631      	mov	r1, r6
 800524c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005250:	4628      	mov	r0, r5
 8005252:	47b8      	blx	r7
 8005254:	3001      	adds	r0, #1
 8005256:	d1c0      	bne.n	80051da <_printf_float+0x31a>
 8005258:	e68d      	b.n	8004f76 <_printf_float+0xb6>
 800525a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800525c:	464b      	mov	r3, r9
 800525e:	4631      	mov	r1, r6
 8005260:	4628      	mov	r0, r5
 8005262:	4442      	add	r2, r8
 8005264:	47b8      	blx	r7
 8005266:	3001      	adds	r0, #1
 8005268:	d1c3      	bne.n	80051f2 <_printf_float+0x332>
 800526a:	e684      	b.n	8004f76 <_printf_float+0xb6>
 800526c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005270:	f1ba 0f01 	cmp.w	sl, #1
 8005274:	dc01      	bgt.n	800527a <_printf_float+0x3ba>
 8005276:	07db      	lsls	r3, r3, #31
 8005278:	d536      	bpl.n	80052e8 <_printf_float+0x428>
 800527a:	2301      	movs	r3, #1
 800527c:	4642      	mov	r2, r8
 800527e:	4631      	mov	r1, r6
 8005280:	4628      	mov	r0, r5
 8005282:	47b8      	blx	r7
 8005284:	3001      	adds	r0, #1
 8005286:	f43f ae76 	beq.w	8004f76 <_printf_float+0xb6>
 800528a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800528e:	4631      	mov	r1, r6
 8005290:	4628      	mov	r0, r5
 8005292:	47b8      	blx	r7
 8005294:	3001      	adds	r0, #1
 8005296:	f43f ae6e 	beq.w	8004f76 <_printf_float+0xb6>
 800529a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800529e:	2200      	movs	r2, #0
 80052a0:	2300      	movs	r3, #0
 80052a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052a6:	f7fb fb7f 	bl	80009a8 <__aeabi_dcmpeq>
 80052aa:	b9c0      	cbnz	r0, 80052de <_printf_float+0x41e>
 80052ac:	4653      	mov	r3, sl
 80052ae:	f108 0201 	add.w	r2, r8, #1
 80052b2:	4631      	mov	r1, r6
 80052b4:	4628      	mov	r0, r5
 80052b6:	47b8      	blx	r7
 80052b8:	3001      	adds	r0, #1
 80052ba:	d10c      	bne.n	80052d6 <_printf_float+0x416>
 80052bc:	e65b      	b.n	8004f76 <_printf_float+0xb6>
 80052be:	2301      	movs	r3, #1
 80052c0:	465a      	mov	r2, fp
 80052c2:	4631      	mov	r1, r6
 80052c4:	4628      	mov	r0, r5
 80052c6:	47b8      	blx	r7
 80052c8:	3001      	adds	r0, #1
 80052ca:	f43f ae54 	beq.w	8004f76 <_printf_float+0xb6>
 80052ce:	f108 0801 	add.w	r8, r8, #1
 80052d2:	45d0      	cmp	r8, sl
 80052d4:	dbf3      	blt.n	80052be <_printf_float+0x3fe>
 80052d6:	464b      	mov	r3, r9
 80052d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80052dc:	e6e0      	b.n	80050a0 <_printf_float+0x1e0>
 80052de:	f04f 0800 	mov.w	r8, #0
 80052e2:	f104 0b1a 	add.w	fp, r4, #26
 80052e6:	e7f4      	b.n	80052d2 <_printf_float+0x412>
 80052e8:	2301      	movs	r3, #1
 80052ea:	4642      	mov	r2, r8
 80052ec:	e7e1      	b.n	80052b2 <_printf_float+0x3f2>
 80052ee:	2301      	movs	r3, #1
 80052f0:	464a      	mov	r2, r9
 80052f2:	4631      	mov	r1, r6
 80052f4:	4628      	mov	r0, r5
 80052f6:	47b8      	blx	r7
 80052f8:	3001      	adds	r0, #1
 80052fa:	f43f ae3c 	beq.w	8004f76 <_printf_float+0xb6>
 80052fe:	f108 0801 	add.w	r8, r8, #1
 8005302:	68e3      	ldr	r3, [r4, #12]
 8005304:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005306:	1a5b      	subs	r3, r3, r1
 8005308:	4543      	cmp	r3, r8
 800530a:	dcf0      	bgt.n	80052ee <_printf_float+0x42e>
 800530c:	e6fd      	b.n	800510a <_printf_float+0x24a>
 800530e:	f04f 0800 	mov.w	r8, #0
 8005312:	f104 0919 	add.w	r9, r4, #25
 8005316:	e7f4      	b.n	8005302 <_printf_float+0x442>

08005318 <_printf_common>:
 8005318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800531c:	4616      	mov	r6, r2
 800531e:	4698      	mov	r8, r3
 8005320:	688a      	ldr	r2, [r1, #8]
 8005322:	690b      	ldr	r3, [r1, #16]
 8005324:	4607      	mov	r7, r0
 8005326:	4293      	cmp	r3, r2
 8005328:	bfb8      	it	lt
 800532a:	4613      	movlt	r3, r2
 800532c:	6033      	str	r3, [r6, #0]
 800532e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005332:	460c      	mov	r4, r1
 8005334:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005338:	b10a      	cbz	r2, 800533e <_printf_common+0x26>
 800533a:	3301      	adds	r3, #1
 800533c:	6033      	str	r3, [r6, #0]
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	0699      	lsls	r1, r3, #26
 8005342:	bf42      	ittt	mi
 8005344:	6833      	ldrmi	r3, [r6, #0]
 8005346:	3302      	addmi	r3, #2
 8005348:	6033      	strmi	r3, [r6, #0]
 800534a:	6825      	ldr	r5, [r4, #0]
 800534c:	f015 0506 	ands.w	r5, r5, #6
 8005350:	d106      	bne.n	8005360 <_printf_common+0x48>
 8005352:	f104 0a19 	add.w	sl, r4, #25
 8005356:	68e3      	ldr	r3, [r4, #12]
 8005358:	6832      	ldr	r2, [r6, #0]
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	42ab      	cmp	r3, r5
 800535e:	dc2b      	bgt.n	80053b8 <_printf_common+0xa0>
 8005360:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005364:	6822      	ldr	r2, [r4, #0]
 8005366:	3b00      	subs	r3, #0
 8005368:	bf18      	it	ne
 800536a:	2301      	movne	r3, #1
 800536c:	0692      	lsls	r2, r2, #26
 800536e:	d430      	bmi.n	80053d2 <_printf_common+0xba>
 8005370:	4641      	mov	r1, r8
 8005372:	4638      	mov	r0, r7
 8005374:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005378:	47c8      	blx	r9
 800537a:	3001      	adds	r0, #1
 800537c:	d023      	beq.n	80053c6 <_printf_common+0xae>
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	6922      	ldr	r2, [r4, #16]
 8005382:	f003 0306 	and.w	r3, r3, #6
 8005386:	2b04      	cmp	r3, #4
 8005388:	bf14      	ite	ne
 800538a:	2500      	movne	r5, #0
 800538c:	6833      	ldreq	r3, [r6, #0]
 800538e:	f04f 0600 	mov.w	r6, #0
 8005392:	bf08      	it	eq
 8005394:	68e5      	ldreq	r5, [r4, #12]
 8005396:	f104 041a 	add.w	r4, r4, #26
 800539a:	bf08      	it	eq
 800539c:	1aed      	subeq	r5, r5, r3
 800539e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80053a2:	bf08      	it	eq
 80053a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053a8:	4293      	cmp	r3, r2
 80053aa:	bfc4      	itt	gt
 80053ac:	1a9b      	subgt	r3, r3, r2
 80053ae:	18ed      	addgt	r5, r5, r3
 80053b0:	42b5      	cmp	r5, r6
 80053b2:	d11a      	bne.n	80053ea <_printf_common+0xd2>
 80053b4:	2000      	movs	r0, #0
 80053b6:	e008      	b.n	80053ca <_printf_common+0xb2>
 80053b8:	2301      	movs	r3, #1
 80053ba:	4652      	mov	r2, sl
 80053bc:	4641      	mov	r1, r8
 80053be:	4638      	mov	r0, r7
 80053c0:	47c8      	blx	r9
 80053c2:	3001      	adds	r0, #1
 80053c4:	d103      	bne.n	80053ce <_printf_common+0xb6>
 80053c6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ce:	3501      	adds	r5, #1
 80053d0:	e7c1      	b.n	8005356 <_printf_common+0x3e>
 80053d2:	2030      	movs	r0, #48	@ 0x30
 80053d4:	18e1      	adds	r1, r4, r3
 80053d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053e0:	4422      	add	r2, r4
 80053e2:	3302      	adds	r3, #2
 80053e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053e8:	e7c2      	b.n	8005370 <_printf_common+0x58>
 80053ea:	2301      	movs	r3, #1
 80053ec:	4622      	mov	r2, r4
 80053ee:	4641      	mov	r1, r8
 80053f0:	4638      	mov	r0, r7
 80053f2:	47c8      	blx	r9
 80053f4:	3001      	adds	r0, #1
 80053f6:	d0e6      	beq.n	80053c6 <_printf_common+0xae>
 80053f8:	3601      	adds	r6, #1
 80053fa:	e7d9      	b.n	80053b0 <_printf_common+0x98>

080053fc <_printf_i>:
 80053fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005400:	7e0f      	ldrb	r7, [r1, #24]
 8005402:	4691      	mov	r9, r2
 8005404:	2f78      	cmp	r7, #120	@ 0x78
 8005406:	4680      	mov	r8, r0
 8005408:	460c      	mov	r4, r1
 800540a:	469a      	mov	sl, r3
 800540c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800540e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005412:	d807      	bhi.n	8005424 <_printf_i+0x28>
 8005414:	2f62      	cmp	r7, #98	@ 0x62
 8005416:	d80a      	bhi.n	800542e <_printf_i+0x32>
 8005418:	2f00      	cmp	r7, #0
 800541a:	f000 80d3 	beq.w	80055c4 <_printf_i+0x1c8>
 800541e:	2f58      	cmp	r7, #88	@ 0x58
 8005420:	f000 80ba 	beq.w	8005598 <_printf_i+0x19c>
 8005424:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005428:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800542c:	e03a      	b.n	80054a4 <_printf_i+0xa8>
 800542e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005432:	2b15      	cmp	r3, #21
 8005434:	d8f6      	bhi.n	8005424 <_printf_i+0x28>
 8005436:	a101      	add	r1, pc, #4	@ (adr r1, 800543c <_printf_i+0x40>)
 8005438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800543c:	08005495 	.word	0x08005495
 8005440:	080054a9 	.word	0x080054a9
 8005444:	08005425 	.word	0x08005425
 8005448:	08005425 	.word	0x08005425
 800544c:	08005425 	.word	0x08005425
 8005450:	08005425 	.word	0x08005425
 8005454:	080054a9 	.word	0x080054a9
 8005458:	08005425 	.word	0x08005425
 800545c:	08005425 	.word	0x08005425
 8005460:	08005425 	.word	0x08005425
 8005464:	08005425 	.word	0x08005425
 8005468:	080055ab 	.word	0x080055ab
 800546c:	080054d3 	.word	0x080054d3
 8005470:	08005565 	.word	0x08005565
 8005474:	08005425 	.word	0x08005425
 8005478:	08005425 	.word	0x08005425
 800547c:	080055cd 	.word	0x080055cd
 8005480:	08005425 	.word	0x08005425
 8005484:	080054d3 	.word	0x080054d3
 8005488:	08005425 	.word	0x08005425
 800548c:	08005425 	.word	0x08005425
 8005490:	0800556d 	.word	0x0800556d
 8005494:	6833      	ldr	r3, [r6, #0]
 8005496:	1d1a      	adds	r2, r3, #4
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6032      	str	r2, [r6, #0]
 800549c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054a4:	2301      	movs	r3, #1
 80054a6:	e09e      	b.n	80055e6 <_printf_i+0x1ea>
 80054a8:	6833      	ldr	r3, [r6, #0]
 80054aa:	6820      	ldr	r0, [r4, #0]
 80054ac:	1d19      	adds	r1, r3, #4
 80054ae:	6031      	str	r1, [r6, #0]
 80054b0:	0606      	lsls	r6, r0, #24
 80054b2:	d501      	bpl.n	80054b8 <_printf_i+0xbc>
 80054b4:	681d      	ldr	r5, [r3, #0]
 80054b6:	e003      	b.n	80054c0 <_printf_i+0xc4>
 80054b8:	0645      	lsls	r5, r0, #25
 80054ba:	d5fb      	bpl.n	80054b4 <_printf_i+0xb8>
 80054bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054c0:	2d00      	cmp	r5, #0
 80054c2:	da03      	bge.n	80054cc <_printf_i+0xd0>
 80054c4:	232d      	movs	r3, #45	@ 0x2d
 80054c6:	426d      	negs	r5, r5
 80054c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054cc:	230a      	movs	r3, #10
 80054ce:	4859      	ldr	r0, [pc, #356]	@ (8005634 <_printf_i+0x238>)
 80054d0:	e011      	b.n	80054f6 <_printf_i+0xfa>
 80054d2:	6821      	ldr	r1, [r4, #0]
 80054d4:	6833      	ldr	r3, [r6, #0]
 80054d6:	0608      	lsls	r0, r1, #24
 80054d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80054dc:	d402      	bmi.n	80054e4 <_printf_i+0xe8>
 80054de:	0649      	lsls	r1, r1, #25
 80054e0:	bf48      	it	mi
 80054e2:	b2ad      	uxthmi	r5, r5
 80054e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80054e6:	6033      	str	r3, [r6, #0]
 80054e8:	bf14      	ite	ne
 80054ea:	230a      	movne	r3, #10
 80054ec:	2308      	moveq	r3, #8
 80054ee:	4851      	ldr	r0, [pc, #324]	@ (8005634 <_printf_i+0x238>)
 80054f0:	2100      	movs	r1, #0
 80054f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054f6:	6866      	ldr	r6, [r4, #4]
 80054f8:	2e00      	cmp	r6, #0
 80054fa:	bfa8      	it	ge
 80054fc:	6821      	ldrge	r1, [r4, #0]
 80054fe:	60a6      	str	r6, [r4, #8]
 8005500:	bfa4      	itt	ge
 8005502:	f021 0104 	bicge.w	r1, r1, #4
 8005506:	6021      	strge	r1, [r4, #0]
 8005508:	b90d      	cbnz	r5, 800550e <_printf_i+0x112>
 800550a:	2e00      	cmp	r6, #0
 800550c:	d04b      	beq.n	80055a6 <_printf_i+0x1aa>
 800550e:	4616      	mov	r6, r2
 8005510:	fbb5 f1f3 	udiv	r1, r5, r3
 8005514:	fb03 5711 	mls	r7, r3, r1, r5
 8005518:	5dc7      	ldrb	r7, [r0, r7]
 800551a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800551e:	462f      	mov	r7, r5
 8005520:	42bb      	cmp	r3, r7
 8005522:	460d      	mov	r5, r1
 8005524:	d9f4      	bls.n	8005510 <_printf_i+0x114>
 8005526:	2b08      	cmp	r3, #8
 8005528:	d10b      	bne.n	8005542 <_printf_i+0x146>
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	07df      	lsls	r7, r3, #31
 800552e:	d508      	bpl.n	8005542 <_printf_i+0x146>
 8005530:	6923      	ldr	r3, [r4, #16]
 8005532:	6861      	ldr	r1, [r4, #4]
 8005534:	4299      	cmp	r1, r3
 8005536:	bfde      	ittt	le
 8005538:	2330      	movle	r3, #48	@ 0x30
 800553a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800553e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005542:	1b92      	subs	r2, r2, r6
 8005544:	6122      	str	r2, [r4, #16]
 8005546:	464b      	mov	r3, r9
 8005548:	4621      	mov	r1, r4
 800554a:	4640      	mov	r0, r8
 800554c:	f8cd a000 	str.w	sl, [sp]
 8005550:	aa03      	add	r2, sp, #12
 8005552:	f7ff fee1 	bl	8005318 <_printf_common>
 8005556:	3001      	adds	r0, #1
 8005558:	d14a      	bne.n	80055f0 <_printf_i+0x1f4>
 800555a:	f04f 30ff 	mov.w	r0, #4294967295
 800555e:	b004      	add	sp, #16
 8005560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	f043 0320 	orr.w	r3, r3, #32
 800556a:	6023      	str	r3, [r4, #0]
 800556c:	2778      	movs	r7, #120	@ 0x78
 800556e:	4832      	ldr	r0, [pc, #200]	@ (8005638 <_printf_i+0x23c>)
 8005570:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	6831      	ldr	r1, [r6, #0]
 8005578:	061f      	lsls	r7, r3, #24
 800557a:	f851 5b04 	ldr.w	r5, [r1], #4
 800557e:	d402      	bmi.n	8005586 <_printf_i+0x18a>
 8005580:	065f      	lsls	r7, r3, #25
 8005582:	bf48      	it	mi
 8005584:	b2ad      	uxthmi	r5, r5
 8005586:	6031      	str	r1, [r6, #0]
 8005588:	07d9      	lsls	r1, r3, #31
 800558a:	bf44      	itt	mi
 800558c:	f043 0320 	orrmi.w	r3, r3, #32
 8005590:	6023      	strmi	r3, [r4, #0]
 8005592:	b11d      	cbz	r5, 800559c <_printf_i+0x1a0>
 8005594:	2310      	movs	r3, #16
 8005596:	e7ab      	b.n	80054f0 <_printf_i+0xf4>
 8005598:	4826      	ldr	r0, [pc, #152]	@ (8005634 <_printf_i+0x238>)
 800559a:	e7e9      	b.n	8005570 <_printf_i+0x174>
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	f023 0320 	bic.w	r3, r3, #32
 80055a2:	6023      	str	r3, [r4, #0]
 80055a4:	e7f6      	b.n	8005594 <_printf_i+0x198>
 80055a6:	4616      	mov	r6, r2
 80055a8:	e7bd      	b.n	8005526 <_printf_i+0x12a>
 80055aa:	6833      	ldr	r3, [r6, #0]
 80055ac:	6825      	ldr	r5, [r4, #0]
 80055ae:	1d18      	adds	r0, r3, #4
 80055b0:	6961      	ldr	r1, [r4, #20]
 80055b2:	6030      	str	r0, [r6, #0]
 80055b4:	062e      	lsls	r6, r5, #24
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	d501      	bpl.n	80055be <_printf_i+0x1c2>
 80055ba:	6019      	str	r1, [r3, #0]
 80055bc:	e002      	b.n	80055c4 <_printf_i+0x1c8>
 80055be:	0668      	lsls	r0, r5, #25
 80055c0:	d5fb      	bpl.n	80055ba <_printf_i+0x1be>
 80055c2:	8019      	strh	r1, [r3, #0]
 80055c4:	2300      	movs	r3, #0
 80055c6:	4616      	mov	r6, r2
 80055c8:	6123      	str	r3, [r4, #16]
 80055ca:	e7bc      	b.n	8005546 <_printf_i+0x14a>
 80055cc:	6833      	ldr	r3, [r6, #0]
 80055ce:	2100      	movs	r1, #0
 80055d0:	1d1a      	adds	r2, r3, #4
 80055d2:	6032      	str	r2, [r6, #0]
 80055d4:	681e      	ldr	r6, [r3, #0]
 80055d6:	6862      	ldr	r2, [r4, #4]
 80055d8:	4630      	mov	r0, r6
 80055da:	f000 fa08 	bl	80059ee <memchr>
 80055de:	b108      	cbz	r0, 80055e4 <_printf_i+0x1e8>
 80055e0:	1b80      	subs	r0, r0, r6
 80055e2:	6060      	str	r0, [r4, #4]
 80055e4:	6863      	ldr	r3, [r4, #4]
 80055e6:	6123      	str	r3, [r4, #16]
 80055e8:	2300      	movs	r3, #0
 80055ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055ee:	e7aa      	b.n	8005546 <_printf_i+0x14a>
 80055f0:	4632      	mov	r2, r6
 80055f2:	4649      	mov	r1, r9
 80055f4:	4640      	mov	r0, r8
 80055f6:	6923      	ldr	r3, [r4, #16]
 80055f8:	47d0      	blx	sl
 80055fa:	3001      	adds	r0, #1
 80055fc:	d0ad      	beq.n	800555a <_printf_i+0x15e>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	079b      	lsls	r3, r3, #30
 8005602:	d413      	bmi.n	800562c <_printf_i+0x230>
 8005604:	68e0      	ldr	r0, [r4, #12]
 8005606:	9b03      	ldr	r3, [sp, #12]
 8005608:	4298      	cmp	r0, r3
 800560a:	bfb8      	it	lt
 800560c:	4618      	movlt	r0, r3
 800560e:	e7a6      	b.n	800555e <_printf_i+0x162>
 8005610:	2301      	movs	r3, #1
 8005612:	4632      	mov	r2, r6
 8005614:	4649      	mov	r1, r9
 8005616:	4640      	mov	r0, r8
 8005618:	47d0      	blx	sl
 800561a:	3001      	adds	r0, #1
 800561c:	d09d      	beq.n	800555a <_printf_i+0x15e>
 800561e:	3501      	adds	r5, #1
 8005620:	68e3      	ldr	r3, [r4, #12]
 8005622:	9903      	ldr	r1, [sp, #12]
 8005624:	1a5b      	subs	r3, r3, r1
 8005626:	42ab      	cmp	r3, r5
 8005628:	dcf2      	bgt.n	8005610 <_printf_i+0x214>
 800562a:	e7eb      	b.n	8005604 <_printf_i+0x208>
 800562c:	2500      	movs	r5, #0
 800562e:	f104 0619 	add.w	r6, r4, #25
 8005632:	e7f5      	b.n	8005620 <_printf_i+0x224>
 8005634:	08008ca8 	.word	0x08008ca8
 8005638:	08008cb9 	.word	0x08008cb9

0800563c <std>:
 800563c:	2300      	movs	r3, #0
 800563e:	b510      	push	{r4, lr}
 8005640:	4604      	mov	r4, r0
 8005642:	e9c0 3300 	strd	r3, r3, [r0]
 8005646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800564a:	6083      	str	r3, [r0, #8]
 800564c:	8181      	strh	r1, [r0, #12]
 800564e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005650:	81c2      	strh	r2, [r0, #14]
 8005652:	6183      	str	r3, [r0, #24]
 8005654:	4619      	mov	r1, r3
 8005656:	2208      	movs	r2, #8
 8005658:	305c      	adds	r0, #92	@ 0x5c
 800565a:	f000 f948 	bl	80058ee <memset>
 800565e:	4b0d      	ldr	r3, [pc, #52]	@ (8005694 <std+0x58>)
 8005660:	6224      	str	r4, [r4, #32]
 8005662:	6263      	str	r3, [r4, #36]	@ 0x24
 8005664:	4b0c      	ldr	r3, [pc, #48]	@ (8005698 <std+0x5c>)
 8005666:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005668:	4b0c      	ldr	r3, [pc, #48]	@ (800569c <std+0x60>)
 800566a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800566c:	4b0c      	ldr	r3, [pc, #48]	@ (80056a0 <std+0x64>)
 800566e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005670:	4b0c      	ldr	r3, [pc, #48]	@ (80056a4 <std+0x68>)
 8005672:	429c      	cmp	r4, r3
 8005674:	d006      	beq.n	8005684 <std+0x48>
 8005676:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800567a:	4294      	cmp	r4, r2
 800567c:	d002      	beq.n	8005684 <std+0x48>
 800567e:	33d0      	adds	r3, #208	@ 0xd0
 8005680:	429c      	cmp	r4, r3
 8005682:	d105      	bne.n	8005690 <std+0x54>
 8005684:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800568c:	f000 b9ac 	b.w	80059e8 <__retarget_lock_init_recursive>
 8005690:	bd10      	pop	{r4, pc}
 8005692:	bf00      	nop
 8005694:	08005869 	.word	0x08005869
 8005698:	0800588b 	.word	0x0800588b
 800569c:	080058c3 	.word	0x080058c3
 80056a0:	080058e7 	.word	0x080058e7
 80056a4:	20000384 	.word	0x20000384

080056a8 <stdio_exit_handler>:
 80056a8:	4a02      	ldr	r2, [pc, #8]	@ (80056b4 <stdio_exit_handler+0xc>)
 80056aa:	4903      	ldr	r1, [pc, #12]	@ (80056b8 <stdio_exit_handler+0x10>)
 80056ac:	4803      	ldr	r0, [pc, #12]	@ (80056bc <stdio_exit_handler+0x14>)
 80056ae:	f000 b869 	b.w	8005784 <_fwalk_sglue>
 80056b2:	bf00      	nop
 80056b4:	20000010 	.word	0x20000010
 80056b8:	0800735d 	.word	0x0800735d
 80056bc:	20000020 	.word	0x20000020

080056c0 <cleanup_stdio>:
 80056c0:	6841      	ldr	r1, [r0, #4]
 80056c2:	4b0c      	ldr	r3, [pc, #48]	@ (80056f4 <cleanup_stdio+0x34>)
 80056c4:	b510      	push	{r4, lr}
 80056c6:	4299      	cmp	r1, r3
 80056c8:	4604      	mov	r4, r0
 80056ca:	d001      	beq.n	80056d0 <cleanup_stdio+0x10>
 80056cc:	f001 fe46 	bl	800735c <_fflush_r>
 80056d0:	68a1      	ldr	r1, [r4, #8]
 80056d2:	4b09      	ldr	r3, [pc, #36]	@ (80056f8 <cleanup_stdio+0x38>)
 80056d4:	4299      	cmp	r1, r3
 80056d6:	d002      	beq.n	80056de <cleanup_stdio+0x1e>
 80056d8:	4620      	mov	r0, r4
 80056da:	f001 fe3f 	bl	800735c <_fflush_r>
 80056de:	68e1      	ldr	r1, [r4, #12]
 80056e0:	4b06      	ldr	r3, [pc, #24]	@ (80056fc <cleanup_stdio+0x3c>)
 80056e2:	4299      	cmp	r1, r3
 80056e4:	d004      	beq.n	80056f0 <cleanup_stdio+0x30>
 80056e6:	4620      	mov	r0, r4
 80056e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ec:	f001 be36 	b.w	800735c <_fflush_r>
 80056f0:	bd10      	pop	{r4, pc}
 80056f2:	bf00      	nop
 80056f4:	20000384 	.word	0x20000384
 80056f8:	200003ec 	.word	0x200003ec
 80056fc:	20000454 	.word	0x20000454

08005700 <global_stdio_init.part.0>:
 8005700:	b510      	push	{r4, lr}
 8005702:	4b0b      	ldr	r3, [pc, #44]	@ (8005730 <global_stdio_init.part.0+0x30>)
 8005704:	4c0b      	ldr	r4, [pc, #44]	@ (8005734 <global_stdio_init.part.0+0x34>)
 8005706:	4a0c      	ldr	r2, [pc, #48]	@ (8005738 <global_stdio_init.part.0+0x38>)
 8005708:	4620      	mov	r0, r4
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	2104      	movs	r1, #4
 800570e:	2200      	movs	r2, #0
 8005710:	f7ff ff94 	bl	800563c <std>
 8005714:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005718:	2201      	movs	r2, #1
 800571a:	2109      	movs	r1, #9
 800571c:	f7ff ff8e 	bl	800563c <std>
 8005720:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005724:	2202      	movs	r2, #2
 8005726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800572a:	2112      	movs	r1, #18
 800572c:	f7ff bf86 	b.w	800563c <std>
 8005730:	200004bc 	.word	0x200004bc
 8005734:	20000384 	.word	0x20000384
 8005738:	080056a9 	.word	0x080056a9

0800573c <__sfp_lock_acquire>:
 800573c:	4801      	ldr	r0, [pc, #4]	@ (8005744 <__sfp_lock_acquire+0x8>)
 800573e:	f000 b954 	b.w	80059ea <__retarget_lock_acquire_recursive>
 8005742:	bf00      	nop
 8005744:	200004c5 	.word	0x200004c5

08005748 <__sfp_lock_release>:
 8005748:	4801      	ldr	r0, [pc, #4]	@ (8005750 <__sfp_lock_release+0x8>)
 800574a:	f000 b94f 	b.w	80059ec <__retarget_lock_release_recursive>
 800574e:	bf00      	nop
 8005750:	200004c5 	.word	0x200004c5

08005754 <__sinit>:
 8005754:	b510      	push	{r4, lr}
 8005756:	4604      	mov	r4, r0
 8005758:	f7ff fff0 	bl	800573c <__sfp_lock_acquire>
 800575c:	6a23      	ldr	r3, [r4, #32]
 800575e:	b11b      	cbz	r3, 8005768 <__sinit+0x14>
 8005760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005764:	f7ff bff0 	b.w	8005748 <__sfp_lock_release>
 8005768:	4b04      	ldr	r3, [pc, #16]	@ (800577c <__sinit+0x28>)
 800576a:	6223      	str	r3, [r4, #32]
 800576c:	4b04      	ldr	r3, [pc, #16]	@ (8005780 <__sinit+0x2c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f5      	bne.n	8005760 <__sinit+0xc>
 8005774:	f7ff ffc4 	bl	8005700 <global_stdio_init.part.0>
 8005778:	e7f2      	b.n	8005760 <__sinit+0xc>
 800577a:	bf00      	nop
 800577c:	080056c1 	.word	0x080056c1
 8005780:	200004bc 	.word	0x200004bc

08005784 <_fwalk_sglue>:
 8005784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005788:	4607      	mov	r7, r0
 800578a:	4688      	mov	r8, r1
 800578c:	4614      	mov	r4, r2
 800578e:	2600      	movs	r6, #0
 8005790:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005794:	f1b9 0901 	subs.w	r9, r9, #1
 8005798:	d505      	bpl.n	80057a6 <_fwalk_sglue+0x22>
 800579a:	6824      	ldr	r4, [r4, #0]
 800579c:	2c00      	cmp	r4, #0
 800579e:	d1f7      	bne.n	8005790 <_fwalk_sglue+0xc>
 80057a0:	4630      	mov	r0, r6
 80057a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057a6:	89ab      	ldrh	r3, [r5, #12]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d907      	bls.n	80057bc <_fwalk_sglue+0x38>
 80057ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057b0:	3301      	adds	r3, #1
 80057b2:	d003      	beq.n	80057bc <_fwalk_sglue+0x38>
 80057b4:	4629      	mov	r1, r5
 80057b6:	4638      	mov	r0, r7
 80057b8:	47c0      	blx	r8
 80057ba:	4306      	orrs	r6, r0
 80057bc:	3568      	adds	r5, #104	@ 0x68
 80057be:	e7e9      	b.n	8005794 <_fwalk_sglue+0x10>

080057c0 <sniprintf>:
 80057c0:	b40c      	push	{r2, r3}
 80057c2:	b530      	push	{r4, r5, lr}
 80057c4:	4b17      	ldr	r3, [pc, #92]	@ (8005824 <sniprintf+0x64>)
 80057c6:	1e0c      	subs	r4, r1, #0
 80057c8:	681d      	ldr	r5, [r3, #0]
 80057ca:	b09d      	sub	sp, #116	@ 0x74
 80057cc:	da08      	bge.n	80057e0 <sniprintf+0x20>
 80057ce:	238b      	movs	r3, #139	@ 0x8b
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295
 80057d4:	602b      	str	r3, [r5, #0]
 80057d6:	b01d      	add	sp, #116	@ 0x74
 80057d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057dc:	b002      	add	sp, #8
 80057de:	4770      	bx	lr
 80057e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80057e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80057e8:	bf0c      	ite	eq
 80057ea:	4623      	moveq	r3, r4
 80057ec:	f104 33ff 	addne.w	r3, r4, #4294967295
 80057f0:	9304      	str	r3, [sp, #16]
 80057f2:	9307      	str	r3, [sp, #28]
 80057f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80057f8:	9002      	str	r0, [sp, #8]
 80057fa:	9006      	str	r0, [sp, #24]
 80057fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005800:	4628      	mov	r0, r5
 8005802:	ab21      	add	r3, sp, #132	@ 0x84
 8005804:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005806:	a902      	add	r1, sp, #8
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	f001 fc2b 	bl	8007064 <_svfiprintf_r>
 800580e:	1c43      	adds	r3, r0, #1
 8005810:	bfbc      	itt	lt
 8005812:	238b      	movlt	r3, #139	@ 0x8b
 8005814:	602b      	strlt	r3, [r5, #0]
 8005816:	2c00      	cmp	r4, #0
 8005818:	d0dd      	beq.n	80057d6 <sniprintf+0x16>
 800581a:	2200      	movs	r2, #0
 800581c:	9b02      	ldr	r3, [sp, #8]
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	e7d9      	b.n	80057d6 <sniprintf+0x16>
 8005822:	bf00      	nop
 8005824:	2000001c 	.word	0x2000001c

08005828 <siprintf>:
 8005828:	b40e      	push	{r1, r2, r3}
 800582a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800582e:	b500      	push	{lr}
 8005830:	b09c      	sub	sp, #112	@ 0x70
 8005832:	ab1d      	add	r3, sp, #116	@ 0x74
 8005834:	9002      	str	r0, [sp, #8]
 8005836:	9006      	str	r0, [sp, #24]
 8005838:	9107      	str	r1, [sp, #28]
 800583a:	9104      	str	r1, [sp, #16]
 800583c:	4808      	ldr	r0, [pc, #32]	@ (8005860 <siprintf+0x38>)
 800583e:	4909      	ldr	r1, [pc, #36]	@ (8005864 <siprintf+0x3c>)
 8005840:	f853 2b04 	ldr.w	r2, [r3], #4
 8005844:	9105      	str	r1, [sp, #20]
 8005846:	6800      	ldr	r0, [r0, #0]
 8005848:	a902      	add	r1, sp, #8
 800584a:	9301      	str	r3, [sp, #4]
 800584c:	f001 fc0a 	bl	8007064 <_svfiprintf_r>
 8005850:	2200      	movs	r2, #0
 8005852:	9b02      	ldr	r3, [sp, #8]
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	b01c      	add	sp, #112	@ 0x70
 8005858:	f85d eb04 	ldr.w	lr, [sp], #4
 800585c:	b003      	add	sp, #12
 800585e:	4770      	bx	lr
 8005860:	2000001c 	.word	0x2000001c
 8005864:	ffff0208 	.word	0xffff0208

08005868 <__sread>:
 8005868:	b510      	push	{r4, lr}
 800586a:	460c      	mov	r4, r1
 800586c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005870:	f000 f86c 	bl	800594c <_read_r>
 8005874:	2800      	cmp	r0, #0
 8005876:	bfab      	itete	ge
 8005878:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800587a:	89a3      	ldrhlt	r3, [r4, #12]
 800587c:	181b      	addge	r3, r3, r0
 800587e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005882:	bfac      	ite	ge
 8005884:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005886:	81a3      	strhlt	r3, [r4, #12]
 8005888:	bd10      	pop	{r4, pc}

0800588a <__swrite>:
 800588a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800588e:	461f      	mov	r7, r3
 8005890:	898b      	ldrh	r3, [r1, #12]
 8005892:	4605      	mov	r5, r0
 8005894:	05db      	lsls	r3, r3, #23
 8005896:	460c      	mov	r4, r1
 8005898:	4616      	mov	r6, r2
 800589a:	d505      	bpl.n	80058a8 <__swrite+0x1e>
 800589c:	2302      	movs	r3, #2
 800589e:	2200      	movs	r2, #0
 80058a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a4:	f000 f840 	bl	8005928 <_lseek_r>
 80058a8:	89a3      	ldrh	r3, [r4, #12]
 80058aa:	4632      	mov	r2, r6
 80058ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058b0:	81a3      	strh	r3, [r4, #12]
 80058b2:	4628      	mov	r0, r5
 80058b4:	463b      	mov	r3, r7
 80058b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058be:	f000 b857 	b.w	8005970 <_write_r>

080058c2 <__sseek>:
 80058c2:	b510      	push	{r4, lr}
 80058c4:	460c      	mov	r4, r1
 80058c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ca:	f000 f82d 	bl	8005928 <_lseek_r>
 80058ce:	1c43      	adds	r3, r0, #1
 80058d0:	89a3      	ldrh	r3, [r4, #12]
 80058d2:	bf15      	itete	ne
 80058d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80058d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80058da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80058de:	81a3      	strheq	r3, [r4, #12]
 80058e0:	bf18      	it	ne
 80058e2:	81a3      	strhne	r3, [r4, #12]
 80058e4:	bd10      	pop	{r4, pc}

080058e6 <__sclose>:
 80058e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ea:	f000 b80d 	b.w	8005908 <_close_r>

080058ee <memset>:
 80058ee:	4603      	mov	r3, r0
 80058f0:	4402      	add	r2, r0
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d100      	bne.n	80058f8 <memset+0xa>
 80058f6:	4770      	bx	lr
 80058f8:	f803 1b01 	strb.w	r1, [r3], #1
 80058fc:	e7f9      	b.n	80058f2 <memset+0x4>
	...

08005900 <_localeconv_r>:
 8005900:	4800      	ldr	r0, [pc, #0]	@ (8005904 <_localeconv_r+0x4>)
 8005902:	4770      	bx	lr
 8005904:	2000015c 	.word	0x2000015c

08005908 <_close_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	2300      	movs	r3, #0
 800590c:	4d05      	ldr	r5, [pc, #20]	@ (8005924 <_close_r+0x1c>)
 800590e:	4604      	mov	r4, r0
 8005910:	4608      	mov	r0, r1
 8005912:	602b      	str	r3, [r5, #0]
 8005914:	f7fc fccb 	bl	80022ae <_close>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_close_r+0x1a>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	b103      	cbz	r3, 8005922 <_close_r+0x1a>
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	200004c0 	.word	0x200004c0

08005928 <_lseek_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4604      	mov	r4, r0
 800592c:	4608      	mov	r0, r1
 800592e:	4611      	mov	r1, r2
 8005930:	2200      	movs	r2, #0
 8005932:	4d05      	ldr	r5, [pc, #20]	@ (8005948 <_lseek_r+0x20>)
 8005934:	602a      	str	r2, [r5, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	f7fc fcdd 	bl	80022f6 <_lseek>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_lseek_r+0x1e>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_lseek_r+0x1e>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	200004c0 	.word	0x200004c0

0800594c <_read_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4604      	mov	r4, r0
 8005950:	4608      	mov	r0, r1
 8005952:	4611      	mov	r1, r2
 8005954:	2200      	movs	r2, #0
 8005956:	4d05      	ldr	r5, [pc, #20]	@ (800596c <_read_r+0x20>)
 8005958:	602a      	str	r2, [r5, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	f7fc fc6e 	bl	800223c <_read>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_read_r+0x1e>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	b103      	cbz	r3, 800596a <_read_r+0x1e>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	200004c0 	.word	0x200004c0

08005970 <_write_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4604      	mov	r4, r0
 8005974:	4608      	mov	r0, r1
 8005976:	4611      	mov	r1, r2
 8005978:	2200      	movs	r2, #0
 800597a:	4d05      	ldr	r5, [pc, #20]	@ (8005990 <_write_r+0x20>)
 800597c:	602a      	str	r2, [r5, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	f7fc fc79 	bl	8002276 <_write>
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d102      	bne.n	800598e <_write_r+0x1e>
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	b103      	cbz	r3, 800598e <_write_r+0x1e>
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	200004c0 	.word	0x200004c0

08005994 <__errno>:
 8005994:	4b01      	ldr	r3, [pc, #4]	@ (800599c <__errno+0x8>)
 8005996:	6818      	ldr	r0, [r3, #0]
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	2000001c 	.word	0x2000001c

080059a0 <__libc_init_array>:
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	2600      	movs	r6, #0
 80059a4:	4d0c      	ldr	r5, [pc, #48]	@ (80059d8 <__libc_init_array+0x38>)
 80059a6:	4c0d      	ldr	r4, [pc, #52]	@ (80059dc <__libc_init_array+0x3c>)
 80059a8:	1b64      	subs	r4, r4, r5
 80059aa:	10a4      	asrs	r4, r4, #2
 80059ac:	42a6      	cmp	r6, r4
 80059ae:	d109      	bne.n	80059c4 <__libc_init_array+0x24>
 80059b0:	f002 f870 	bl	8007a94 <_init>
 80059b4:	2600      	movs	r6, #0
 80059b6:	4d0a      	ldr	r5, [pc, #40]	@ (80059e0 <__libc_init_array+0x40>)
 80059b8:	4c0a      	ldr	r4, [pc, #40]	@ (80059e4 <__libc_init_array+0x44>)
 80059ba:	1b64      	subs	r4, r4, r5
 80059bc:	10a4      	asrs	r4, r4, #2
 80059be:	42a6      	cmp	r6, r4
 80059c0:	d105      	bne.n	80059ce <__libc_init_array+0x2e>
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059c8:	4798      	blx	r3
 80059ca:	3601      	adds	r6, #1
 80059cc:	e7ee      	b.n	80059ac <__libc_init_array+0xc>
 80059ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d2:	4798      	blx	r3
 80059d4:	3601      	adds	r6, #1
 80059d6:	e7f2      	b.n	80059be <__libc_init_array+0x1e>
 80059d8:	08009010 	.word	0x08009010
 80059dc:	08009010 	.word	0x08009010
 80059e0:	08009010 	.word	0x08009010
 80059e4:	08009014 	.word	0x08009014

080059e8 <__retarget_lock_init_recursive>:
 80059e8:	4770      	bx	lr

080059ea <__retarget_lock_acquire_recursive>:
 80059ea:	4770      	bx	lr

080059ec <__retarget_lock_release_recursive>:
 80059ec:	4770      	bx	lr

080059ee <memchr>:
 80059ee:	4603      	mov	r3, r0
 80059f0:	b510      	push	{r4, lr}
 80059f2:	b2c9      	uxtb	r1, r1
 80059f4:	4402      	add	r2, r0
 80059f6:	4293      	cmp	r3, r2
 80059f8:	4618      	mov	r0, r3
 80059fa:	d101      	bne.n	8005a00 <memchr+0x12>
 80059fc:	2000      	movs	r0, #0
 80059fe:	e003      	b.n	8005a08 <memchr+0x1a>
 8005a00:	7804      	ldrb	r4, [r0, #0]
 8005a02:	3301      	adds	r3, #1
 8005a04:	428c      	cmp	r4, r1
 8005a06:	d1f6      	bne.n	80059f6 <memchr+0x8>
 8005a08:	bd10      	pop	{r4, pc}

08005a0a <quorem>:
 8005a0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0e:	6903      	ldr	r3, [r0, #16]
 8005a10:	690c      	ldr	r4, [r1, #16]
 8005a12:	4607      	mov	r7, r0
 8005a14:	42a3      	cmp	r3, r4
 8005a16:	db7e      	blt.n	8005b16 <quorem+0x10c>
 8005a18:	3c01      	subs	r4, #1
 8005a1a:	00a3      	lsls	r3, r4, #2
 8005a1c:	f100 0514 	add.w	r5, r0, #20
 8005a20:	f101 0814 	add.w	r8, r1, #20
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a34:	3301      	adds	r3, #1
 8005a36:	429a      	cmp	r2, r3
 8005a38:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a40:	d32e      	bcc.n	8005aa0 <quorem+0x96>
 8005a42:	f04f 0a00 	mov.w	sl, #0
 8005a46:	46c4      	mov	ip, r8
 8005a48:	46ae      	mov	lr, r5
 8005a4a:	46d3      	mov	fp, sl
 8005a4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005a50:	b298      	uxth	r0, r3
 8005a52:	fb06 a000 	mla	r0, r6, r0, sl
 8005a56:	0c1b      	lsrs	r3, r3, #16
 8005a58:	0c02      	lsrs	r2, r0, #16
 8005a5a:	fb06 2303 	mla	r3, r6, r3, r2
 8005a5e:	f8de 2000 	ldr.w	r2, [lr]
 8005a62:	b280      	uxth	r0, r0
 8005a64:	b292      	uxth	r2, r2
 8005a66:	1a12      	subs	r2, r2, r0
 8005a68:	445a      	add	r2, fp
 8005a6a:	f8de 0000 	ldr.w	r0, [lr]
 8005a6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005a78:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005a7c:	b292      	uxth	r2, r2
 8005a7e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005a82:	45e1      	cmp	r9, ip
 8005a84:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005a88:	f84e 2b04 	str.w	r2, [lr], #4
 8005a8c:	d2de      	bcs.n	8005a4c <quorem+0x42>
 8005a8e:	9b00      	ldr	r3, [sp, #0]
 8005a90:	58eb      	ldr	r3, [r5, r3]
 8005a92:	b92b      	cbnz	r3, 8005aa0 <quorem+0x96>
 8005a94:	9b01      	ldr	r3, [sp, #4]
 8005a96:	3b04      	subs	r3, #4
 8005a98:	429d      	cmp	r5, r3
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	d32f      	bcc.n	8005afe <quorem+0xf4>
 8005a9e:	613c      	str	r4, [r7, #16]
 8005aa0:	4638      	mov	r0, r7
 8005aa2:	f001 f97b 	bl	8006d9c <__mcmp>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	db25      	blt.n	8005af6 <quorem+0xec>
 8005aaa:	4629      	mov	r1, r5
 8005aac:	2000      	movs	r0, #0
 8005aae:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ab2:	f8d1 c000 	ldr.w	ip, [r1]
 8005ab6:	fa1f fe82 	uxth.w	lr, r2
 8005aba:	fa1f f38c 	uxth.w	r3, ip
 8005abe:	eba3 030e 	sub.w	r3, r3, lr
 8005ac2:	4403      	add	r3, r0
 8005ac4:	0c12      	lsrs	r2, r2, #16
 8005ac6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005aca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ad4:	45c1      	cmp	r9, r8
 8005ad6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ada:	f841 3b04 	str.w	r3, [r1], #4
 8005ade:	d2e6      	bcs.n	8005aae <quorem+0xa4>
 8005ae0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ae4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ae8:	b922      	cbnz	r2, 8005af4 <quorem+0xea>
 8005aea:	3b04      	subs	r3, #4
 8005aec:	429d      	cmp	r5, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	d30b      	bcc.n	8005b0a <quorem+0x100>
 8005af2:	613c      	str	r4, [r7, #16]
 8005af4:	3601      	adds	r6, #1
 8005af6:	4630      	mov	r0, r6
 8005af8:	b003      	add	sp, #12
 8005afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005afe:	6812      	ldr	r2, [r2, #0]
 8005b00:	3b04      	subs	r3, #4
 8005b02:	2a00      	cmp	r2, #0
 8005b04:	d1cb      	bne.n	8005a9e <quorem+0x94>
 8005b06:	3c01      	subs	r4, #1
 8005b08:	e7c6      	b.n	8005a98 <quorem+0x8e>
 8005b0a:	6812      	ldr	r2, [r2, #0]
 8005b0c:	3b04      	subs	r3, #4
 8005b0e:	2a00      	cmp	r2, #0
 8005b10:	d1ef      	bne.n	8005af2 <quorem+0xe8>
 8005b12:	3c01      	subs	r4, #1
 8005b14:	e7ea      	b.n	8005aec <quorem+0xe2>
 8005b16:	2000      	movs	r0, #0
 8005b18:	e7ee      	b.n	8005af8 <quorem+0xee>
 8005b1a:	0000      	movs	r0, r0
 8005b1c:	0000      	movs	r0, r0
	...

08005b20 <_dtoa_r>:
 8005b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b24:	4614      	mov	r4, r2
 8005b26:	461d      	mov	r5, r3
 8005b28:	69c7      	ldr	r7, [r0, #28]
 8005b2a:	b097      	sub	sp, #92	@ 0x5c
 8005b2c:	4683      	mov	fp, r0
 8005b2e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005b32:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005b34:	b97f      	cbnz	r7, 8005b56 <_dtoa_r+0x36>
 8005b36:	2010      	movs	r0, #16
 8005b38:	f000 fe02 	bl	8006740 <malloc>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	f8cb 001c 	str.w	r0, [fp, #28]
 8005b42:	b920      	cbnz	r0, 8005b4e <_dtoa_r+0x2e>
 8005b44:	21ef      	movs	r1, #239	@ 0xef
 8005b46:	4ba8      	ldr	r3, [pc, #672]	@ (8005de8 <_dtoa_r+0x2c8>)
 8005b48:	48a8      	ldr	r0, [pc, #672]	@ (8005dec <_dtoa_r+0x2cc>)
 8005b4a:	f001 fc67 	bl	800741c <__assert_func>
 8005b4e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005b52:	6007      	str	r7, [r0, #0]
 8005b54:	60c7      	str	r7, [r0, #12]
 8005b56:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005b5a:	6819      	ldr	r1, [r3, #0]
 8005b5c:	b159      	cbz	r1, 8005b76 <_dtoa_r+0x56>
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	2301      	movs	r3, #1
 8005b62:	4093      	lsls	r3, r2
 8005b64:	604a      	str	r2, [r1, #4]
 8005b66:	608b      	str	r3, [r1, #8]
 8005b68:	4658      	mov	r0, fp
 8005b6a:	f000 fedf 	bl	800692c <_Bfree>
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	1e2b      	subs	r3, r5, #0
 8005b78:	bfaf      	iteee	ge
 8005b7a:	2300      	movge	r3, #0
 8005b7c:	2201      	movlt	r2, #1
 8005b7e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005b82:	9303      	strlt	r3, [sp, #12]
 8005b84:	bfa8      	it	ge
 8005b86:	6033      	strge	r3, [r6, #0]
 8005b88:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005b8c:	4b98      	ldr	r3, [pc, #608]	@ (8005df0 <_dtoa_r+0x2d0>)
 8005b8e:	bfb8      	it	lt
 8005b90:	6032      	strlt	r2, [r6, #0]
 8005b92:	ea33 0308 	bics.w	r3, r3, r8
 8005b96:	d112      	bne.n	8005bbe <_dtoa_r+0x9e>
 8005b98:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005b9c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005ba4:	4323      	orrs	r3, r4
 8005ba6:	f000 8550 	beq.w	800664a <_dtoa_r+0xb2a>
 8005baa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005bac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005df4 <_dtoa_r+0x2d4>
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 8552 	beq.w	800665a <_dtoa_r+0xb3a>
 8005bb6:	f10a 0303 	add.w	r3, sl, #3
 8005bba:	f000 bd4c 	b.w	8006656 <_dtoa_r+0xb36>
 8005bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bc2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005bc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f7fa feeb 	bl	80009a8 <__aeabi_dcmpeq>
 8005bd2:	4607      	mov	r7, r0
 8005bd4:	b158      	cbz	r0, 8005bee <_dtoa_r+0xce>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005bda:	6013      	str	r3, [r2, #0]
 8005bdc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005bde:	b113      	cbz	r3, 8005be6 <_dtoa_r+0xc6>
 8005be0:	4b85      	ldr	r3, [pc, #532]	@ (8005df8 <_dtoa_r+0x2d8>)
 8005be2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005dfc <_dtoa_r+0x2dc>
 8005bea:	f000 bd36 	b.w	800665a <_dtoa_r+0xb3a>
 8005bee:	ab14      	add	r3, sp, #80	@ 0x50
 8005bf0:	9301      	str	r3, [sp, #4]
 8005bf2:	ab15      	add	r3, sp, #84	@ 0x54
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	4658      	mov	r0, fp
 8005bf8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005bfc:	f001 f97e 	bl	8006efc <__d2b>
 8005c00:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005c04:	4681      	mov	r9, r0
 8005c06:	2e00      	cmp	r6, #0
 8005c08:	d077      	beq.n	8005cfa <_dtoa_r+0x1da>
 8005c0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c10:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c18:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005c1c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005c20:	9712      	str	r7, [sp, #72]	@ 0x48
 8005c22:	4619      	mov	r1, r3
 8005c24:	2200      	movs	r2, #0
 8005c26:	4b76      	ldr	r3, [pc, #472]	@ (8005e00 <_dtoa_r+0x2e0>)
 8005c28:	f7fa fa9e 	bl	8000168 <__aeabi_dsub>
 8005c2c:	a368      	add	r3, pc, #416	@ (adr r3, 8005dd0 <_dtoa_r+0x2b0>)
 8005c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c32:	f7fa fc51 	bl	80004d8 <__aeabi_dmul>
 8005c36:	a368      	add	r3, pc, #416	@ (adr r3, 8005dd8 <_dtoa_r+0x2b8>)
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f7fa fa96 	bl	800016c <__adddf3>
 8005c40:	4604      	mov	r4, r0
 8005c42:	4630      	mov	r0, r6
 8005c44:	460d      	mov	r5, r1
 8005c46:	f7fa fbdd 	bl	8000404 <__aeabi_i2d>
 8005c4a:	a365      	add	r3, pc, #404	@ (adr r3, 8005de0 <_dtoa_r+0x2c0>)
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	f7fa fc42 	bl	80004d8 <__aeabi_dmul>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4620      	mov	r0, r4
 8005c5a:	4629      	mov	r1, r5
 8005c5c:	f7fa fa86 	bl	800016c <__adddf3>
 8005c60:	4604      	mov	r4, r0
 8005c62:	460d      	mov	r5, r1
 8005c64:	f7fa fee8 	bl	8000a38 <__aeabi_d2iz>
 8005c68:	2200      	movs	r2, #0
 8005c6a:	4607      	mov	r7, r0
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	4620      	mov	r0, r4
 8005c70:	4629      	mov	r1, r5
 8005c72:	f7fa fea3 	bl	80009bc <__aeabi_dcmplt>
 8005c76:	b140      	cbz	r0, 8005c8a <_dtoa_r+0x16a>
 8005c78:	4638      	mov	r0, r7
 8005c7a:	f7fa fbc3 	bl	8000404 <__aeabi_i2d>
 8005c7e:	4622      	mov	r2, r4
 8005c80:	462b      	mov	r3, r5
 8005c82:	f7fa fe91 	bl	80009a8 <__aeabi_dcmpeq>
 8005c86:	b900      	cbnz	r0, 8005c8a <_dtoa_r+0x16a>
 8005c88:	3f01      	subs	r7, #1
 8005c8a:	2f16      	cmp	r7, #22
 8005c8c:	d853      	bhi.n	8005d36 <_dtoa_r+0x216>
 8005c8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c92:	4b5c      	ldr	r3, [pc, #368]	@ (8005e04 <_dtoa_r+0x2e4>)
 8005c94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	f7fa fe8e 	bl	80009bc <__aeabi_dcmplt>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d04a      	beq.n	8005d3a <_dtoa_r+0x21a>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	3f01      	subs	r7, #1
 8005ca8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005caa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005cac:	1b9b      	subs	r3, r3, r6
 8005cae:	1e5a      	subs	r2, r3, #1
 8005cb0:	bf46      	itte	mi
 8005cb2:	f1c3 0801 	rsbmi	r8, r3, #1
 8005cb6:	2300      	movmi	r3, #0
 8005cb8:	f04f 0800 	movpl.w	r8, #0
 8005cbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cbe:	bf48      	it	mi
 8005cc0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005cc2:	2f00      	cmp	r7, #0
 8005cc4:	db3b      	blt.n	8005d3e <_dtoa_r+0x21e>
 8005cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cc8:	970e      	str	r7, [sp, #56]	@ 0x38
 8005cca:	443b      	add	r3, r7
 8005ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cce:	2300      	movs	r3, #0
 8005cd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cd2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005cd4:	2b09      	cmp	r3, #9
 8005cd6:	d866      	bhi.n	8005da6 <_dtoa_r+0x286>
 8005cd8:	2b05      	cmp	r3, #5
 8005cda:	bfc4      	itt	gt
 8005cdc:	3b04      	subgt	r3, #4
 8005cde:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005ce0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ce2:	bfc8      	it	gt
 8005ce4:	2400      	movgt	r4, #0
 8005ce6:	f1a3 0302 	sub.w	r3, r3, #2
 8005cea:	bfd8      	it	le
 8005cec:	2401      	movle	r4, #1
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d864      	bhi.n	8005dbc <_dtoa_r+0x29c>
 8005cf2:	e8df f003 	tbb	[pc, r3]
 8005cf6:	382b      	.short	0x382b
 8005cf8:	5636      	.short	0x5636
 8005cfa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005cfe:	441e      	add	r6, r3
 8005d00:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005d04:	2b20      	cmp	r3, #32
 8005d06:	bfc1      	itttt	gt
 8005d08:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005d0c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005d10:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005d14:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005d18:	bfd6      	itet	le
 8005d1a:	f1c3 0320 	rsble	r3, r3, #32
 8005d1e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005d22:	fa04 f003 	lslle.w	r0, r4, r3
 8005d26:	f7fa fb5d 	bl	80003e4 <__aeabi_ui2d>
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005d30:	3e01      	subs	r6, #1
 8005d32:	9212      	str	r2, [sp, #72]	@ 0x48
 8005d34:	e775      	b.n	8005c22 <_dtoa_r+0x102>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e7b6      	b.n	8005ca8 <_dtoa_r+0x188>
 8005d3a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005d3c:	e7b5      	b.n	8005caa <_dtoa_r+0x18a>
 8005d3e:	427b      	negs	r3, r7
 8005d40:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d42:	2300      	movs	r3, #0
 8005d44:	eba8 0807 	sub.w	r8, r8, r7
 8005d48:	930e      	str	r3, [sp, #56]	@ 0x38
 8005d4a:	e7c2      	b.n	8005cd2 <_dtoa_r+0x1b2>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	dc35      	bgt.n	8005dc2 <_dtoa_r+0x2a2>
 8005d56:	2301      	movs	r3, #1
 8005d58:	461a      	mov	r2, r3
 8005d5a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005d5e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005d60:	e00b      	b.n	8005d7a <_dtoa_r+0x25a>
 8005d62:	2301      	movs	r3, #1
 8005d64:	e7f3      	b.n	8005d4e <_dtoa_r+0x22e>
 8005d66:	2300      	movs	r3, #0
 8005d68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	9308      	str	r3, [sp, #32]
 8005d70:	3301      	adds	r3, #1
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	9307      	str	r3, [sp, #28]
 8005d76:	bfb8      	it	lt
 8005d78:	2301      	movlt	r3, #1
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	2204      	movs	r2, #4
 8005d7e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005d82:	f102 0514 	add.w	r5, r2, #20
 8005d86:	429d      	cmp	r5, r3
 8005d88:	d91f      	bls.n	8005dca <_dtoa_r+0x2aa>
 8005d8a:	6041      	str	r1, [r0, #4]
 8005d8c:	4658      	mov	r0, fp
 8005d8e:	f000 fd8d 	bl	80068ac <_Balloc>
 8005d92:	4682      	mov	sl, r0
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d139      	bne.n	8005e0c <_dtoa_r+0x2ec>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	f240 11af 	movw	r1, #431	@ 0x1af
 8005d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005e08 <_dtoa_r+0x2e8>)
 8005da0:	e6d2      	b.n	8005b48 <_dtoa_r+0x28>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e7e0      	b.n	8005d68 <_dtoa_r+0x248>
 8005da6:	2401      	movs	r4, #1
 8005da8:	2300      	movs	r3, #0
 8005daa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005dac:	9320      	str	r3, [sp, #128]	@ 0x80
 8005dae:	f04f 33ff 	mov.w	r3, #4294967295
 8005db2:	2200      	movs	r2, #0
 8005db4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005db8:	2312      	movs	r3, #18
 8005dba:	e7d0      	b.n	8005d5e <_dtoa_r+0x23e>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dc0:	e7f5      	b.n	8005dae <_dtoa_r+0x28e>
 8005dc2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005dc4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005dc8:	e7d7      	b.n	8005d7a <_dtoa_r+0x25a>
 8005dca:	3101      	adds	r1, #1
 8005dcc:	0052      	lsls	r2, r2, #1
 8005dce:	e7d8      	b.n	8005d82 <_dtoa_r+0x262>
 8005dd0:	636f4361 	.word	0x636f4361
 8005dd4:	3fd287a7 	.word	0x3fd287a7
 8005dd8:	8b60c8b3 	.word	0x8b60c8b3
 8005ddc:	3fc68a28 	.word	0x3fc68a28
 8005de0:	509f79fb 	.word	0x509f79fb
 8005de4:	3fd34413 	.word	0x3fd34413
 8005de8:	08008cd7 	.word	0x08008cd7
 8005dec:	08008cee 	.word	0x08008cee
 8005df0:	7ff00000 	.word	0x7ff00000
 8005df4:	08008cd3 	.word	0x08008cd3
 8005df8:	08008ca7 	.word	0x08008ca7
 8005dfc:	08008ca6 	.word	0x08008ca6
 8005e00:	3ff80000 	.word	0x3ff80000
 8005e04:	08008de8 	.word	0x08008de8
 8005e08:	08008d46 	.word	0x08008d46
 8005e0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e10:	6018      	str	r0, [r3, #0]
 8005e12:	9b07      	ldr	r3, [sp, #28]
 8005e14:	2b0e      	cmp	r3, #14
 8005e16:	f200 80a4 	bhi.w	8005f62 <_dtoa_r+0x442>
 8005e1a:	2c00      	cmp	r4, #0
 8005e1c:	f000 80a1 	beq.w	8005f62 <_dtoa_r+0x442>
 8005e20:	2f00      	cmp	r7, #0
 8005e22:	dd33      	ble.n	8005e8c <_dtoa_r+0x36c>
 8005e24:	4b86      	ldr	r3, [pc, #536]	@ (8006040 <_dtoa_r+0x520>)
 8005e26:	f007 020f 	and.w	r2, r7, #15
 8005e2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e2e:	05f8      	lsls	r0, r7, #23
 8005e30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005e3c:	d516      	bpl.n	8005e6c <_dtoa_r+0x34c>
 8005e3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e42:	4b80      	ldr	r3, [pc, #512]	@ (8006044 <_dtoa_r+0x524>)
 8005e44:	2603      	movs	r6, #3
 8005e46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e4a:	f7fa fc6f 	bl	800072c <__aeabi_ddiv>
 8005e4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e52:	f004 040f 	and.w	r4, r4, #15
 8005e56:	4d7b      	ldr	r5, [pc, #492]	@ (8006044 <_dtoa_r+0x524>)
 8005e58:	b954      	cbnz	r4, 8005e70 <_dtoa_r+0x350>
 8005e5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e62:	f7fa fc63 	bl	800072c <__aeabi_ddiv>
 8005e66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e6a:	e028      	b.n	8005ebe <_dtoa_r+0x39e>
 8005e6c:	2602      	movs	r6, #2
 8005e6e:	e7f2      	b.n	8005e56 <_dtoa_r+0x336>
 8005e70:	07e1      	lsls	r1, r4, #31
 8005e72:	d508      	bpl.n	8005e86 <_dtoa_r+0x366>
 8005e74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e7c:	f7fa fb2c 	bl	80004d8 <__aeabi_dmul>
 8005e80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e84:	3601      	adds	r6, #1
 8005e86:	1064      	asrs	r4, r4, #1
 8005e88:	3508      	adds	r5, #8
 8005e8a:	e7e5      	b.n	8005e58 <_dtoa_r+0x338>
 8005e8c:	f000 80d2 	beq.w	8006034 <_dtoa_r+0x514>
 8005e90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e94:	427c      	negs	r4, r7
 8005e96:	4b6a      	ldr	r3, [pc, #424]	@ (8006040 <_dtoa_r+0x520>)
 8005e98:	f004 020f 	and.w	r2, r4, #15
 8005e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea4:	f7fa fb18 	bl	80004d8 <__aeabi_dmul>
 8005ea8:	2602      	movs	r6, #2
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eb0:	4d64      	ldr	r5, [pc, #400]	@ (8006044 <_dtoa_r+0x524>)
 8005eb2:	1124      	asrs	r4, r4, #4
 8005eb4:	2c00      	cmp	r4, #0
 8005eb6:	f040 80b2 	bne.w	800601e <_dtoa_r+0x4fe>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1d3      	bne.n	8005e66 <_dtoa_r+0x346>
 8005ebe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ec2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 80b7 	beq.w	8006038 <_dtoa_r+0x518>
 8005eca:	2200      	movs	r2, #0
 8005ecc:	4620      	mov	r0, r4
 8005ece:	4629      	mov	r1, r5
 8005ed0:	4b5d      	ldr	r3, [pc, #372]	@ (8006048 <_dtoa_r+0x528>)
 8005ed2:	f7fa fd73 	bl	80009bc <__aeabi_dcmplt>
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	f000 80ae 	beq.w	8006038 <_dtoa_r+0x518>
 8005edc:	9b07      	ldr	r3, [sp, #28]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 80aa 	beq.w	8006038 <_dtoa_r+0x518>
 8005ee4:	9b08      	ldr	r3, [sp, #32]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	dd37      	ble.n	8005f5a <_dtoa_r+0x43a>
 8005eea:	1e7b      	subs	r3, r7, #1
 8005eec:	4620      	mov	r0, r4
 8005eee:	9304      	str	r3, [sp, #16]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	4b55      	ldr	r3, [pc, #340]	@ (800604c <_dtoa_r+0x52c>)
 8005ef6:	f7fa faef 	bl	80004d8 <__aeabi_dmul>
 8005efa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005efe:	9c08      	ldr	r4, [sp, #32]
 8005f00:	3601      	adds	r6, #1
 8005f02:	4630      	mov	r0, r6
 8005f04:	f7fa fa7e 	bl	8000404 <__aeabi_i2d>
 8005f08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f0c:	f7fa fae4 	bl	80004d8 <__aeabi_dmul>
 8005f10:	2200      	movs	r2, #0
 8005f12:	4b4f      	ldr	r3, [pc, #316]	@ (8006050 <_dtoa_r+0x530>)
 8005f14:	f7fa f92a 	bl	800016c <__adddf3>
 8005f18:	4605      	mov	r5, r0
 8005f1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005f1e:	2c00      	cmp	r4, #0
 8005f20:	f040 809a 	bne.w	8006058 <_dtoa_r+0x538>
 8005f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	4b4a      	ldr	r3, [pc, #296]	@ (8006054 <_dtoa_r+0x534>)
 8005f2c:	f7fa f91c 	bl	8000168 <__aeabi_dsub>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f38:	462a      	mov	r2, r5
 8005f3a:	4633      	mov	r3, r6
 8005f3c:	f7fa fd5c 	bl	80009f8 <__aeabi_dcmpgt>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	f040 828e 	bne.w	8006462 <_dtoa_r+0x942>
 8005f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f4a:	462a      	mov	r2, r5
 8005f4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005f50:	f7fa fd34 	bl	80009bc <__aeabi_dcmplt>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	f040 8127 	bne.w	80061a8 <_dtoa_r+0x688>
 8005f5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005f5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005f62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f2c0 8163 	blt.w	8006230 <_dtoa_r+0x710>
 8005f6a:	2f0e      	cmp	r7, #14
 8005f6c:	f300 8160 	bgt.w	8006230 <_dtoa_r+0x710>
 8005f70:	4b33      	ldr	r3, [pc, #204]	@ (8006040 <_dtoa_r+0x520>)
 8005f72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f7e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	da03      	bge.n	8005f8c <_dtoa_r+0x46c>
 8005f84:	9b07      	ldr	r3, [sp, #28]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f340 8100 	ble.w	800618c <_dtoa_r+0x66c>
 8005f8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005f90:	4656      	mov	r6, sl
 8005f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f96:	4620      	mov	r0, r4
 8005f98:	4629      	mov	r1, r5
 8005f9a:	f7fa fbc7 	bl	800072c <__aeabi_ddiv>
 8005f9e:	f7fa fd4b 	bl	8000a38 <__aeabi_d2iz>
 8005fa2:	4680      	mov	r8, r0
 8005fa4:	f7fa fa2e 	bl	8000404 <__aeabi_i2d>
 8005fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fac:	f7fa fa94 	bl	80004d8 <__aeabi_dmul>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	f7fa f8d6 	bl	8000168 <__aeabi_dsub>
 8005fbc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005fc0:	9d07      	ldr	r5, [sp, #28]
 8005fc2:	f806 4b01 	strb.w	r4, [r6], #1
 8005fc6:	eba6 040a 	sub.w	r4, r6, sl
 8005fca:	42a5      	cmp	r5, r4
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	f040 8116 	bne.w	8006200 <_dtoa_r+0x6e0>
 8005fd4:	f7fa f8ca 	bl	800016c <__adddf3>
 8005fd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fdc:	4604      	mov	r4, r0
 8005fde:	460d      	mov	r5, r1
 8005fe0:	f7fa fd0a 	bl	80009f8 <__aeabi_dcmpgt>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	f040 80f8 	bne.w	80061da <_dtoa_r+0x6ba>
 8005fea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fee:	4620      	mov	r0, r4
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	f7fa fcd9 	bl	80009a8 <__aeabi_dcmpeq>
 8005ff6:	b118      	cbz	r0, 8006000 <_dtoa_r+0x4e0>
 8005ff8:	f018 0f01 	tst.w	r8, #1
 8005ffc:	f040 80ed 	bne.w	80061da <_dtoa_r+0x6ba>
 8006000:	4649      	mov	r1, r9
 8006002:	4658      	mov	r0, fp
 8006004:	f000 fc92 	bl	800692c <_Bfree>
 8006008:	2300      	movs	r3, #0
 800600a:	7033      	strb	r3, [r6, #0]
 800600c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800600e:	3701      	adds	r7, #1
 8006010:	601f      	str	r7, [r3, #0]
 8006012:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 8320 	beq.w	800665a <_dtoa_r+0xb3a>
 800601a:	601e      	str	r6, [r3, #0]
 800601c:	e31d      	b.n	800665a <_dtoa_r+0xb3a>
 800601e:	07e2      	lsls	r2, r4, #31
 8006020:	d505      	bpl.n	800602e <_dtoa_r+0x50e>
 8006022:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006026:	f7fa fa57 	bl	80004d8 <__aeabi_dmul>
 800602a:	2301      	movs	r3, #1
 800602c:	3601      	adds	r6, #1
 800602e:	1064      	asrs	r4, r4, #1
 8006030:	3508      	adds	r5, #8
 8006032:	e73f      	b.n	8005eb4 <_dtoa_r+0x394>
 8006034:	2602      	movs	r6, #2
 8006036:	e742      	b.n	8005ebe <_dtoa_r+0x39e>
 8006038:	9c07      	ldr	r4, [sp, #28]
 800603a:	9704      	str	r7, [sp, #16]
 800603c:	e761      	b.n	8005f02 <_dtoa_r+0x3e2>
 800603e:	bf00      	nop
 8006040:	08008de8 	.word	0x08008de8
 8006044:	08008dc0 	.word	0x08008dc0
 8006048:	3ff00000 	.word	0x3ff00000
 800604c:	40240000 	.word	0x40240000
 8006050:	401c0000 	.word	0x401c0000
 8006054:	40140000 	.word	0x40140000
 8006058:	4b70      	ldr	r3, [pc, #448]	@ (800621c <_dtoa_r+0x6fc>)
 800605a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800605c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006060:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006064:	4454      	add	r4, sl
 8006066:	2900      	cmp	r1, #0
 8006068:	d045      	beq.n	80060f6 <_dtoa_r+0x5d6>
 800606a:	2000      	movs	r0, #0
 800606c:	496c      	ldr	r1, [pc, #432]	@ (8006220 <_dtoa_r+0x700>)
 800606e:	f7fa fb5d 	bl	800072c <__aeabi_ddiv>
 8006072:	4633      	mov	r3, r6
 8006074:	462a      	mov	r2, r5
 8006076:	f7fa f877 	bl	8000168 <__aeabi_dsub>
 800607a:	4656      	mov	r6, sl
 800607c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006084:	f7fa fcd8 	bl	8000a38 <__aeabi_d2iz>
 8006088:	4605      	mov	r5, r0
 800608a:	f7fa f9bb 	bl	8000404 <__aeabi_i2d>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006096:	f7fa f867 	bl	8000168 <__aeabi_dsub>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	3530      	adds	r5, #48	@ 0x30
 80060a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80060a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80060a8:	f806 5b01 	strb.w	r5, [r6], #1
 80060ac:	f7fa fc86 	bl	80009bc <__aeabi_dcmplt>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d163      	bne.n	800617c <_dtoa_r+0x65c>
 80060b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060b8:	2000      	movs	r0, #0
 80060ba:	495a      	ldr	r1, [pc, #360]	@ (8006224 <_dtoa_r+0x704>)
 80060bc:	f7fa f854 	bl	8000168 <__aeabi_dsub>
 80060c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80060c4:	f7fa fc7a 	bl	80009bc <__aeabi_dcmplt>
 80060c8:	2800      	cmp	r0, #0
 80060ca:	f040 8087 	bne.w	80061dc <_dtoa_r+0x6bc>
 80060ce:	42a6      	cmp	r6, r4
 80060d0:	f43f af43 	beq.w	8005f5a <_dtoa_r+0x43a>
 80060d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80060d8:	2200      	movs	r2, #0
 80060da:	4b53      	ldr	r3, [pc, #332]	@ (8006228 <_dtoa_r+0x708>)
 80060dc:	f7fa f9fc 	bl	80004d8 <__aeabi_dmul>
 80060e0:	2200      	movs	r2, #0
 80060e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80060e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060ea:	4b4f      	ldr	r3, [pc, #316]	@ (8006228 <_dtoa_r+0x708>)
 80060ec:	f7fa f9f4 	bl	80004d8 <__aeabi_dmul>
 80060f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060f4:	e7c4      	b.n	8006080 <_dtoa_r+0x560>
 80060f6:	4631      	mov	r1, r6
 80060f8:	4628      	mov	r0, r5
 80060fa:	f7fa f9ed 	bl	80004d8 <__aeabi_dmul>
 80060fe:	4656      	mov	r6, sl
 8006100:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006104:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800610a:	f7fa fc95 	bl	8000a38 <__aeabi_d2iz>
 800610e:	4605      	mov	r5, r0
 8006110:	f7fa f978 	bl	8000404 <__aeabi_i2d>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800611c:	f7fa f824 	bl	8000168 <__aeabi_dsub>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	3530      	adds	r5, #48	@ 0x30
 8006126:	f806 5b01 	strb.w	r5, [r6], #1
 800612a:	42a6      	cmp	r6, r4
 800612c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	d124      	bne.n	8006180 <_dtoa_r+0x660>
 8006136:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800613a:	4b39      	ldr	r3, [pc, #228]	@ (8006220 <_dtoa_r+0x700>)
 800613c:	f7fa f816 	bl	800016c <__adddf3>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006148:	f7fa fc56 	bl	80009f8 <__aeabi_dcmpgt>
 800614c:	2800      	cmp	r0, #0
 800614e:	d145      	bne.n	80061dc <_dtoa_r+0x6bc>
 8006150:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006154:	2000      	movs	r0, #0
 8006156:	4932      	ldr	r1, [pc, #200]	@ (8006220 <_dtoa_r+0x700>)
 8006158:	f7fa f806 	bl	8000168 <__aeabi_dsub>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006164:	f7fa fc2a 	bl	80009bc <__aeabi_dcmplt>
 8006168:	2800      	cmp	r0, #0
 800616a:	f43f aef6 	beq.w	8005f5a <_dtoa_r+0x43a>
 800616e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006170:	1e73      	subs	r3, r6, #1
 8006172:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006174:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006178:	2b30      	cmp	r3, #48	@ 0x30
 800617a:	d0f8      	beq.n	800616e <_dtoa_r+0x64e>
 800617c:	9f04      	ldr	r7, [sp, #16]
 800617e:	e73f      	b.n	8006000 <_dtoa_r+0x4e0>
 8006180:	4b29      	ldr	r3, [pc, #164]	@ (8006228 <_dtoa_r+0x708>)
 8006182:	f7fa f9a9 	bl	80004d8 <__aeabi_dmul>
 8006186:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800618a:	e7bc      	b.n	8006106 <_dtoa_r+0x5e6>
 800618c:	d10c      	bne.n	80061a8 <_dtoa_r+0x688>
 800618e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006192:	2200      	movs	r2, #0
 8006194:	4b25      	ldr	r3, [pc, #148]	@ (800622c <_dtoa_r+0x70c>)
 8006196:	f7fa f99f 	bl	80004d8 <__aeabi_dmul>
 800619a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800619e:	f7fa fc21 	bl	80009e4 <__aeabi_dcmpge>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	f000 815b 	beq.w	800645e <_dtoa_r+0x93e>
 80061a8:	2400      	movs	r4, #0
 80061aa:	4625      	mov	r5, r4
 80061ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80061ae:	4656      	mov	r6, sl
 80061b0:	43db      	mvns	r3, r3
 80061b2:	9304      	str	r3, [sp, #16]
 80061b4:	2700      	movs	r7, #0
 80061b6:	4621      	mov	r1, r4
 80061b8:	4658      	mov	r0, fp
 80061ba:	f000 fbb7 	bl	800692c <_Bfree>
 80061be:	2d00      	cmp	r5, #0
 80061c0:	d0dc      	beq.n	800617c <_dtoa_r+0x65c>
 80061c2:	b12f      	cbz	r7, 80061d0 <_dtoa_r+0x6b0>
 80061c4:	42af      	cmp	r7, r5
 80061c6:	d003      	beq.n	80061d0 <_dtoa_r+0x6b0>
 80061c8:	4639      	mov	r1, r7
 80061ca:	4658      	mov	r0, fp
 80061cc:	f000 fbae 	bl	800692c <_Bfree>
 80061d0:	4629      	mov	r1, r5
 80061d2:	4658      	mov	r0, fp
 80061d4:	f000 fbaa 	bl	800692c <_Bfree>
 80061d8:	e7d0      	b.n	800617c <_dtoa_r+0x65c>
 80061da:	9704      	str	r7, [sp, #16]
 80061dc:	4633      	mov	r3, r6
 80061de:	461e      	mov	r6, r3
 80061e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061e4:	2a39      	cmp	r2, #57	@ 0x39
 80061e6:	d107      	bne.n	80061f8 <_dtoa_r+0x6d8>
 80061e8:	459a      	cmp	sl, r3
 80061ea:	d1f8      	bne.n	80061de <_dtoa_r+0x6be>
 80061ec:	9a04      	ldr	r2, [sp, #16]
 80061ee:	3201      	adds	r2, #1
 80061f0:	9204      	str	r2, [sp, #16]
 80061f2:	2230      	movs	r2, #48	@ 0x30
 80061f4:	f88a 2000 	strb.w	r2, [sl]
 80061f8:	781a      	ldrb	r2, [r3, #0]
 80061fa:	3201      	adds	r2, #1
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	e7bd      	b.n	800617c <_dtoa_r+0x65c>
 8006200:	2200      	movs	r2, #0
 8006202:	4b09      	ldr	r3, [pc, #36]	@ (8006228 <_dtoa_r+0x708>)
 8006204:	f7fa f968 	bl	80004d8 <__aeabi_dmul>
 8006208:	2200      	movs	r2, #0
 800620a:	2300      	movs	r3, #0
 800620c:	4604      	mov	r4, r0
 800620e:	460d      	mov	r5, r1
 8006210:	f7fa fbca 	bl	80009a8 <__aeabi_dcmpeq>
 8006214:	2800      	cmp	r0, #0
 8006216:	f43f aebc 	beq.w	8005f92 <_dtoa_r+0x472>
 800621a:	e6f1      	b.n	8006000 <_dtoa_r+0x4e0>
 800621c:	08008de8 	.word	0x08008de8
 8006220:	3fe00000 	.word	0x3fe00000
 8006224:	3ff00000 	.word	0x3ff00000
 8006228:	40240000 	.word	0x40240000
 800622c:	40140000 	.word	0x40140000
 8006230:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006232:	2a00      	cmp	r2, #0
 8006234:	f000 80db 	beq.w	80063ee <_dtoa_r+0x8ce>
 8006238:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800623a:	2a01      	cmp	r2, #1
 800623c:	f300 80bf 	bgt.w	80063be <_dtoa_r+0x89e>
 8006240:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006242:	2a00      	cmp	r2, #0
 8006244:	f000 80b7 	beq.w	80063b6 <_dtoa_r+0x896>
 8006248:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800624c:	4646      	mov	r6, r8
 800624e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006250:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006252:	2101      	movs	r1, #1
 8006254:	441a      	add	r2, r3
 8006256:	4658      	mov	r0, fp
 8006258:	4498      	add	r8, r3
 800625a:	9209      	str	r2, [sp, #36]	@ 0x24
 800625c:	f000 fc1a 	bl	8006a94 <__i2b>
 8006260:	4605      	mov	r5, r0
 8006262:	b15e      	cbz	r6, 800627c <_dtoa_r+0x75c>
 8006264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006266:	2b00      	cmp	r3, #0
 8006268:	dd08      	ble.n	800627c <_dtoa_r+0x75c>
 800626a:	42b3      	cmp	r3, r6
 800626c:	bfa8      	it	ge
 800626e:	4633      	movge	r3, r6
 8006270:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006272:	eba8 0803 	sub.w	r8, r8, r3
 8006276:	1af6      	subs	r6, r6, r3
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	9309      	str	r3, [sp, #36]	@ 0x24
 800627c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800627e:	b1f3      	cbz	r3, 80062be <_dtoa_r+0x79e>
 8006280:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 80b7 	beq.w	80063f6 <_dtoa_r+0x8d6>
 8006288:	b18c      	cbz	r4, 80062ae <_dtoa_r+0x78e>
 800628a:	4629      	mov	r1, r5
 800628c:	4622      	mov	r2, r4
 800628e:	4658      	mov	r0, fp
 8006290:	f000 fcbe 	bl	8006c10 <__pow5mult>
 8006294:	464a      	mov	r2, r9
 8006296:	4601      	mov	r1, r0
 8006298:	4605      	mov	r5, r0
 800629a:	4658      	mov	r0, fp
 800629c:	f000 fc10 	bl	8006ac0 <__multiply>
 80062a0:	4649      	mov	r1, r9
 80062a2:	9004      	str	r0, [sp, #16]
 80062a4:	4658      	mov	r0, fp
 80062a6:	f000 fb41 	bl	800692c <_Bfree>
 80062aa:	9b04      	ldr	r3, [sp, #16]
 80062ac:	4699      	mov	r9, r3
 80062ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062b0:	1b1a      	subs	r2, r3, r4
 80062b2:	d004      	beq.n	80062be <_dtoa_r+0x79e>
 80062b4:	4649      	mov	r1, r9
 80062b6:	4658      	mov	r0, fp
 80062b8:	f000 fcaa 	bl	8006c10 <__pow5mult>
 80062bc:	4681      	mov	r9, r0
 80062be:	2101      	movs	r1, #1
 80062c0:	4658      	mov	r0, fp
 80062c2:	f000 fbe7 	bl	8006a94 <__i2b>
 80062c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062c8:	4604      	mov	r4, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 81c9 	beq.w	8006662 <_dtoa_r+0xb42>
 80062d0:	461a      	mov	r2, r3
 80062d2:	4601      	mov	r1, r0
 80062d4:	4658      	mov	r0, fp
 80062d6:	f000 fc9b 	bl	8006c10 <__pow5mult>
 80062da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80062dc:	4604      	mov	r4, r0
 80062de:	2b01      	cmp	r3, #1
 80062e0:	f300 808f 	bgt.w	8006402 <_dtoa_r+0x8e2>
 80062e4:	9b02      	ldr	r3, [sp, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f040 8087 	bne.w	80063fa <_dtoa_r+0x8da>
 80062ec:	9b03      	ldr	r3, [sp, #12]
 80062ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f040 8083 	bne.w	80063fe <_dtoa_r+0x8de>
 80062f8:	9b03      	ldr	r3, [sp, #12]
 80062fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062fe:	0d1b      	lsrs	r3, r3, #20
 8006300:	051b      	lsls	r3, r3, #20
 8006302:	b12b      	cbz	r3, 8006310 <_dtoa_r+0x7f0>
 8006304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006306:	f108 0801 	add.w	r8, r8, #1
 800630a:	3301      	adds	r3, #1
 800630c:	9309      	str	r3, [sp, #36]	@ 0x24
 800630e:	2301      	movs	r3, #1
 8006310:	930a      	str	r3, [sp, #40]	@ 0x28
 8006312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 81aa 	beq.w	800666e <_dtoa_r+0xb4e>
 800631a:	6923      	ldr	r3, [r4, #16]
 800631c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006320:	6918      	ldr	r0, [r3, #16]
 8006322:	f000 fb6b 	bl	80069fc <__hi0bits>
 8006326:	f1c0 0020 	rsb	r0, r0, #32
 800632a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800632c:	4418      	add	r0, r3
 800632e:	f010 001f 	ands.w	r0, r0, #31
 8006332:	d071      	beq.n	8006418 <_dtoa_r+0x8f8>
 8006334:	f1c0 0320 	rsb	r3, r0, #32
 8006338:	2b04      	cmp	r3, #4
 800633a:	dd65      	ble.n	8006408 <_dtoa_r+0x8e8>
 800633c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800633e:	f1c0 001c 	rsb	r0, r0, #28
 8006342:	4403      	add	r3, r0
 8006344:	4480      	add	r8, r0
 8006346:	4406      	add	r6, r0
 8006348:	9309      	str	r3, [sp, #36]	@ 0x24
 800634a:	f1b8 0f00 	cmp.w	r8, #0
 800634e:	dd05      	ble.n	800635c <_dtoa_r+0x83c>
 8006350:	4649      	mov	r1, r9
 8006352:	4642      	mov	r2, r8
 8006354:	4658      	mov	r0, fp
 8006356:	f000 fcb5 	bl	8006cc4 <__lshift>
 800635a:	4681      	mov	r9, r0
 800635c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800635e:	2b00      	cmp	r3, #0
 8006360:	dd05      	ble.n	800636e <_dtoa_r+0x84e>
 8006362:	4621      	mov	r1, r4
 8006364:	461a      	mov	r2, r3
 8006366:	4658      	mov	r0, fp
 8006368:	f000 fcac 	bl	8006cc4 <__lshift>
 800636c:	4604      	mov	r4, r0
 800636e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006370:	2b00      	cmp	r3, #0
 8006372:	d053      	beq.n	800641c <_dtoa_r+0x8fc>
 8006374:	4621      	mov	r1, r4
 8006376:	4648      	mov	r0, r9
 8006378:	f000 fd10 	bl	8006d9c <__mcmp>
 800637c:	2800      	cmp	r0, #0
 800637e:	da4d      	bge.n	800641c <_dtoa_r+0x8fc>
 8006380:	1e7b      	subs	r3, r7, #1
 8006382:	4649      	mov	r1, r9
 8006384:	9304      	str	r3, [sp, #16]
 8006386:	220a      	movs	r2, #10
 8006388:	2300      	movs	r3, #0
 800638a:	4658      	mov	r0, fp
 800638c:	f000 faf0 	bl	8006970 <__multadd>
 8006390:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006392:	4681      	mov	r9, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 816c 	beq.w	8006672 <_dtoa_r+0xb52>
 800639a:	2300      	movs	r3, #0
 800639c:	4629      	mov	r1, r5
 800639e:	220a      	movs	r2, #10
 80063a0:	4658      	mov	r0, fp
 80063a2:	f000 fae5 	bl	8006970 <__multadd>
 80063a6:	9b08      	ldr	r3, [sp, #32]
 80063a8:	4605      	mov	r5, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	dc61      	bgt.n	8006472 <_dtoa_r+0x952>
 80063ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	dc3b      	bgt.n	800642c <_dtoa_r+0x90c>
 80063b4:	e05d      	b.n	8006472 <_dtoa_r+0x952>
 80063b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80063b8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80063bc:	e746      	b.n	800624c <_dtoa_r+0x72c>
 80063be:	9b07      	ldr	r3, [sp, #28]
 80063c0:	1e5c      	subs	r4, r3, #1
 80063c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063c4:	42a3      	cmp	r3, r4
 80063c6:	bfbf      	itttt	lt
 80063c8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80063ca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80063cc:	1ae3      	sublt	r3, r4, r3
 80063ce:	18d2      	addlt	r2, r2, r3
 80063d0:	bfa8      	it	ge
 80063d2:	1b1c      	subge	r4, r3, r4
 80063d4:	9b07      	ldr	r3, [sp, #28]
 80063d6:	bfbe      	ittt	lt
 80063d8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80063da:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80063dc:	2400      	movlt	r4, #0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	bfb5      	itete	lt
 80063e2:	eba8 0603 	sublt.w	r6, r8, r3
 80063e6:	4646      	movge	r6, r8
 80063e8:	2300      	movlt	r3, #0
 80063ea:	9b07      	ldrge	r3, [sp, #28]
 80063ec:	e730      	b.n	8006250 <_dtoa_r+0x730>
 80063ee:	4646      	mov	r6, r8
 80063f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80063f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80063f4:	e735      	b.n	8006262 <_dtoa_r+0x742>
 80063f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063f8:	e75c      	b.n	80062b4 <_dtoa_r+0x794>
 80063fa:	2300      	movs	r3, #0
 80063fc:	e788      	b.n	8006310 <_dtoa_r+0x7f0>
 80063fe:	9b02      	ldr	r3, [sp, #8]
 8006400:	e786      	b.n	8006310 <_dtoa_r+0x7f0>
 8006402:	2300      	movs	r3, #0
 8006404:	930a      	str	r3, [sp, #40]	@ 0x28
 8006406:	e788      	b.n	800631a <_dtoa_r+0x7fa>
 8006408:	d09f      	beq.n	800634a <_dtoa_r+0x82a>
 800640a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800640c:	331c      	adds	r3, #28
 800640e:	441a      	add	r2, r3
 8006410:	4498      	add	r8, r3
 8006412:	441e      	add	r6, r3
 8006414:	9209      	str	r2, [sp, #36]	@ 0x24
 8006416:	e798      	b.n	800634a <_dtoa_r+0x82a>
 8006418:	4603      	mov	r3, r0
 800641a:	e7f6      	b.n	800640a <_dtoa_r+0x8ea>
 800641c:	9b07      	ldr	r3, [sp, #28]
 800641e:	9704      	str	r7, [sp, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	dc20      	bgt.n	8006466 <_dtoa_r+0x946>
 8006424:	9308      	str	r3, [sp, #32]
 8006426:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006428:	2b02      	cmp	r3, #2
 800642a:	dd1e      	ble.n	800646a <_dtoa_r+0x94a>
 800642c:	9b08      	ldr	r3, [sp, #32]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f47f aebc 	bne.w	80061ac <_dtoa_r+0x68c>
 8006434:	4621      	mov	r1, r4
 8006436:	2205      	movs	r2, #5
 8006438:	4658      	mov	r0, fp
 800643a:	f000 fa99 	bl	8006970 <__multadd>
 800643e:	4601      	mov	r1, r0
 8006440:	4604      	mov	r4, r0
 8006442:	4648      	mov	r0, r9
 8006444:	f000 fcaa 	bl	8006d9c <__mcmp>
 8006448:	2800      	cmp	r0, #0
 800644a:	f77f aeaf 	ble.w	80061ac <_dtoa_r+0x68c>
 800644e:	2331      	movs	r3, #49	@ 0x31
 8006450:	4656      	mov	r6, sl
 8006452:	f806 3b01 	strb.w	r3, [r6], #1
 8006456:	9b04      	ldr	r3, [sp, #16]
 8006458:	3301      	adds	r3, #1
 800645a:	9304      	str	r3, [sp, #16]
 800645c:	e6aa      	b.n	80061b4 <_dtoa_r+0x694>
 800645e:	9c07      	ldr	r4, [sp, #28]
 8006460:	9704      	str	r7, [sp, #16]
 8006462:	4625      	mov	r5, r4
 8006464:	e7f3      	b.n	800644e <_dtoa_r+0x92e>
 8006466:	9b07      	ldr	r3, [sp, #28]
 8006468:	9308      	str	r3, [sp, #32]
 800646a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 8104 	beq.w	800667a <_dtoa_r+0xb5a>
 8006472:	2e00      	cmp	r6, #0
 8006474:	dd05      	ble.n	8006482 <_dtoa_r+0x962>
 8006476:	4629      	mov	r1, r5
 8006478:	4632      	mov	r2, r6
 800647a:	4658      	mov	r0, fp
 800647c:	f000 fc22 	bl	8006cc4 <__lshift>
 8006480:	4605      	mov	r5, r0
 8006482:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006484:	2b00      	cmp	r3, #0
 8006486:	d05a      	beq.n	800653e <_dtoa_r+0xa1e>
 8006488:	4658      	mov	r0, fp
 800648a:	6869      	ldr	r1, [r5, #4]
 800648c:	f000 fa0e 	bl	80068ac <_Balloc>
 8006490:	4606      	mov	r6, r0
 8006492:	b928      	cbnz	r0, 80064a0 <_dtoa_r+0x980>
 8006494:	4602      	mov	r2, r0
 8006496:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800649a:	4b83      	ldr	r3, [pc, #524]	@ (80066a8 <_dtoa_r+0xb88>)
 800649c:	f7ff bb54 	b.w	8005b48 <_dtoa_r+0x28>
 80064a0:	692a      	ldr	r2, [r5, #16]
 80064a2:	f105 010c 	add.w	r1, r5, #12
 80064a6:	3202      	adds	r2, #2
 80064a8:	0092      	lsls	r2, r2, #2
 80064aa:	300c      	adds	r0, #12
 80064ac:	f000 ffa8 	bl	8007400 <memcpy>
 80064b0:	2201      	movs	r2, #1
 80064b2:	4631      	mov	r1, r6
 80064b4:	4658      	mov	r0, fp
 80064b6:	f000 fc05 	bl	8006cc4 <__lshift>
 80064ba:	462f      	mov	r7, r5
 80064bc:	4605      	mov	r5, r0
 80064be:	f10a 0301 	add.w	r3, sl, #1
 80064c2:	9307      	str	r3, [sp, #28]
 80064c4:	9b08      	ldr	r3, [sp, #32]
 80064c6:	4453      	add	r3, sl
 80064c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064ca:	9b02      	ldr	r3, [sp, #8]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80064d2:	9b07      	ldr	r3, [sp, #28]
 80064d4:	4621      	mov	r1, r4
 80064d6:	3b01      	subs	r3, #1
 80064d8:	4648      	mov	r0, r9
 80064da:	9302      	str	r3, [sp, #8]
 80064dc:	f7ff fa95 	bl	8005a0a <quorem>
 80064e0:	4639      	mov	r1, r7
 80064e2:	9008      	str	r0, [sp, #32]
 80064e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80064e8:	4648      	mov	r0, r9
 80064ea:	f000 fc57 	bl	8006d9c <__mcmp>
 80064ee:	462a      	mov	r2, r5
 80064f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80064f2:	4621      	mov	r1, r4
 80064f4:	4658      	mov	r0, fp
 80064f6:	f000 fc6d 	bl	8006dd4 <__mdiff>
 80064fa:	68c2      	ldr	r2, [r0, #12]
 80064fc:	4606      	mov	r6, r0
 80064fe:	bb02      	cbnz	r2, 8006542 <_dtoa_r+0xa22>
 8006500:	4601      	mov	r1, r0
 8006502:	4648      	mov	r0, r9
 8006504:	f000 fc4a 	bl	8006d9c <__mcmp>
 8006508:	4602      	mov	r2, r0
 800650a:	4631      	mov	r1, r6
 800650c:	4658      	mov	r0, fp
 800650e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006510:	f000 fa0c 	bl	800692c <_Bfree>
 8006514:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006516:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006518:	9e07      	ldr	r6, [sp, #28]
 800651a:	ea43 0102 	orr.w	r1, r3, r2
 800651e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006520:	4319      	orrs	r1, r3
 8006522:	d110      	bne.n	8006546 <_dtoa_r+0xa26>
 8006524:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006528:	d029      	beq.n	800657e <_dtoa_r+0xa5e>
 800652a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800652c:	2b00      	cmp	r3, #0
 800652e:	dd02      	ble.n	8006536 <_dtoa_r+0xa16>
 8006530:	9b08      	ldr	r3, [sp, #32]
 8006532:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006536:	9b02      	ldr	r3, [sp, #8]
 8006538:	f883 8000 	strb.w	r8, [r3]
 800653c:	e63b      	b.n	80061b6 <_dtoa_r+0x696>
 800653e:	4628      	mov	r0, r5
 8006540:	e7bb      	b.n	80064ba <_dtoa_r+0x99a>
 8006542:	2201      	movs	r2, #1
 8006544:	e7e1      	b.n	800650a <_dtoa_r+0x9ea>
 8006546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006548:	2b00      	cmp	r3, #0
 800654a:	db04      	blt.n	8006556 <_dtoa_r+0xa36>
 800654c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800654e:	430b      	orrs	r3, r1
 8006550:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006552:	430b      	orrs	r3, r1
 8006554:	d120      	bne.n	8006598 <_dtoa_r+0xa78>
 8006556:	2a00      	cmp	r2, #0
 8006558:	dded      	ble.n	8006536 <_dtoa_r+0xa16>
 800655a:	4649      	mov	r1, r9
 800655c:	2201      	movs	r2, #1
 800655e:	4658      	mov	r0, fp
 8006560:	f000 fbb0 	bl	8006cc4 <__lshift>
 8006564:	4621      	mov	r1, r4
 8006566:	4681      	mov	r9, r0
 8006568:	f000 fc18 	bl	8006d9c <__mcmp>
 800656c:	2800      	cmp	r0, #0
 800656e:	dc03      	bgt.n	8006578 <_dtoa_r+0xa58>
 8006570:	d1e1      	bne.n	8006536 <_dtoa_r+0xa16>
 8006572:	f018 0f01 	tst.w	r8, #1
 8006576:	d0de      	beq.n	8006536 <_dtoa_r+0xa16>
 8006578:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800657c:	d1d8      	bne.n	8006530 <_dtoa_r+0xa10>
 800657e:	2339      	movs	r3, #57	@ 0x39
 8006580:	9a02      	ldr	r2, [sp, #8]
 8006582:	7013      	strb	r3, [r2, #0]
 8006584:	4633      	mov	r3, r6
 8006586:	461e      	mov	r6, r3
 8006588:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800658c:	3b01      	subs	r3, #1
 800658e:	2a39      	cmp	r2, #57	@ 0x39
 8006590:	d052      	beq.n	8006638 <_dtoa_r+0xb18>
 8006592:	3201      	adds	r2, #1
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	e60e      	b.n	80061b6 <_dtoa_r+0x696>
 8006598:	2a00      	cmp	r2, #0
 800659a:	dd07      	ble.n	80065ac <_dtoa_r+0xa8c>
 800659c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80065a0:	d0ed      	beq.n	800657e <_dtoa_r+0xa5e>
 80065a2:	9a02      	ldr	r2, [sp, #8]
 80065a4:	f108 0301 	add.w	r3, r8, #1
 80065a8:	7013      	strb	r3, [r2, #0]
 80065aa:	e604      	b.n	80061b6 <_dtoa_r+0x696>
 80065ac:	9b07      	ldr	r3, [sp, #28]
 80065ae:	9a07      	ldr	r2, [sp, #28]
 80065b0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80065b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d028      	beq.n	800660c <_dtoa_r+0xaec>
 80065ba:	4649      	mov	r1, r9
 80065bc:	2300      	movs	r3, #0
 80065be:	220a      	movs	r2, #10
 80065c0:	4658      	mov	r0, fp
 80065c2:	f000 f9d5 	bl	8006970 <__multadd>
 80065c6:	42af      	cmp	r7, r5
 80065c8:	4681      	mov	r9, r0
 80065ca:	f04f 0300 	mov.w	r3, #0
 80065ce:	f04f 020a 	mov.w	r2, #10
 80065d2:	4639      	mov	r1, r7
 80065d4:	4658      	mov	r0, fp
 80065d6:	d107      	bne.n	80065e8 <_dtoa_r+0xac8>
 80065d8:	f000 f9ca 	bl	8006970 <__multadd>
 80065dc:	4607      	mov	r7, r0
 80065de:	4605      	mov	r5, r0
 80065e0:	9b07      	ldr	r3, [sp, #28]
 80065e2:	3301      	adds	r3, #1
 80065e4:	9307      	str	r3, [sp, #28]
 80065e6:	e774      	b.n	80064d2 <_dtoa_r+0x9b2>
 80065e8:	f000 f9c2 	bl	8006970 <__multadd>
 80065ec:	4629      	mov	r1, r5
 80065ee:	4607      	mov	r7, r0
 80065f0:	2300      	movs	r3, #0
 80065f2:	220a      	movs	r2, #10
 80065f4:	4658      	mov	r0, fp
 80065f6:	f000 f9bb 	bl	8006970 <__multadd>
 80065fa:	4605      	mov	r5, r0
 80065fc:	e7f0      	b.n	80065e0 <_dtoa_r+0xac0>
 80065fe:	9b08      	ldr	r3, [sp, #32]
 8006600:	2700      	movs	r7, #0
 8006602:	2b00      	cmp	r3, #0
 8006604:	bfcc      	ite	gt
 8006606:	461e      	movgt	r6, r3
 8006608:	2601      	movle	r6, #1
 800660a:	4456      	add	r6, sl
 800660c:	4649      	mov	r1, r9
 800660e:	2201      	movs	r2, #1
 8006610:	4658      	mov	r0, fp
 8006612:	f000 fb57 	bl	8006cc4 <__lshift>
 8006616:	4621      	mov	r1, r4
 8006618:	4681      	mov	r9, r0
 800661a:	f000 fbbf 	bl	8006d9c <__mcmp>
 800661e:	2800      	cmp	r0, #0
 8006620:	dcb0      	bgt.n	8006584 <_dtoa_r+0xa64>
 8006622:	d102      	bne.n	800662a <_dtoa_r+0xb0a>
 8006624:	f018 0f01 	tst.w	r8, #1
 8006628:	d1ac      	bne.n	8006584 <_dtoa_r+0xa64>
 800662a:	4633      	mov	r3, r6
 800662c:	461e      	mov	r6, r3
 800662e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006632:	2a30      	cmp	r2, #48	@ 0x30
 8006634:	d0fa      	beq.n	800662c <_dtoa_r+0xb0c>
 8006636:	e5be      	b.n	80061b6 <_dtoa_r+0x696>
 8006638:	459a      	cmp	sl, r3
 800663a:	d1a4      	bne.n	8006586 <_dtoa_r+0xa66>
 800663c:	9b04      	ldr	r3, [sp, #16]
 800663e:	3301      	adds	r3, #1
 8006640:	9304      	str	r3, [sp, #16]
 8006642:	2331      	movs	r3, #49	@ 0x31
 8006644:	f88a 3000 	strb.w	r3, [sl]
 8006648:	e5b5      	b.n	80061b6 <_dtoa_r+0x696>
 800664a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800664c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80066ac <_dtoa_r+0xb8c>
 8006650:	b11b      	cbz	r3, 800665a <_dtoa_r+0xb3a>
 8006652:	f10a 0308 	add.w	r3, sl, #8
 8006656:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	4650      	mov	r0, sl
 800665c:	b017      	add	sp, #92	@ 0x5c
 800665e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006662:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006664:	2b01      	cmp	r3, #1
 8006666:	f77f ae3d 	ble.w	80062e4 <_dtoa_r+0x7c4>
 800666a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800666c:	930a      	str	r3, [sp, #40]	@ 0x28
 800666e:	2001      	movs	r0, #1
 8006670:	e65b      	b.n	800632a <_dtoa_r+0x80a>
 8006672:	9b08      	ldr	r3, [sp, #32]
 8006674:	2b00      	cmp	r3, #0
 8006676:	f77f aed6 	ble.w	8006426 <_dtoa_r+0x906>
 800667a:	4656      	mov	r6, sl
 800667c:	4621      	mov	r1, r4
 800667e:	4648      	mov	r0, r9
 8006680:	f7ff f9c3 	bl	8005a0a <quorem>
 8006684:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006688:	9b08      	ldr	r3, [sp, #32]
 800668a:	f806 8b01 	strb.w	r8, [r6], #1
 800668e:	eba6 020a 	sub.w	r2, r6, sl
 8006692:	4293      	cmp	r3, r2
 8006694:	ddb3      	ble.n	80065fe <_dtoa_r+0xade>
 8006696:	4649      	mov	r1, r9
 8006698:	2300      	movs	r3, #0
 800669a:	220a      	movs	r2, #10
 800669c:	4658      	mov	r0, fp
 800669e:	f000 f967 	bl	8006970 <__multadd>
 80066a2:	4681      	mov	r9, r0
 80066a4:	e7ea      	b.n	800667c <_dtoa_r+0xb5c>
 80066a6:	bf00      	nop
 80066a8:	08008d46 	.word	0x08008d46
 80066ac:	08008cca 	.word	0x08008cca

080066b0 <_free_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	4605      	mov	r5, r0
 80066b4:	2900      	cmp	r1, #0
 80066b6:	d040      	beq.n	800673a <_free_r+0x8a>
 80066b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066bc:	1f0c      	subs	r4, r1, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	bfb8      	it	lt
 80066c2:	18e4      	addlt	r4, r4, r3
 80066c4:	f000 f8e6 	bl	8006894 <__malloc_lock>
 80066c8:	4a1c      	ldr	r2, [pc, #112]	@ (800673c <_free_r+0x8c>)
 80066ca:	6813      	ldr	r3, [r2, #0]
 80066cc:	b933      	cbnz	r3, 80066dc <_free_r+0x2c>
 80066ce:	6063      	str	r3, [r4, #4]
 80066d0:	6014      	str	r4, [r2, #0]
 80066d2:	4628      	mov	r0, r5
 80066d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066d8:	f000 b8e2 	b.w	80068a0 <__malloc_unlock>
 80066dc:	42a3      	cmp	r3, r4
 80066de:	d908      	bls.n	80066f2 <_free_r+0x42>
 80066e0:	6820      	ldr	r0, [r4, #0]
 80066e2:	1821      	adds	r1, r4, r0
 80066e4:	428b      	cmp	r3, r1
 80066e6:	bf01      	itttt	eq
 80066e8:	6819      	ldreq	r1, [r3, #0]
 80066ea:	685b      	ldreq	r3, [r3, #4]
 80066ec:	1809      	addeq	r1, r1, r0
 80066ee:	6021      	streq	r1, [r4, #0]
 80066f0:	e7ed      	b.n	80066ce <_free_r+0x1e>
 80066f2:	461a      	mov	r2, r3
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	b10b      	cbz	r3, 80066fc <_free_r+0x4c>
 80066f8:	42a3      	cmp	r3, r4
 80066fa:	d9fa      	bls.n	80066f2 <_free_r+0x42>
 80066fc:	6811      	ldr	r1, [r2, #0]
 80066fe:	1850      	adds	r0, r2, r1
 8006700:	42a0      	cmp	r0, r4
 8006702:	d10b      	bne.n	800671c <_free_r+0x6c>
 8006704:	6820      	ldr	r0, [r4, #0]
 8006706:	4401      	add	r1, r0
 8006708:	1850      	adds	r0, r2, r1
 800670a:	4283      	cmp	r3, r0
 800670c:	6011      	str	r1, [r2, #0]
 800670e:	d1e0      	bne.n	80066d2 <_free_r+0x22>
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	4408      	add	r0, r1
 8006716:	6010      	str	r0, [r2, #0]
 8006718:	6053      	str	r3, [r2, #4]
 800671a:	e7da      	b.n	80066d2 <_free_r+0x22>
 800671c:	d902      	bls.n	8006724 <_free_r+0x74>
 800671e:	230c      	movs	r3, #12
 8006720:	602b      	str	r3, [r5, #0]
 8006722:	e7d6      	b.n	80066d2 <_free_r+0x22>
 8006724:	6820      	ldr	r0, [r4, #0]
 8006726:	1821      	adds	r1, r4, r0
 8006728:	428b      	cmp	r3, r1
 800672a:	bf01      	itttt	eq
 800672c:	6819      	ldreq	r1, [r3, #0]
 800672e:	685b      	ldreq	r3, [r3, #4]
 8006730:	1809      	addeq	r1, r1, r0
 8006732:	6021      	streq	r1, [r4, #0]
 8006734:	6063      	str	r3, [r4, #4]
 8006736:	6054      	str	r4, [r2, #4]
 8006738:	e7cb      	b.n	80066d2 <_free_r+0x22>
 800673a:	bd38      	pop	{r3, r4, r5, pc}
 800673c:	200004cc 	.word	0x200004cc

08006740 <malloc>:
 8006740:	4b02      	ldr	r3, [pc, #8]	@ (800674c <malloc+0xc>)
 8006742:	4601      	mov	r1, r0
 8006744:	6818      	ldr	r0, [r3, #0]
 8006746:	f000 b825 	b.w	8006794 <_malloc_r>
 800674a:	bf00      	nop
 800674c:	2000001c 	.word	0x2000001c

08006750 <sbrk_aligned>:
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	4e0f      	ldr	r6, [pc, #60]	@ (8006790 <sbrk_aligned+0x40>)
 8006754:	460c      	mov	r4, r1
 8006756:	6831      	ldr	r1, [r6, #0]
 8006758:	4605      	mov	r5, r0
 800675a:	b911      	cbnz	r1, 8006762 <sbrk_aligned+0x12>
 800675c:	f000 fe40 	bl	80073e0 <_sbrk_r>
 8006760:	6030      	str	r0, [r6, #0]
 8006762:	4621      	mov	r1, r4
 8006764:	4628      	mov	r0, r5
 8006766:	f000 fe3b 	bl	80073e0 <_sbrk_r>
 800676a:	1c43      	adds	r3, r0, #1
 800676c:	d103      	bne.n	8006776 <sbrk_aligned+0x26>
 800676e:	f04f 34ff 	mov.w	r4, #4294967295
 8006772:	4620      	mov	r0, r4
 8006774:	bd70      	pop	{r4, r5, r6, pc}
 8006776:	1cc4      	adds	r4, r0, #3
 8006778:	f024 0403 	bic.w	r4, r4, #3
 800677c:	42a0      	cmp	r0, r4
 800677e:	d0f8      	beq.n	8006772 <sbrk_aligned+0x22>
 8006780:	1a21      	subs	r1, r4, r0
 8006782:	4628      	mov	r0, r5
 8006784:	f000 fe2c 	bl	80073e0 <_sbrk_r>
 8006788:	3001      	adds	r0, #1
 800678a:	d1f2      	bne.n	8006772 <sbrk_aligned+0x22>
 800678c:	e7ef      	b.n	800676e <sbrk_aligned+0x1e>
 800678e:	bf00      	nop
 8006790:	200004c8 	.word	0x200004c8

08006794 <_malloc_r>:
 8006794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006798:	1ccd      	adds	r5, r1, #3
 800679a:	f025 0503 	bic.w	r5, r5, #3
 800679e:	3508      	adds	r5, #8
 80067a0:	2d0c      	cmp	r5, #12
 80067a2:	bf38      	it	cc
 80067a4:	250c      	movcc	r5, #12
 80067a6:	2d00      	cmp	r5, #0
 80067a8:	4606      	mov	r6, r0
 80067aa:	db01      	blt.n	80067b0 <_malloc_r+0x1c>
 80067ac:	42a9      	cmp	r1, r5
 80067ae:	d904      	bls.n	80067ba <_malloc_r+0x26>
 80067b0:	230c      	movs	r3, #12
 80067b2:	6033      	str	r3, [r6, #0]
 80067b4:	2000      	movs	r0, #0
 80067b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006890 <_malloc_r+0xfc>
 80067be:	f000 f869 	bl	8006894 <__malloc_lock>
 80067c2:	f8d8 3000 	ldr.w	r3, [r8]
 80067c6:	461c      	mov	r4, r3
 80067c8:	bb44      	cbnz	r4, 800681c <_malloc_r+0x88>
 80067ca:	4629      	mov	r1, r5
 80067cc:	4630      	mov	r0, r6
 80067ce:	f7ff ffbf 	bl	8006750 <sbrk_aligned>
 80067d2:	1c43      	adds	r3, r0, #1
 80067d4:	4604      	mov	r4, r0
 80067d6:	d158      	bne.n	800688a <_malloc_r+0xf6>
 80067d8:	f8d8 4000 	ldr.w	r4, [r8]
 80067dc:	4627      	mov	r7, r4
 80067de:	2f00      	cmp	r7, #0
 80067e0:	d143      	bne.n	800686a <_malloc_r+0xd6>
 80067e2:	2c00      	cmp	r4, #0
 80067e4:	d04b      	beq.n	800687e <_malloc_r+0xea>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	4639      	mov	r1, r7
 80067ea:	4630      	mov	r0, r6
 80067ec:	eb04 0903 	add.w	r9, r4, r3
 80067f0:	f000 fdf6 	bl	80073e0 <_sbrk_r>
 80067f4:	4581      	cmp	r9, r0
 80067f6:	d142      	bne.n	800687e <_malloc_r+0xea>
 80067f8:	6821      	ldr	r1, [r4, #0]
 80067fa:	4630      	mov	r0, r6
 80067fc:	1a6d      	subs	r5, r5, r1
 80067fe:	4629      	mov	r1, r5
 8006800:	f7ff ffa6 	bl	8006750 <sbrk_aligned>
 8006804:	3001      	adds	r0, #1
 8006806:	d03a      	beq.n	800687e <_malloc_r+0xea>
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	442b      	add	r3, r5
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	f8d8 3000 	ldr.w	r3, [r8]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	bb62      	cbnz	r2, 8006870 <_malloc_r+0xdc>
 8006816:	f8c8 7000 	str.w	r7, [r8]
 800681a:	e00f      	b.n	800683c <_malloc_r+0xa8>
 800681c:	6822      	ldr	r2, [r4, #0]
 800681e:	1b52      	subs	r2, r2, r5
 8006820:	d420      	bmi.n	8006864 <_malloc_r+0xd0>
 8006822:	2a0b      	cmp	r2, #11
 8006824:	d917      	bls.n	8006856 <_malloc_r+0xc2>
 8006826:	1961      	adds	r1, r4, r5
 8006828:	42a3      	cmp	r3, r4
 800682a:	6025      	str	r5, [r4, #0]
 800682c:	bf18      	it	ne
 800682e:	6059      	strne	r1, [r3, #4]
 8006830:	6863      	ldr	r3, [r4, #4]
 8006832:	bf08      	it	eq
 8006834:	f8c8 1000 	streq.w	r1, [r8]
 8006838:	5162      	str	r2, [r4, r5]
 800683a:	604b      	str	r3, [r1, #4]
 800683c:	4630      	mov	r0, r6
 800683e:	f000 f82f 	bl	80068a0 <__malloc_unlock>
 8006842:	f104 000b 	add.w	r0, r4, #11
 8006846:	1d23      	adds	r3, r4, #4
 8006848:	f020 0007 	bic.w	r0, r0, #7
 800684c:	1ac2      	subs	r2, r0, r3
 800684e:	bf1c      	itt	ne
 8006850:	1a1b      	subne	r3, r3, r0
 8006852:	50a3      	strne	r3, [r4, r2]
 8006854:	e7af      	b.n	80067b6 <_malloc_r+0x22>
 8006856:	6862      	ldr	r2, [r4, #4]
 8006858:	42a3      	cmp	r3, r4
 800685a:	bf0c      	ite	eq
 800685c:	f8c8 2000 	streq.w	r2, [r8]
 8006860:	605a      	strne	r2, [r3, #4]
 8006862:	e7eb      	b.n	800683c <_malloc_r+0xa8>
 8006864:	4623      	mov	r3, r4
 8006866:	6864      	ldr	r4, [r4, #4]
 8006868:	e7ae      	b.n	80067c8 <_malloc_r+0x34>
 800686a:	463c      	mov	r4, r7
 800686c:	687f      	ldr	r7, [r7, #4]
 800686e:	e7b6      	b.n	80067de <_malloc_r+0x4a>
 8006870:	461a      	mov	r2, r3
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	42a3      	cmp	r3, r4
 8006876:	d1fb      	bne.n	8006870 <_malloc_r+0xdc>
 8006878:	2300      	movs	r3, #0
 800687a:	6053      	str	r3, [r2, #4]
 800687c:	e7de      	b.n	800683c <_malloc_r+0xa8>
 800687e:	230c      	movs	r3, #12
 8006880:	4630      	mov	r0, r6
 8006882:	6033      	str	r3, [r6, #0]
 8006884:	f000 f80c 	bl	80068a0 <__malloc_unlock>
 8006888:	e794      	b.n	80067b4 <_malloc_r+0x20>
 800688a:	6005      	str	r5, [r0, #0]
 800688c:	e7d6      	b.n	800683c <_malloc_r+0xa8>
 800688e:	bf00      	nop
 8006890:	200004cc 	.word	0x200004cc

08006894 <__malloc_lock>:
 8006894:	4801      	ldr	r0, [pc, #4]	@ (800689c <__malloc_lock+0x8>)
 8006896:	f7ff b8a8 	b.w	80059ea <__retarget_lock_acquire_recursive>
 800689a:	bf00      	nop
 800689c:	200004c4 	.word	0x200004c4

080068a0 <__malloc_unlock>:
 80068a0:	4801      	ldr	r0, [pc, #4]	@ (80068a8 <__malloc_unlock+0x8>)
 80068a2:	f7ff b8a3 	b.w	80059ec <__retarget_lock_release_recursive>
 80068a6:	bf00      	nop
 80068a8:	200004c4 	.word	0x200004c4

080068ac <_Balloc>:
 80068ac:	b570      	push	{r4, r5, r6, lr}
 80068ae:	69c6      	ldr	r6, [r0, #28]
 80068b0:	4604      	mov	r4, r0
 80068b2:	460d      	mov	r5, r1
 80068b4:	b976      	cbnz	r6, 80068d4 <_Balloc+0x28>
 80068b6:	2010      	movs	r0, #16
 80068b8:	f7ff ff42 	bl	8006740 <malloc>
 80068bc:	4602      	mov	r2, r0
 80068be:	61e0      	str	r0, [r4, #28]
 80068c0:	b920      	cbnz	r0, 80068cc <_Balloc+0x20>
 80068c2:	216b      	movs	r1, #107	@ 0x6b
 80068c4:	4b17      	ldr	r3, [pc, #92]	@ (8006924 <_Balloc+0x78>)
 80068c6:	4818      	ldr	r0, [pc, #96]	@ (8006928 <_Balloc+0x7c>)
 80068c8:	f000 fda8 	bl	800741c <__assert_func>
 80068cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068d0:	6006      	str	r6, [r0, #0]
 80068d2:	60c6      	str	r6, [r0, #12]
 80068d4:	69e6      	ldr	r6, [r4, #28]
 80068d6:	68f3      	ldr	r3, [r6, #12]
 80068d8:	b183      	cbz	r3, 80068fc <_Balloc+0x50>
 80068da:	69e3      	ldr	r3, [r4, #28]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068e2:	b9b8      	cbnz	r0, 8006914 <_Balloc+0x68>
 80068e4:	2101      	movs	r1, #1
 80068e6:	fa01 f605 	lsl.w	r6, r1, r5
 80068ea:	1d72      	adds	r2, r6, #5
 80068ec:	4620      	mov	r0, r4
 80068ee:	0092      	lsls	r2, r2, #2
 80068f0:	f000 fdb2 	bl	8007458 <_calloc_r>
 80068f4:	b160      	cbz	r0, 8006910 <_Balloc+0x64>
 80068f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068fa:	e00e      	b.n	800691a <_Balloc+0x6e>
 80068fc:	2221      	movs	r2, #33	@ 0x21
 80068fe:	2104      	movs	r1, #4
 8006900:	4620      	mov	r0, r4
 8006902:	f000 fda9 	bl	8007458 <_calloc_r>
 8006906:	69e3      	ldr	r3, [r4, #28]
 8006908:	60f0      	str	r0, [r6, #12]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e4      	bne.n	80068da <_Balloc+0x2e>
 8006910:	2000      	movs	r0, #0
 8006912:	bd70      	pop	{r4, r5, r6, pc}
 8006914:	6802      	ldr	r2, [r0, #0]
 8006916:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800691a:	2300      	movs	r3, #0
 800691c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006920:	e7f7      	b.n	8006912 <_Balloc+0x66>
 8006922:	bf00      	nop
 8006924:	08008cd7 	.word	0x08008cd7
 8006928:	08008d57 	.word	0x08008d57

0800692c <_Bfree>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	69c6      	ldr	r6, [r0, #28]
 8006930:	4605      	mov	r5, r0
 8006932:	460c      	mov	r4, r1
 8006934:	b976      	cbnz	r6, 8006954 <_Bfree+0x28>
 8006936:	2010      	movs	r0, #16
 8006938:	f7ff ff02 	bl	8006740 <malloc>
 800693c:	4602      	mov	r2, r0
 800693e:	61e8      	str	r0, [r5, #28]
 8006940:	b920      	cbnz	r0, 800694c <_Bfree+0x20>
 8006942:	218f      	movs	r1, #143	@ 0x8f
 8006944:	4b08      	ldr	r3, [pc, #32]	@ (8006968 <_Bfree+0x3c>)
 8006946:	4809      	ldr	r0, [pc, #36]	@ (800696c <_Bfree+0x40>)
 8006948:	f000 fd68 	bl	800741c <__assert_func>
 800694c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006950:	6006      	str	r6, [r0, #0]
 8006952:	60c6      	str	r6, [r0, #12]
 8006954:	b13c      	cbz	r4, 8006966 <_Bfree+0x3a>
 8006956:	69eb      	ldr	r3, [r5, #28]
 8006958:	6862      	ldr	r2, [r4, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006960:	6021      	str	r1, [r4, #0]
 8006962:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006966:	bd70      	pop	{r4, r5, r6, pc}
 8006968:	08008cd7 	.word	0x08008cd7
 800696c:	08008d57 	.word	0x08008d57

08006970 <__multadd>:
 8006970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006974:	4607      	mov	r7, r0
 8006976:	460c      	mov	r4, r1
 8006978:	461e      	mov	r6, r3
 800697a:	2000      	movs	r0, #0
 800697c:	690d      	ldr	r5, [r1, #16]
 800697e:	f101 0c14 	add.w	ip, r1, #20
 8006982:	f8dc 3000 	ldr.w	r3, [ip]
 8006986:	3001      	adds	r0, #1
 8006988:	b299      	uxth	r1, r3
 800698a:	fb02 6101 	mla	r1, r2, r1, r6
 800698e:	0c1e      	lsrs	r6, r3, #16
 8006990:	0c0b      	lsrs	r3, r1, #16
 8006992:	fb02 3306 	mla	r3, r2, r6, r3
 8006996:	b289      	uxth	r1, r1
 8006998:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800699c:	4285      	cmp	r5, r0
 800699e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80069a2:	f84c 1b04 	str.w	r1, [ip], #4
 80069a6:	dcec      	bgt.n	8006982 <__multadd+0x12>
 80069a8:	b30e      	cbz	r6, 80069ee <__multadd+0x7e>
 80069aa:	68a3      	ldr	r3, [r4, #8]
 80069ac:	42ab      	cmp	r3, r5
 80069ae:	dc19      	bgt.n	80069e4 <__multadd+0x74>
 80069b0:	6861      	ldr	r1, [r4, #4]
 80069b2:	4638      	mov	r0, r7
 80069b4:	3101      	adds	r1, #1
 80069b6:	f7ff ff79 	bl	80068ac <_Balloc>
 80069ba:	4680      	mov	r8, r0
 80069bc:	b928      	cbnz	r0, 80069ca <__multadd+0x5a>
 80069be:	4602      	mov	r2, r0
 80069c0:	21ba      	movs	r1, #186	@ 0xba
 80069c2:	4b0c      	ldr	r3, [pc, #48]	@ (80069f4 <__multadd+0x84>)
 80069c4:	480c      	ldr	r0, [pc, #48]	@ (80069f8 <__multadd+0x88>)
 80069c6:	f000 fd29 	bl	800741c <__assert_func>
 80069ca:	6922      	ldr	r2, [r4, #16]
 80069cc:	f104 010c 	add.w	r1, r4, #12
 80069d0:	3202      	adds	r2, #2
 80069d2:	0092      	lsls	r2, r2, #2
 80069d4:	300c      	adds	r0, #12
 80069d6:	f000 fd13 	bl	8007400 <memcpy>
 80069da:	4621      	mov	r1, r4
 80069dc:	4638      	mov	r0, r7
 80069de:	f7ff ffa5 	bl	800692c <_Bfree>
 80069e2:	4644      	mov	r4, r8
 80069e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80069e8:	3501      	adds	r5, #1
 80069ea:	615e      	str	r6, [r3, #20]
 80069ec:	6125      	str	r5, [r4, #16]
 80069ee:	4620      	mov	r0, r4
 80069f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f4:	08008d46 	.word	0x08008d46
 80069f8:	08008d57 	.word	0x08008d57

080069fc <__hi0bits>:
 80069fc:	4603      	mov	r3, r0
 80069fe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006a02:	bf3a      	itte	cc
 8006a04:	0403      	lslcc	r3, r0, #16
 8006a06:	2010      	movcc	r0, #16
 8006a08:	2000      	movcs	r0, #0
 8006a0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a0e:	bf3c      	itt	cc
 8006a10:	021b      	lslcc	r3, r3, #8
 8006a12:	3008      	addcc	r0, #8
 8006a14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a18:	bf3c      	itt	cc
 8006a1a:	011b      	lslcc	r3, r3, #4
 8006a1c:	3004      	addcc	r0, #4
 8006a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a22:	bf3c      	itt	cc
 8006a24:	009b      	lslcc	r3, r3, #2
 8006a26:	3002      	addcc	r0, #2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	db05      	blt.n	8006a38 <__hi0bits+0x3c>
 8006a2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006a30:	f100 0001 	add.w	r0, r0, #1
 8006a34:	bf08      	it	eq
 8006a36:	2020      	moveq	r0, #32
 8006a38:	4770      	bx	lr

08006a3a <__lo0bits>:
 8006a3a:	6803      	ldr	r3, [r0, #0]
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	f013 0007 	ands.w	r0, r3, #7
 8006a42:	d00b      	beq.n	8006a5c <__lo0bits+0x22>
 8006a44:	07d9      	lsls	r1, r3, #31
 8006a46:	d421      	bmi.n	8006a8c <__lo0bits+0x52>
 8006a48:	0798      	lsls	r0, r3, #30
 8006a4a:	bf49      	itett	mi
 8006a4c:	085b      	lsrmi	r3, r3, #1
 8006a4e:	089b      	lsrpl	r3, r3, #2
 8006a50:	2001      	movmi	r0, #1
 8006a52:	6013      	strmi	r3, [r2, #0]
 8006a54:	bf5c      	itt	pl
 8006a56:	2002      	movpl	r0, #2
 8006a58:	6013      	strpl	r3, [r2, #0]
 8006a5a:	4770      	bx	lr
 8006a5c:	b299      	uxth	r1, r3
 8006a5e:	b909      	cbnz	r1, 8006a64 <__lo0bits+0x2a>
 8006a60:	2010      	movs	r0, #16
 8006a62:	0c1b      	lsrs	r3, r3, #16
 8006a64:	b2d9      	uxtb	r1, r3
 8006a66:	b909      	cbnz	r1, 8006a6c <__lo0bits+0x32>
 8006a68:	3008      	adds	r0, #8
 8006a6a:	0a1b      	lsrs	r3, r3, #8
 8006a6c:	0719      	lsls	r1, r3, #28
 8006a6e:	bf04      	itt	eq
 8006a70:	091b      	lsreq	r3, r3, #4
 8006a72:	3004      	addeq	r0, #4
 8006a74:	0799      	lsls	r1, r3, #30
 8006a76:	bf04      	itt	eq
 8006a78:	089b      	lsreq	r3, r3, #2
 8006a7a:	3002      	addeq	r0, #2
 8006a7c:	07d9      	lsls	r1, r3, #31
 8006a7e:	d403      	bmi.n	8006a88 <__lo0bits+0x4e>
 8006a80:	085b      	lsrs	r3, r3, #1
 8006a82:	f100 0001 	add.w	r0, r0, #1
 8006a86:	d003      	beq.n	8006a90 <__lo0bits+0x56>
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	4770      	bx	lr
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	4770      	bx	lr
 8006a90:	2020      	movs	r0, #32
 8006a92:	4770      	bx	lr

08006a94 <__i2b>:
 8006a94:	b510      	push	{r4, lr}
 8006a96:	460c      	mov	r4, r1
 8006a98:	2101      	movs	r1, #1
 8006a9a:	f7ff ff07 	bl	80068ac <_Balloc>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	b928      	cbnz	r0, 8006aae <__i2b+0x1a>
 8006aa2:	f240 1145 	movw	r1, #325	@ 0x145
 8006aa6:	4b04      	ldr	r3, [pc, #16]	@ (8006ab8 <__i2b+0x24>)
 8006aa8:	4804      	ldr	r0, [pc, #16]	@ (8006abc <__i2b+0x28>)
 8006aaa:	f000 fcb7 	bl	800741c <__assert_func>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	6144      	str	r4, [r0, #20]
 8006ab2:	6103      	str	r3, [r0, #16]
 8006ab4:	bd10      	pop	{r4, pc}
 8006ab6:	bf00      	nop
 8006ab8:	08008d46 	.word	0x08008d46
 8006abc:	08008d57 	.word	0x08008d57

08006ac0 <__multiply>:
 8006ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	690a      	ldr	r2, [r1, #16]
 8006ac8:	6923      	ldr	r3, [r4, #16]
 8006aca:	460f      	mov	r7, r1
 8006acc:	429a      	cmp	r2, r3
 8006ace:	bfa2      	ittt	ge
 8006ad0:	4623      	movge	r3, r4
 8006ad2:	460c      	movge	r4, r1
 8006ad4:	461f      	movge	r7, r3
 8006ad6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006ada:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006ade:	68a3      	ldr	r3, [r4, #8]
 8006ae0:	6861      	ldr	r1, [r4, #4]
 8006ae2:	eb0a 0609 	add.w	r6, sl, r9
 8006ae6:	42b3      	cmp	r3, r6
 8006ae8:	b085      	sub	sp, #20
 8006aea:	bfb8      	it	lt
 8006aec:	3101      	addlt	r1, #1
 8006aee:	f7ff fedd 	bl	80068ac <_Balloc>
 8006af2:	b930      	cbnz	r0, 8006b02 <__multiply+0x42>
 8006af4:	4602      	mov	r2, r0
 8006af6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006afa:	4b43      	ldr	r3, [pc, #268]	@ (8006c08 <__multiply+0x148>)
 8006afc:	4843      	ldr	r0, [pc, #268]	@ (8006c0c <__multiply+0x14c>)
 8006afe:	f000 fc8d 	bl	800741c <__assert_func>
 8006b02:	f100 0514 	add.w	r5, r0, #20
 8006b06:	462b      	mov	r3, r5
 8006b08:	2200      	movs	r2, #0
 8006b0a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b0e:	4543      	cmp	r3, r8
 8006b10:	d321      	bcc.n	8006b56 <__multiply+0x96>
 8006b12:	f107 0114 	add.w	r1, r7, #20
 8006b16:	f104 0214 	add.w	r2, r4, #20
 8006b1a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006b1e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006b22:	9302      	str	r3, [sp, #8]
 8006b24:	1b13      	subs	r3, r2, r4
 8006b26:	3b15      	subs	r3, #21
 8006b28:	f023 0303 	bic.w	r3, r3, #3
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	f104 0715 	add.w	r7, r4, #21
 8006b32:	42ba      	cmp	r2, r7
 8006b34:	bf38      	it	cc
 8006b36:	2304      	movcc	r3, #4
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	9b02      	ldr	r3, [sp, #8]
 8006b3c:	9103      	str	r1, [sp, #12]
 8006b3e:	428b      	cmp	r3, r1
 8006b40:	d80c      	bhi.n	8006b5c <__multiply+0x9c>
 8006b42:	2e00      	cmp	r6, #0
 8006b44:	dd03      	ble.n	8006b4e <__multiply+0x8e>
 8006b46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d05a      	beq.n	8006c04 <__multiply+0x144>
 8006b4e:	6106      	str	r6, [r0, #16]
 8006b50:	b005      	add	sp, #20
 8006b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b56:	f843 2b04 	str.w	r2, [r3], #4
 8006b5a:	e7d8      	b.n	8006b0e <__multiply+0x4e>
 8006b5c:	f8b1 a000 	ldrh.w	sl, [r1]
 8006b60:	f1ba 0f00 	cmp.w	sl, #0
 8006b64:	d023      	beq.n	8006bae <__multiply+0xee>
 8006b66:	46a9      	mov	r9, r5
 8006b68:	f04f 0c00 	mov.w	ip, #0
 8006b6c:	f104 0e14 	add.w	lr, r4, #20
 8006b70:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b74:	f8d9 3000 	ldr.w	r3, [r9]
 8006b78:	fa1f fb87 	uxth.w	fp, r7
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006b82:	4463      	add	r3, ip
 8006b84:	f8d9 c000 	ldr.w	ip, [r9]
 8006b88:	0c3f      	lsrs	r7, r7, #16
 8006b8a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006b8e:	fb0a c707 	mla	r7, sl, r7, ip
 8006b92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b9c:	4572      	cmp	r2, lr
 8006b9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006ba2:	f849 3b04 	str.w	r3, [r9], #4
 8006ba6:	d8e3      	bhi.n	8006b70 <__multiply+0xb0>
 8006ba8:	9b01      	ldr	r3, [sp, #4]
 8006baa:	f845 c003 	str.w	ip, [r5, r3]
 8006bae:	9b03      	ldr	r3, [sp, #12]
 8006bb0:	3104      	adds	r1, #4
 8006bb2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006bb6:	f1b9 0f00 	cmp.w	r9, #0
 8006bba:	d021      	beq.n	8006c00 <__multiply+0x140>
 8006bbc:	46ae      	mov	lr, r5
 8006bbe:	f04f 0a00 	mov.w	sl, #0
 8006bc2:	682b      	ldr	r3, [r5, #0]
 8006bc4:	f104 0c14 	add.w	ip, r4, #20
 8006bc8:	f8bc b000 	ldrh.w	fp, [ip]
 8006bcc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	fb09 770b 	mla	r7, r9, fp, r7
 8006bd6:	4457      	add	r7, sl
 8006bd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006bdc:	f84e 3b04 	str.w	r3, [lr], #4
 8006be0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006be4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006be8:	f8be 3000 	ldrh.w	r3, [lr]
 8006bec:	4562      	cmp	r2, ip
 8006bee:	fb09 330a 	mla	r3, r9, sl, r3
 8006bf2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006bf6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bfa:	d8e5      	bhi.n	8006bc8 <__multiply+0x108>
 8006bfc:	9f01      	ldr	r7, [sp, #4]
 8006bfe:	51eb      	str	r3, [r5, r7]
 8006c00:	3504      	adds	r5, #4
 8006c02:	e79a      	b.n	8006b3a <__multiply+0x7a>
 8006c04:	3e01      	subs	r6, #1
 8006c06:	e79c      	b.n	8006b42 <__multiply+0x82>
 8006c08:	08008d46 	.word	0x08008d46
 8006c0c:	08008d57 	.word	0x08008d57

08006c10 <__pow5mult>:
 8006c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c14:	4615      	mov	r5, r2
 8006c16:	f012 0203 	ands.w	r2, r2, #3
 8006c1a:	4607      	mov	r7, r0
 8006c1c:	460e      	mov	r6, r1
 8006c1e:	d007      	beq.n	8006c30 <__pow5mult+0x20>
 8006c20:	4c25      	ldr	r4, [pc, #148]	@ (8006cb8 <__pow5mult+0xa8>)
 8006c22:	3a01      	subs	r2, #1
 8006c24:	2300      	movs	r3, #0
 8006c26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c2a:	f7ff fea1 	bl	8006970 <__multadd>
 8006c2e:	4606      	mov	r6, r0
 8006c30:	10ad      	asrs	r5, r5, #2
 8006c32:	d03d      	beq.n	8006cb0 <__pow5mult+0xa0>
 8006c34:	69fc      	ldr	r4, [r7, #28]
 8006c36:	b97c      	cbnz	r4, 8006c58 <__pow5mult+0x48>
 8006c38:	2010      	movs	r0, #16
 8006c3a:	f7ff fd81 	bl	8006740 <malloc>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	61f8      	str	r0, [r7, #28]
 8006c42:	b928      	cbnz	r0, 8006c50 <__pow5mult+0x40>
 8006c44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006c48:	4b1c      	ldr	r3, [pc, #112]	@ (8006cbc <__pow5mult+0xac>)
 8006c4a:	481d      	ldr	r0, [pc, #116]	@ (8006cc0 <__pow5mult+0xb0>)
 8006c4c:	f000 fbe6 	bl	800741c <__assert_func>
 8006c50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c54:	6004      	str	r4, [r0, #0]
 8006c56:	60c4      	str	r4, [r0, #12]
 8006c58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006c5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c60:	b94c      	cbnz	r4, 8006c76 <__pow5mult+0x66>
 8006c62:	f240 2171 	movw	r1, #625	@ 0x271
 8006c66:	4638      	mov	r0, r7
 8006c68:	f7ff ff14 	bl	8006a94 <__i2b>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	4604      	mov	r4, r0
 8006c70:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c74:	6003      	str	r3, [r0, #0]
 8006c76:	f04f 0900 	mov.w	r9, #0
 8006c7a:	07eb      	lsls	r3, r5, #31
 8006c7c:	d50a      	bpl.n	8006c94 <__pow5mult+0x84>
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4622      	mov	r2, r4
 8006c82:	4638      	mov	r0, r7
 8006c84:	f7ff ff1c 	bl	8006ac0 <__multiply>
 8006c88:	4680      	mov	r8, r0
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	4638      	mov	r0, r7
 8006c8e:	f7ff fe4d 	bl	800692c <_Bfree>
 8006c92:	4646      	mov	r6, r8
 8006c94:	106d      	asrs	r5, r5, #1
 8006c96:	d00b      	beq.n	8006cb0 <__pow5mult+0xa0>
 8006c98:	6820      	ldr	r0, [r4, #0]
 8006c9a:	b938      	cbnz	r0, 8006cac <__pow5mult+0x9c>
 8006c9c:	4622      	mov	r2, r4
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	f7ff ff0d 	bl	8006ac0 <__multiply>
 8006ca6:	6020      	str	r0, [r4, #0]
 8006ca8:	f8c0 9000 	str.w	r9, [r0]
 8006cac:	4604      	mov	r4, r0
 8006cae:	e7e4      	b.n	8006c7a <__pow5mult+0x6a>
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cb6:	bf00      	nop
 8006cb8:	08008db0 	.word	0x08008db0
 8006cbc:	08008cd7 	.word	0x08008cd7
 8006cc0:	08008d57 	.word	0x08008d57

08006cc4 <__lshift>:
 8006cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc8:	460c      	mov	r4, r1
 8006cca:	4607      	mov	r7, r0
 8006ccc:	4691      	mov	r9, r2
 8006cce:	6923      	ldr	r3, [r4, #16]
 8006cd0:	6849      	ldr	r1, [r1, #4]
 8006cd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006cd6:	68a3      	ldr	r3, [r4, #8]
 8006cd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cdc:	f108 0601 	add.w	r6, r8, #1
 8006ce0:	42b3      	cmp	r3, r6
 8006ce2:	db0b      	blt.n	8006cfc <__lshift+0x38>
 8006ce4:	4638      	mov	r0, r7
 8006ce6:	f7ff fde1 	bl	80068ac <_Balloc>
 8006cea:	4605      	mov	r5, r0
 8006cec:	b948      	cbnz	r0, 8006d02 <__lshift+0x3e>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006cf4:	4b27      	ldr	r3, [pc, #156]	@ (8006d94 <__lshift+0xd0>)
 8006cf6:	4828      	ldr	r0, [pc, #160]	@ (8006d98 <__lshift+0xd4>)
 8006cf8:	f000 fb90 	bl	800741c <__assert_func>
 8006cfc:	3101      	adds	r1, #1
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	e7ee      	b.n	8006ce0 <__lshift+0x1c>
 8006d02:	2300      	movs	r3, #0
 8006d04:	f100 0114 	add.w	r1, r0, #20
 8006d08:	f100 0210 	add.w	r2, r0, #16
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	4553      	cmp	r3, sl
 8006d10:	db33      	blt.n	8006d7a <__lshift+0xb6>
 8006d12:	6920      	ldr	r0, [r4, #16]
 8006d14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d18:	f104 0314 	add.w	r3, r4, #20
 8006d1c:	f019 091f 	ands.w	r9, r9, #31
 8006d20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d28:	d02b      	beq.n	8006d82 <__lshift+0xbe>
 8006d2a:	468a      	mov	sl, r1
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f1c9 0e20 	rsb	lr, r9, #32
 8006d32:	6818      	ldr	r0, [r3, #0]
 8006d34:	fa00 f009 	lsl.w	r0, r0, r9
 8006d38:	4310      	orrs	r0, r2
 8006d3a:	f84a 0b04 	str.w	r0, [sl], #4
 8006d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d42:	459c      	cmp	ip, r3
 8006d44:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d48:	d8f3      	bhi.n	8006d32 <__lshift+0x6e>
 8006d4a:	ebac 0304 	sub.w	r3, ip, r4
 8006d4e:	3b15      	subs	r3, #21
 8006d50:	f023 0303 	bic.w	r3, r3, #3
 8006d54:	3304      	adds	r3, #4
 8006d56:	f104 0015 	add.w	r0, r4, #21
 8006d5a:	4584      	cmp	ip, r0
 8006d5c:	bf38      	it	cc
 8006d5e:	2304      	movcc	r3, #4
 8006d60:	50ca      	str	r2, [r1, r3]
 8006d62:	b10a      	cbz	r2, 8006d68 <__lshift+0xa4>
 8006d64:	f108 0602 	add.w	r6, r8, #2
 8006d68:	3e01      	subs	r6, #1
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	4621      	mov	r1, r4
 8006d6e:	612e      	str	r6, [r5, #16]
 8006d70:	f7ff fddc 	bl	800692c <_Bfree>
 8006d74:	4628      	mov	r0, r5
 8006d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d7e:	3301      	adds	r3, #1
 8006d80:	e7c5      	b.n	8006d0e <__lshift+0x4a>
 8006d82:	3904      	subs	r1, #4
 8006d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d88:	459c      	cmp	ip, r3
 8006d8a:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d8e:	d8f9      	bhi.n	8006d84 <__lshift+0xc0>
 8006d90:	e7ea      	b.n	8006d68 <__lshift+0xa4>
 8006d92:	bf00      	nop
 8006d94:	08008d46 	.word	0x08008d46
 8006d98:	08008d57 	.word	0x08008d57

08006d9c <__mcmp>:
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	690a      	ldr	r2, [r1, #16]
 8006da0:	6900      	ldr	r0, [r0, #16]
 8006da2:	b530      	push	{r4, r5, lr}
 8006da4:	1a80      	subs	r0, r0, r2
 8006da6:	d10e      	bne.n	8006dc6 <__mcmp+0x2a>
 8006da8:	3314      	adds	r3, #20
 8006daa:	3114      	adds	r1, #20
 8006dac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006db0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006db4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006db8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006dbc:	4295      	cmp	r5, r2
 8006dbe:	d003      	beq.n	8006dc8 <__mcmp+0x2c>
 8006dc0:	d205      	bcs.n	8006dce <__mcmp+0x32>
 8006dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc6:	bd30      	pop	{r4, r5, pc}
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	d3f3      	bcc.n	8006db4 <__mcmp+0x18>
 8006dcc:	e7fb      	b.n	8006dc6 <__mcmp+0x2a>
 8006dce:	2001      	movs	r0, #1
 8006dd0:	e7f9      	b.n	8006dc6 <__mcmp+0x2a>
	...

08006dd4 <__mdiff>:
 8006dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd8:	4689      	mov	r9, r1
 8006dda:	4606      	mov	r6, r0
 8006ddc:	4611      	mov	r1, r2
 8006dde:	4648      	mov	r0, r9
 8006de0:	4614      	mov	r4, r2
 8006de2:	f7ff ffdb 	bl	8006d9c <__mcmp>
 8006de6:	1e05      	subs	r5, r0, #0
 8006de8:	d112      	bne.n	8006e10 <__mdiff+0x3c>
 8006dea:	4629      	mov	r1, r5
 8006dec:	4630      	mov	r0, r6
 8006dee:	f7ff fd5d 	bl	80068ac <_Balloc>
 8006df2:	4602      	mov	r2, r0
 8006df4:	b928      	cbnz	r0, 8006e02 <__mdiff+0x2e>
 8006df6:	f240 2137 	movw	r1, #567	@ 0x237
 8006dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8006ef4 <__mdiff+0x120>)
 8006dfc:	483e      	ldr	r0, [pc, #248]	@ (8006ef8 <__mdiff+0x124>)
 8006dfe:	f000 fb0d 	bl	800741c <__assert_func>
 8006e02:	2301      	movs	r3, #1
 8006e04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e08:	4610      	mov	r0, r2
 8006e0a:	b003      	add	sp, #12
 8006e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e10:	bfbc      	itt	lt
 8006e12:	464b      	movlt	r3, r9
 8006e14:	46a1      	movlt	r9, r4
 8006e16:	4630      	mov	r0, r6
 8006e18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006e1c:	bfba      	itte	lt
 8006e1e:	461c      	movlt	r4, r3
 8006e20:	2501      	movlt	r5, #1
 8006e22:	2500      	movge	r5, #0
 8006e24:	f7ff fd42 	bl	80068ac <_Balloc>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	b918      	cbnz	r0, 8006e34 <__mdiff+0x60>
 8006e2c:	f240 2145 	movw	r1, #581	@ 0x245
 8006e30:	4b30      	ldr	r3, [pc, #192]	@ (8006ef4 <__mdiff+0x120>)
 8006e32:	e7e3      	b.n	8006dfc <__mdiff+0x28>
 8006e34:	f100 0b14 	add.w	fp, r0, #20
 8006e38:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006e3c:	f109 0310 	add.w	r3, r9, #16
 8006e40:	60c5      	str	r5, [r0, #12]
 8006e42:	f04f 0c00 	mov.w	ip, #0
 8006e46:	f109 0514 	add.w	r5, r9, #20
 8006e4a:	46d9      	mov	r9, fp
 8006e4c:	6926      	ldr	r6, [r4, #16]
 8006e4e:	f104 0e14 	add.w	lr, r4, #20
 8006e52:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006e56:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	9b01      	ldr	r3, [sp, #4]
 8006e5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006e62:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006e66:	b281      	uxth	r1, r0
 8006e68:	9301      	str	r3, [sp, #4]
 8006e6a:	fa1f f38a 	uxth.w	r3, sl
 8006e6e:	1a5b      	subs	r3, r3, r1
 8006e70:	0c00      	lsrs	r0, r0, #16
 8006e72:	4463      	add	r3, ip
 8006e74:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006e78:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006e82:	4576      	cmp	r6, lr
 8006e84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e88:	f849 3b04 	str.w	r3, [r9], #4
 8006e8c:	d8e6      	bhi.n	8006e5c <__mdiff+0x88>
 8006e8e:	1b33      	subs	r3, r6, r4
 8006e90:	3b15      	subs	r3, #21
 8006e92:	f023 0303 	bic.w	r3, r3, #3
 8006e96:	3415      	adds	r4, #21
 8006e98:	3304      	adds	r3, #4
 8006e9a:	42a6      	cmp	r6, r4
 8006e9c:	bf38      	it	cc
 8006e9e:	2304      	movcc	r3, #4
 8006ea0:	441d      	add	r5, r3
 8006ea2:	445b      	add	r3, fp
 8006ea4:	461e      	mov	r6, r3
 8006ea6:	462c      	mov	r4, r5
 8006ea8:	4544      	cmp	r4, r8
 8006eaa:	d30e      	bcc.n	8006eca <__mdiff+0xf6>
 8006eac:	f108 0103 	add.w	r1, r8, #3
 8006eb0:	1b49      	subs	r1, r1, r5
 8006eb2:	f021 0103 	bic.w	r1, r1, #3
 8006eb6:	3d03      	subs	r5, #3
 8006eb8:	45a8      	cmp	r8, r5
 8006eba:	bf38      	it	cc
 8006ebc:	2100      	movcc	r1, #0
 8006ebe:	440b      	add	r3, r1
 8006ec0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ec4:	b199      	cbz	r1, 8006eee <__mdiff+0x11a>
 8006ec6:	6117      	str	r7, [r2, #16]
 8006ec8:	e79e      	b.n	8006e08 <__mdiff+0x34>
 8006eca:	46e6      	mov	lr, ip
 8006ecc:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ed0:	fa1f fc81 	uxth.w	ip, r1
 8006ed4:	44f4      	add	ip, lr
 8006ed6:	0c08      	lsrs	r0, r1, #16
 8006ed8:	4471      	add	r1, lr
 8006eda:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006ede:	b289      	uxth	r1, r1
 8006ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ee4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ee8:	f846 1b04 	str.w	r1, [r6], #4
 8006eec:	e7dc      	b.n	8006ea8 <__mdiff+0xd4>
 8006eee:	3f01      	subs	r7, #1
 8006ef0:	e7e6      	b.n	8006ec0 <__mdiff+0xec>
 8006ef2:	bf00      	nop
 8006ef4:	08008d46 	.word	0x08008d46
 8006ef8:	08008d57 	.word	0x08008d57

08006efc <__d2b>:
 8006efc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006f00:	2101      	movs	r1, #1
 8006f02:	4690      	mov	r8, r2
 8006f04:	4699      	mov	r9, r3
 8006f06:	9e08      	ldr	r6, [sp, #32]
 8006f08:	f7ff fcd0 	bl	80068ac <_Balloc>
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	b930      	cbnz	r0, 8006f1e <__d2b+0x22>
 8006f10:	4602      	mov	r2, r0
 8006f12:	f240 310f 	movw	r1, #783	@ 0x30f
 8006f16:	4b23      	ldr	r3, [pc, #140]	@ (8006fa4 <__d2b+0xa8>)
 8006f18:	4823      	ldr	r0, [pc, #140]	@ (8006fa8 <__d2b+0xac>)
 8006f1a:	f000 fa7f 	bl	800741c <__assert_func>
 8006f1e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f26:	b10d      	cbz	r5, 8006f2c <__d2b+0x30>
 8006f28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f2c:	9301      	str	r3, [sp, #4]
 8006f2e:	f1b8 0300 	subs.w	r3, r8, #0
 8006f32:	d024      	beq.n	8006f7e <__d2b+0x82>
 8006f34:	4668      	mov	r0, sp
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	f7ff fd7f 	bl	8006a3a <__lo0bits>
 8006f3c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f40:	b1d8      	cbz	r0, 8006f7a <__d2b+0x7e>
 8006f42:	f1c0 0320 	rsb	r3, r0, #32
 8006f46:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4a:	430b      	orrs	r3, r1
 8006f4c:	40c2      	lsrs	r2, r0
 8006f4e:	6163      	str	r3, [r4, #20]
 8006f50:	9201      	str	r2, [sp, #4]
 8006f52:	9b01      	ldr	r3, [sp, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	bf0c      	ite	eq
 8006f58:	2201      	moveq	r2, #1
 8006f5a:	2202      	movne	r2, #2
 8006f5c:	61a3      	str	r3, [r4, #24]
 8006f5e:	6122      	str	r2, [r4, #16]
 8006f60:	b1ad      	cbz	r5, 8006f8e <__d2b+0x92>
 8006f62:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006f66:	4405      	add	r5, r0
 8006f68:	6035      	str	r5, [r6, #0]
 8006f6a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f70:	6018      	str	r0, [r3, #0]
 8006f72:	4620      	mov	r0, r4
 8006f74:	b002      	add	sp, #8
 8006f76:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006f7a:	6161      	str	r1, [r4, #20]
 8006f7c:	e7e9      	b.n	8006f52 <__d2b+0x56>
 8006f7e:	a801      	add	r0, sp, #4
 8006f80:	f7ff fd5b 	bl	8006a3a <__lo0bits>
 8006f84:	9b01      	ldr	r3, [sp, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	6163      	str	r3, [r4, #20]
 8006f8a:	3020      	adds	r0, #32
 8006f8c:	e7e7      	b.n	8006f5e <__d2b+0x62>
 8006f8e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006f92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f96:	6030      	str	r0, [r6, #0]
 8006f98:	6918      	ldr	r0, [r3, #16]
 8006f9a:	f7ff fd2f 	bl	80069fc <__hi0bits>
 8006f9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006fa2:	e7e4      	b.n	8006f6e <__d2b+0x72>
 8006fa4:	08008d46 	.word	0x08008d46
 8006fa8:	08008d57 	.word	0x08008d57

08006fac <__ssputs_r>:
 8006fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb0:	461f      	mov	r7, r3
 8006fb2:	688e      	ldr	r6, [r1, #8]
 8006fb4:	4682      	mov	sl, r0
 8006fb6:	42be      	cmp	r6, r7
 8006fb8:	460c      	mov	r4, r1
 8006fba:	4690      	mov	r8, r2
 8006fbc:	680b      	ldr	r3, [r1, #0]
 8006fbe:	d82d      	bhi.n	800701c <__ssputs_r+0x70>
 8006fc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006fc8:	d026      	beq.n	8007018 <__ssputs_r+0x6c>
 8006fca:	6965      	ldr	r5, [r4, #20]
 8006fcc:	6909      	ldr	r1, [r1, #16]
 8006fce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fd2:	eba3 0901 	sub.w	r9, r3, r1
 8006fd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fda:	1c7b      	adds	r3, r7, #1
 8006fdc:	444b      	add	r3, r9
 8006fde:	106d      	asrs	r5, r5, #1
 8006fe0:	429d      	cmp	r5, r3
 8006fe2:	bf38      	it	cc
 8006fe4:	461d      	movcc	r5, r3
 8006fe6:	0553      	lsls	r3, r2, #21
 8006fe8:	d527      	bpl.n	800703a <__ssputs_r+0x8e>
 8006fea:	4629      	mov	r1, r5
 8006fec:	f7ff fbd2 	bl	8006794 <_malloc_r>
 8006ff0:	4606      	mov	r6, r0
 8006ff2:	b360      	cbz	r0, 800704e <__ssputs_r+0xa2>
 8006ff4:	464a      	mov	r2, r9
 8006ff6:	6921      	ldr	r1, [r4, #16]
 8006ff8:	f000 fa02 	bl	8007400 <memcpy>
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007006:	81a3      	strh	r3, [r4, #12]
 8007008:	6126      	str	r6, [r4, #16]
 800700a:	444e      	add	r6, r9
 800700c:	6026      	str	r6, [r4, #0]
 800700e:	463e      	mov	r6, r7
 8007010:	6165      	str	r5, [r4, #20]
 8007012:	eba5 0509 	sub.w	r5, r5, r9
 8007016:	60a5      	str	r5, [r4, #8]
 8007018:	42be      	cmp	r6, r7
 800701a:	d900      	bls.n	800701e <__ssputs_r+0x72>
 800701c:	463e      	mov	r6, r7
 800701e:	4632      	mov	r2, r6
 8007020:	4641      	mov	r1, r8
 8007022:	6820      	ldr	r0, [r4, #0]
 8007024:	f000 f9c2 	bl	80073ac <memmove>
 8007028:	2000      	movs	r0, #0
 800702a:	68a3      	ldr	r3, [r4, #8]
 800702c:	1b9b      	subs	r3, r3, r6
 800702e:	60a3      	str	r3, [r4, #8]
 8007030:	6823      	ldr	r3, [r4, #0]
 8007032:	4433      	add	r3, r6
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800703a:	462a      	mov	r2, r5
 800703c:	f000 fa32 	bl	80074a4 <_realloc_r>
 8007040:	4606      	mov	r6, r0
 8007042:	2800      	cmp	r0, #0
 8007044:	d1e0      	bne.n	8007008 <__ssputs_r+0x5c>
 8007046:	4650      	mov	r0, sl
 8007048:	6921      	ldr	r1, [r4, #16]
 800704a:	f7ff fb31 	bl	80066b0 <_free_r>
 800704e:	230c      	movs	r3, #12
 8007050:	f8ca 3000 	str.w	r3, [sl]
 8007054:	89a3      	ldrh	r3, [r4, #12]
 8007056:	f04f 30ff 	mov.w	r0, #4294967295
 800705a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800705e:	81a3      	strh	r3, [r4, #12]
 8007060:	e7e9      	b.n	8007036 <__ssputs_r+0x8a>
	...

08007064 <_svfiprintf_r>:
 8007064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007068:	4698      	mov	r8, r3
 800706a:	898b      	ldrh	r3, [r1, #12]
 800706c:	4607      	mov	r7, r0
 800706e:	061b      	lsls	r3, r3, #24
 8007070:	460d      	mov	r5, r1
 8007072:	4614      	mov	r4, r2
 8007074:	b09d      	sub	sp, #116	@ 0x74
 8007076:	d510      	bpl.n	800709a <_svfiprintf_r+0x36>
 8007078:	690b      	ldr	r3, [r1, #16]
 800707a:	b973      	cbnz	r3, 800709a <_svfiprintf_r+0x36>
 800707c:	2140      	movs	r1, #64	@ 0x40
 800707e:	f7ff fb89 	bl	8006794 <_malloc_r>
 8007082:	6028      	str	r0, [r5, #0]
 8007084:	6128      	str	r0, [r5, #16]
 8007086:	b930      	cbnz	r0, 8007096 <_svfiprintf_r+0x32>
 8007088:	230c      	movs	r3, #12
 800708a:	603b      	str	r3, [r7, #0]
 800708c:	f04f 30ff 	mov.w	r0, #4294967295
 8007090:	b01d      	add	sp, #116	@ 0x74
 8007092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007096:	2340      	movs	r3, #64	@ 0x40
 8007098:	616b      	str	r3, [r5, #20]
 800709a:	2300      	movs	r3, #0
 800709c:	9309      	str	r3, [sp, #36]	@ 0x24
 800709e:	2320      	movs	r3, #32
 80070a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80070a4:	2330      	movs	r3, #48	@ 0x30
 80070a6:	f04f 0901 	mov.w	r9, #1
 80070aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80070ae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007248 <_svfiprintf_r+0x1e4>
 80070b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80070b6:	4623      	mov	r3, r4
 80070b8:	469a      	mov	sl, r3
 80070ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070be:	b10a      	cbz	r2, 80070c4 <_svfiprintf_r+0x60>
 80070c0:	2a25      	cmp	r2, #37	@ 0x25
 80070c2:	d1f9      	bne.n	80070b8 <_svfiprintf_r+0x54>
 80070c4:	ebba 0b04 	subs.w	fp, sl, r4
 80070c8:	d00b      	beq.n	80070e2 <_svfiprintf_r+0x7e>
 80070ca:	465b      	mov	r3, fp
 80070cc:	4622      	mov	r2, r4
 80070ce:	4629      	mov	r1, r5
 80070d0:	4638      	mov	r0, r7
 80070d2:	f7ff ff6b 	bl	8006fac <__ssputs_r>
 80070d6:	3001      	adds	r0, #1
 80070d8:	f000 80a7 	beq.w	800722a <_svfiprintf_r+0x1c6>
 80070dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070de:	445a      	add	r2, fp
 80070e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80070e2:	f89a 3000 	ldrb.w	r3, [sl]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 809f 	beq.w	800722a <_svfiprintf_r+0x1c6>
 80070ec:	2300      	movs	r3, #0
 80070ee:	f04f 32ff 	mov.w	r2, #4294967295
 80070f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070f6:	f10a 0a01 	add.w	sl, sl, #1
 80070fa:	9304      	str	r3, [sp, #16]
 80070fc:	9307      	str	r3, [sp, #28]
 80070fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007102:	931a      	str	r3, [sp, #104]	@ 0x68
 8007104:	4654      	mov	r4, sl
 8007106:	2205      	movs	r2, #5
 8007108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800710c:	484e      	ldr	r0, [pc, #312]	@ (8007248 <_svfiprintf_r+0x1e4>)
 800710e:	f7fe fc6e 	bl	80059ee <memchr>
 8007112:	9a04      	ldr	r2, [sp, #16]
 8007114:	b9d8      	cbnz	r0, 800714e <_svfiprintf_r+0xea>
 8007116:	06d0      	lsls	r0, r2, #27
 8007118:	bf44      	itt	mi
 800711a:	2320      	movmi	r3, #32
 800711c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007120:	0711      	lsls	r1, r2, #28
 8007122:	bf44      	itt	mi
 8007124:	232b      	movmi	r3, #43	@ 0x2b
 8007126:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800712a:	f89a 3000 	ldrb.w	r3, [sl]
 800712e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007130:	d015      	beq.n	800715e <_svfiprintf_r+0xfa>
 8007132:	4654      	mov	r4, sl
 8007134:	2000      	movs	r0, #0
 8007136:	f04f 0c0a 	mov.w	ip, #10
 800713a:	9a07      	ldr	r2, [sp, #28]
 800713c:	4621      	mov	r1, r4
 800713e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007142:	3b30      	subs	r3, #48	@ 0x30
 8007144:	2b09      	cmp	r3, #9
 8007146:	d94b      	bls.n	80071e0 <_svfiprintf_r+0x17c>
 8007148:	b1b0      	cbz	r0, 8007178 <_svfiprintf_r+0x114>
 800714a:	9207      	str	r2, [sp, #28]
 800714c:	e014      	b.n	8007178 <_svfiprintf_r+0x114>
 800714e:	eba0 0308 	sub.w	r3, r0, r8
 8007152:	fa09 f303 	lsl.w	r3, r9, r3
 8007156:	4313      	orrs	r3, r2
 8007158:	46a2      	mov	sl, r4
 800715a:	9304      	str	r3, [sp, #16]
 800715c:	e7d2      	b.n	8007104 <_svfiprintf_r+0xa0>
 800715e:	9b03      	ldr	r3, [sp, #12]
 8007160:	1d19      	adds	r1, r3, #4
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	9103      	str	r1, [sp, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	bfbb      	ittet	lt
 800716a:	425b      	neglt	r3, r3
 800716c:	f042 0202 	orrlt.w	r2, r2, #2
 8007170:	9307      	strge	r3, [sp, #28]
 8007172:	9307      	strlt	r3, [sp, #28]
 8007174:	bfb8      	it	lt
 8007176:	9204      	strlt	r2, [sp, #16]
 8007178:	7823      	ldrb	r3, [r4, #0]
 800717a:	2b2e      	cmp	r3, #46	@ 0x2e
 800717c:	d10a      	bne.n	8007194 <_svfiprintf_r+0x130>
 800717e:	7863      	ldrb	r3, [r4, #1]
 8007180:	2b2a      	cmp	r3, #42	@ 0x2a
 8007182:	d132      	bne.n	80071ea <_svfiprintf_r+0x186>
 8007184:	9b03      	ldr	r3, [sp, #12]
 8007186:	3402      	adds	r4, #2
 8007188:	1d1a      	adds	r2, r3, #4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	9203      	str	r2, [sp, #12]
 800718e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007192:	9305      	str	r3, [sp, #20]
 8007194:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800724c <_svfiprintf_r+0x1e8>
 8007198:	2203      	movs	r2, #3
 800719a:	4650      	mov	r0, sl
 800719c:	7821      	ldrb	r1, [r4, #0]
 800719e:	f7fe fc26 	bl	80059ee <memchr>
 80071a2:	b138      	cbz	r0, 80071b4 <_svfiprintf_r+0x150>
 80071a4:	2240      	movs	r2, #64	@ 0x40
 80071a6:	9b04      	ldr	r3, [sp, #16]
 80071a8:	eba0 000a 	sub.w	r0, r0, sl
 80071ac:	4082      	lsls	r2, r0
 80071ae:	4313      	orrs	r3, r2
 80071b0:	3401      	adds	r4, #1
 80071b2:	9304      	str	r3, [sp, #16]
 80071b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b8:	2206      	movs	r2, #6
 80071ba:	4825      	ldr	r0, [pc, #148]	@ (8007250 <_svfiprintf_r+0x1ec>)
 80071bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80071c0:	f7fe fc15 	bl	80059ee <memchr>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d036      	beq.n	8007236 <_svfiprintf_r+0x1d2>
 80071c8:	4b22      	ldr	r3, [pc, #136]	@ (8007254 <_svfiprintf_r+0x1f0>)
 80071ca:	bb1b      	cbnz	r3, 8007214 <_svfiprintf_r+0x1b0>
 80071cc:	9b03      	ldr	r3, [sp, #12]
 80071ce:	3307      	adds	r3, #7
 80071d0:	f023 0307 	bic.w	r3, r3, #7
 80071d4:	3308      	adds	r3, #8
 80071d6:	9303      	str	r3, [sp, #12]
 80071d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071da:	4433      	add	r3, r6
 80071dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80071de:	e76a      	b.n	80070b6 <_svfiprintf_r+0x52>
 80071e0:	460c      	mov	r4, r1
 80071e2:	2001      	movs	r0, #1
 80071e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80071e8:	e7a8      	b.n	800713c <_svfiprintf_r+0xd8>
 80071ea:	2300      	movs	r3, #0
 80071ec:	f04f 0c0a 	mov.w	ip, #10
 80071f0:	4619      	mov	r1, r3
 80071f2:	3401      	adds	r4, #1
 80071f4:	9305      	str	r3, [sp, #20]
 80071f6:	4620      	mov	r0, r4
 80071f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071fc:	3a30      	subs	r2, #48	@ 0x30
 80071fe:	2a09      	cmp	r2, #9
 8007200:	d903      	bls.n	800720a <_svfiprintf_r+0x1a6>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0c6      	beq.n	8007194 <_svfiprintf_r+0x130>
 8007206:	9105      	str	r1, [sp, #20]
 8007208:	e7c4      	b.n	8007194 <_svfiprintf_r+0x130>
 800720a:	4604      	mov	r4, r0
 800720c:	2301      	movs	r3, #1
 800720e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007212:	e7f0      	b.n	80071f6 <_svfiprintf_r+0x192>
 8007214:	ab03      	add	r3, sp, #12
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	462a      	mov	r2, r5
 800721a:	4638      	mov	r0, r7
 800721c:	4b0e      	ldr	r3, [pc, #56]	@ (8007258 <_svfiprintf_r+0x1f4>)
 800721e:	a904      	add	r1, sp, #16
 8007220:	f7fd fe4e 	bl	8004ec0 <_printf_float>
 8007224:	1c42      	adds	r2, r0, #1
 8007226:	4606      	mov	r6, r0
 8007228:	d1d6      	bne.n	80071d8 <_svfiprintf_r+0x174>
 800722a:	89ab      	ldrh	r3, [r5, #12]
 800722c:	065b      	lsls	r3, r3, #25
 800722e:	f53f af2d 	bmi.w	800708c <_svfiprintf_r+0x28>
 8007232:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007234:	e72c      	b.n	8007090 <_svfiprintf_r+0x2c>
 8007236:	ab03      	add	r3, sp, #12
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	462a      	mov	r2, r5
 800723c:	4638      	mov	r0, r7
 800723e:	4b06      	ldr	r3, [pc, #24]	@ (8007258 <_svfiprintf_r+0x1f4>)
 8007240:	a904      	add	r1, sp, #16
 8007242:	f7fe f8db 	bl	80053fc <_printf_i>
 8007246:	e7ed      	b.n	8007224 <_svfiprintf_r+0x1c0>
 8007248:	08008eb0 	.word	0x08008eb0
 800724c:	08008eb6 	.word	0x08008eb6
 8007250:	08008eba 	.word	0x08008eba
 8007254:	08004ec1 	.word	0x08004ec1
 8007258:	08006fad 	.word	0x08006fad

0800725c <__sflush_r>:
 800725c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	0716      	lsls	r6, r2, #28
 8007264:	4605      	mov	r5, r0
 8007266:	460c      	mov	r4, r1
 8007268:	d454      	bmi.n	8007314 <__sflush_r+0xb8>
 800726a:	684b      	ldr	r3, [r1, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	dc02      	bgt.n	8007276 <__sflush_r+0x1a>
 8007270:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007272:	2b00      	cmp	r3, #0
 8007274:	dd48      	ble.n	8007308 <__sflush_r+0xac>
 8007276:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007278:	2e00      	cmp	r6, #0
 800727a:	d045      	beq.n	8007308 <__sflush_r+0xac>
 800727c:	2300      	movs	r3, #0
 800727e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007282:	682f      	ldr	r7, [r5, #0]
 8007284:	6a21      	ldr	r1, [r4, #32]
 8007286:	602b      	str	r3, [r5, #0]
 8007288:	d030      	beq.n	80072ec <__sflush_r+0x90>
 800728a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800728c:	89a3      	ldrh	r3, [r4, #12]
 800728e:	0759      	lsls	r1, r3, #29
 8007290:	d505      	bpl.n	800729e <__sflush_r+0x42>
 8007292:	6863      	ldr	r3, [r4, #4]
 8007294:	1ad2      	subs	r2, r2, r3
 8007296:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007298:	b10b      	cbz	r3, 800729e <__sflush_r+0x42>
 800729a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800729c:	1ad2      	subs	r2, r2, r3
 800729e:	2300      	movs	r3, #0
 80072a0:	4628      	mov	r0, r5
 80072a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072a4:	6a21      	ldr	r1, [r4, #32]
 80072a6:	47b0      	blx	r6
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	d106      	bne.n	80072bc <__sflush_r+0x60>
 80072ae:	6829      	ldr	r1, [r5, #0]
 80072b0:	291d      	cmp	r1, #29
 80072b2:	d82b      	bhi.n	800730c <__sflush_r+0xb0>
 80072b4:	4a28      	ldr	r2, [pc, #160]	@ (8007358 <__sflush_r+0xfc>)
 80072b6:	410a      	asrs	r2, r1
 80072b8:	07d6      	lsls	r6, r2, #31
 80072ba:	d427      	bmi.n	800730c <__sflush_r+0xb0>
 80072bc:	2200      	movs	r2, #0
 80072be:	6062      	str	r2, [r4, #4]
 80072c0:	6922      	ldr	r2, [r4, #16]
 80072c2:	04d9      	lsls	r1, r3, #19
 80072c4:	6022      	str	r2, [r4, #0]
 80072c6:	d504      	bpl.n	80072d2 <__sflush_r+0x76>
 80072c8:	1c42      	adds	r2, r0, #1
 80072ca:	d101      	bne.n	80072d0 <__sflush_r+0x74>
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	b903      	cbnz	r3, 80072d2 <__sflush_r+0x76>
 80072d0:	6560      	str	r0, [r4, #84]	@ 0x54
 80072d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072d4:	602f      	str	r7, [r5, #0]
 80072d6:	b1b9      	cbz	r1, 8007308 <__sflush_r+0xac>
 80072d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072dc:	4299      	cmp	r1, r3
 80072de:	d002      	beq.n	80072e6 <__sflush_r+0x8a>
 80072e0:	4628      	mov	r0, r5
 80072e2:	f7ff f9e5 	bl	80066b0 <_free_r>
 80072e6:	2300      	movs	r3, #0
 80072e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80072ea:	e00d      	b.n	8007308 <__sflush_r+0xac>
 80072ec:	2301      	movs	r3, #1
 80072ee:	4628      	mov	r0, r5
 80072f0:	47b0      	blx	r6
 80072f2:	4602      	mov	r2, r0
 80072f4:	1c50      	adds	r0, r2, #1
 80072f6:	d1c9      	bne.n	800728c <__sflush_r+0x30>
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0c6      	beq.n	800728c <__sflush_r+0x30>
 80072fe:	2b1d      	cmp	r3, #29
 8007300:	d001      	beq.n	8007306 <__sflush_r+0xaa>
 8007302:	2b16      	cmp	r3, #22
 8007304:	d11d      	bne.n	8007342 <__sflush_r+0xe6>
 8007306:	602f      	str	r7, [r5, #0]
 8007308:	2000      	movs	r0, #0
 800730a:	e021      	b.n	8007350 <__sflush_r+0xf4>
 800730c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007310:	b21b      	sxth	r3, r3
 8007312:	e01a      	b.n	800734a <__sflush_r+0xee>
 8007314:	690f      	ldr	r7, [r1, #16]
 8007316:	2f00      	cmp	r7, #0
 8007318:	d0f6      	beq.n	8007308 <__sflush_r+0xac>
 800731a:	0793      	lsls	r3, r2, #30
 800731c:	bf18      	it	ne
 800731e:	2300      	movne	r3, #0
 8007320:	680e      	ldr	r6, [r1, #0]
 8007322:	bf08      	it	eq
 8007324:	694b      	ldreq	r3, [r1, #20]
 8007326:	1bf6      	subs	r6, r6, r7
 8007328:	600f      	str	r7, [r1, #0]
 800732a:	608b      	str	r3, [r1, #8]
 800732c:	2e00      	cmp	r6, #0
 800732e:	ddeb      	ble.n	8007308 <__sflush_r+0xac>
 8007330:	4633      	mov	r3, r6
 8007332:	463a      	mov	r2, r7
 8007334:	4628      	mov	r0, r5
 8007336:	6a21      	ldr	r1, [r4, #32]
 8007338:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800733c:	47e0      	blx	ip
 800733e:	2800      	cmp	r0, #0
 8007340:	dc07      	bgt.n	8007352 <__sflush_r+0xf6>
 8007342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800734a:	f04f 30ff 	mov.w	r0, #4294967295
 800734e:	81a3      	strh	r3, [r4, #12]
 8007350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007352:	4407      	add	r7, r0
 8007354:	1a36      	subs	r6, r6, r0
 8007356:	e7e9      	b.n	800732c <__sflush_r+0xd0>
 8007358:	dfbffffe 	.word	0xdfbffffe

0800735c <_fflush_r>:
 800735c:	b538      	push	{r3, r4, r5, lr}
 800735e:	690b      	ldr	r3, [r1, #16]
 8007360:	4605      	mov	r5, r0
 8007362:	460c      	mov	r4, r1
 8007364:	b913      	cbnz	r3, 800736c <_fflush_r+0x10>
 8007366:	2500      	movs	r5, #0
 8007368:	4628      	mov	r0, r5
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	b118      	cbz	r0, 8007376 <_fflush_r+0x1a>
 800736e:	6a03      	ldr	r3, [r0, #32]
 8007370:	b90b      	cbnz	r3, 8007376 <_fflush_r+0x1a>
 8007372:	f7fe f9ef 	bl	8005754 <__sinit>
 8007376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0f3      	beq.n	8007366 <_fflush_r+0xa>
 800737e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007380:	07d0      	lsls	r0, r2, #31
 8007382:	d404      	bmi.n	800738e <_fflush_r+0x32>
 8007384:	0599      	lsls	r1, r3, #22
 8007386:	d402      	bmi.n	800738e <_fflush_r+0x32>
 8007388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800738a:	f7fe fb2e 	bl	80059ea <__retarget_lock_acquire_recursive>
 800738e:	4628      	mov	r0, r5
 8007390:	4621      	mov	r1, r4
 8007392:	f7ff ff63 	bl	800725c <__sflush_r>
 8007396:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007398:	4605      	mov	r5, r0
 800739a:	07da      	lsls	r2, r3, #31
 800739c:	d4e4      	bmi.n	8007368 <_fflush_r+0xc>
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	059b      	lsls	r3, r3, #22
 80073a2:	d4e1      	bmi.n	8007368 <_fflush_r+0xc>
 80073a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073a6:	f7fe fb21 	bl	80059ec <__retarget_lock_release_recursive>
 80073aa:	e7dd      	b.n	8007368 <_fflush_r+0xc>

080073ac <memmove>:
 80073ac:	4288      	cmp	r0, r1
 80073ae:	b510      	push	{r4, lr}
 80073b0:	eb01 0402 	add.w	r4, r1, r2
 80073b4:	d902      	bls.n	80073bc <memmove+0x10>
 80073b6:	4284      	cmp	r4, r0
 80073b8:	4623      	mov	r3, r4
 80073ba:	d807      	bhi.n	80073cc <memmove+0x20>
 80073bc:	1e43      	subs	r3, r0, #1
 80073be:	42a1      	cmp	r1, r4
 80073c0:	d008      	beq.n	80073d4 <memmove+0x28>
 80073c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073ca:	e7f8      	b.n	80073be <memmove+0x12>
 80073cc:	4601      	mov	r1, r0
 80073ce:	4402      	add	r2, r0
 80073d0:	428a      	cmp	r2, r1
 80073d2:	d100      	bne.n	80073d6 <memmove+0x2a>
 80073d4:	bd10      	pop	{r4, pc}
 80073d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073de:	e7f7      	b.n	80073d0 <memmove+0x24>

080073e0 <_sbrk_r>:
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	2300      	movs	r3, #0
 80073e4:	4d05      	ldr	r5, [pc, #20]	@ (80073fc <_sbrk_r+0x1c>)
 80073e6:	4604      	mov	r4, r0
 80073e8:	4608      	mov	r0, r1
 80073ea:	602b      	str	r3, [r5, #0]
 80073ec:	f7fa ff90 	bl	8002310 <_sbrk>
 80073f0:	1c43      	adds	r3, r0, #1
 80073f2:	d102      	bne.n	80073fa <_sbrk_r+0x1a>
 80073f4:	682b      	ldr	r3, [r5, #0]
 80073f6:	b103      	cbz	r3, 80073fa <_sbrk_r+0x1a>
 80073f8:	6023      	str	r3, [r4, #0]
 80073fa:	bd38      	pop	{r3, r4, r5, pc}
 80073fc:	200004c0 	.word	0x200004c0

08007400 <memcpy>:
 8007400:	440a      	add	r2, r1
 8007402:	4291      	cmp	r1, r2
 8007404:	f100 33ff 	add.w	r3, r0, #4294967295
 8007408:	d100      	bne.n	800740c <memcpy+0xc>
 800740a:	4770      	bx	lr
 800740c:	b510      	push	{r4, lr}
 800740e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007412:	4291      	cmp	r1, r2
 8007414:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007418:	d1f9      	bne.n	800740e <memcpy+0xe>
 800741a:	bd10      	pop	{r4, pc}

0800741c <__assert_func>:
 800741c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800741e:	4614      	mov	r4, r2
 8007420:	461a      	mov	r2, r3
 8007422:	4b09      	ldr	r3, [pc, #36]	@ (8007448 <__assert_func+0x2c>)
 8007424:	4605      	mov	r5, r0
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68d8      	ldr	r0, [r3, #12]
 800742a:	b954      	cbnz	r4, 8007442 <__assert_func+0x26>
 800742c:	4b07      	ldr	r3, [pc, #28]	@ (800744c <__assert_func+0x30>)
 800742e:	461c      	mov	r4, r3
 8007430:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007434:	9100      	str	r1, [sp, #0]
 8007436:	462b      	mov	r3, r5
 8007438:	4905      	ldr	r1, [pc, #20]	@ (8007450 <__assert_func+0x34>)
 800743a:	f000 f86f 	bl	800751c <fiprintf>
 800743e:	f000 f87f 	bl	8007540 <abort>
 8007442:	4b04      	ldr	r3, [pc, #16]	@ (8007454 <__assert_func+0x38>)
 8007444:	e7f4      	b.n	8007430 <__assert_func+0x14>
 8007446:	bf00      	nop
 8007448:	2000001c 	.word	0x2000001c
 800744c:	08008f06 	.word	0x08008f06
 8007450:	08008ed8 	.word	0x08008ed8
 8007454:	08008ecb 	.word	0x08008ecb

08007458 <_calloc_r>:
 8007458:	b570      	push	{r4, r5, r6, lr}
 800745a:	fba1 5402 	umull	r5, r4, r1, r2
 800745e:	b93c      	cbnz	r4, 8007470 <_calloc_r+0x18>
 8007460:	4629      	mov	r1, r5
 8007462:	f7ff f997 	bl	8006794 <_malloc_r>
 8007466:	4606      	mov	r6, r0
 8007468:	b928      	cbnz	r0, 8007476 <_calloc_r+0x1e>
 800746a:	2600      	movs	r6, #0
 800746c:	4630      	mov	r0, r6
 800746e:	bd70      	pop	{r4, r5, r6, pc}
 8007470:	220c      	movs	r2, #12
 8007472:	6002      	str	r2, [r0, #0]
 8007474:	e7f9      	b.n	800746a <_calloc_r+0x12>
 8007476:	462a      	mov	r2, r5
 8007478:	4621      	mov	r1, r4
 800747a:	f7fe fa38 	bl	80058ee <memset>
 800747e:	e7f5      	b.n	800746c <_calloc_r+0x14>

08007480 <__ascii_mbtowc>:
 8007480:	b082      	sub	sp, #8
 8007482:	b901      	cbnz	r1, 8007486 <__ascii_mbtowc+0x6>
 8007484:	a901      	add	r1, sp, #4
 8007486:	b142      	cbz	r2, 800749a <__ascii_mbtowc+0x1a>
 8007488:	b14b      	cbz	r3, 800749e <__ascii_mbtowc+0x1e>
 800748a:	7813      	ldrb	r3, [r2, #0]
 800748c:	600b      	str	r3, [r1, #0]
 800748e:	7812      	ldrb	r2, [r2, #0]
 8007490:	1e10      	subs	r0, r2, #0
 8007492:	bf18      	it	ne
 8007494:	2001      	movne	r0, #1
 8007496:	b002      	add	sp, #8
 8007498:	4770      	bx	lr
 800749a:	4610      	mov	r0, r2
 800749c:	e7fb      	b.n	8007496 <__ascii_mbtowc+0x16>
 800749e:	f06f 0001 	mvn.w	r0, #1
 80074a2:	e7f8      	b.n	8007496 <__ascii_mbtowc+0x16>

080074a4 <_realloc_r>:
 80074a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074a8:	4680      	mov	r8, r0
 80074aa:	4615      	mov	r5, r2
 80074ac:	460c      	mov	r4, r1
 80074ae:	b921      	cbnz	r1, 80074ba <_realloc_r+0x16>
 80074b0:	4611      	mov	r1, r2
 80074b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074b6:	f7ff b96d 	b.w	8006794 <_malloc_r>
 80074ba:	b92a      	cbnz	r2, 80074c8 <_realloc_r+0x24>
 80074bc:	f7ff f8f8 	bl	80066b0 <_free_r>
 80074c0:	2400      	movs	r4, #0
 80074c2:	4620      	mov	r0, r4
 80074c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074c8:	f000 f841 	bl	800754e <_malloc_usable_size_r>
 80074cc:	4285      	cmp	r5, r0
 80074ce:	4606      	mov	r6, r0
 80074d0:	d802      	bhi.n	80074d8 <_realloc_r+0x34>
 80074d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80074d6:	d8f4      	bhi.n	80074c2 <_realloc_r+0x1e>
 80074d8:	4629      	mov	r1, r5
 80074da:	4640      	mov	r0, r8
 80074dc:	f7ff f95a 	bl	8006794 <_malloc_r>
 80074e0:	4607      	mov	r7, r0
 80074e2:	2800      	cmp	r0, #0
 80074e4:	d0ec      	beq.n	80074c0 <_realloc_r+0x1c>
 80074e6:	42b5      	cmp	r5, r6
 80074e8:	462a      	mov	r2, r5
 80074ea:	4621      	mov	r1, r4
 80074ec:	bf28      	it	cs
 80074ee:	4632      	movcs	r2, r6
 80074f0:	f7ff ff86 	bl	8007400 <memcpy>
 80074f4:	4621      	mov	r1, r4
 80074f6:	4640      	mov	r0, r8
 80074f8:	f7ff f8da 	bl	80066b0 <_free_r>
 80074fc:	463c      	mov	r4, r7
 80074fe:	e7e0      	b.n	80074c2 <_realloc_r+0x1e>

08007500 <__ascii_wctomb>:
 8007500:	4603      	mov	r3, r0
 8007502:	4608      	mov	r0, r1
 8007504:	b141      	cbz	r1, 8007518 <__ascii_wctomb+0x18>
 8007506:	2aff      	cmp	r2, #255	@ 0xff
 8007508:	d904      	bls.n	8007514 <__ascii_wctomb+0x14>
 800750a:	228a      	movs	r2, #138	@ 0x8a
 800750c:	f04f 30ff 	mov.w	r0, #4294967295
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	4770      	bx	lr
 8007514:	2001      	movs	r0, #1
 8007516:	700a      	strb	r2, [r1, #0]
 8007518:	4770      	bx	lr
	...

0800751c <fiprintf>:
 800751c:	b40e      	push	{r1, r2, r3}
 800751e:	b503      	push	{r0, r1, lr}
 8007520:	4601      	mov	r1, r0
 8007522:	ab03      	add	r3, sp, #12
 8007524:	4805      	ldr	r0, [pc, #20]	@ (800753c <fiprintf+0x20>)
 8007526:	f853 2b04 	ldr.w	r2, [r3], #4
 800752a:	6800      	ldr	r0, [r0, #0]
 800752c:	9301      	str	r3, [sp, #4]
 800752e:	f000 f83d 	bl	80075ac <_vfiprintf_r>
 8007532:	b002      	add	sp, #8
 8007534:	f85d eb04 	ldr.w	lr, [sp], #4
 8007538:	b003      	add	sp, #12
 800753a:	4770      	bx	lr
 800753c:	2000001c 	.word	0x2000001c

08007540 <abort>:
 8007540:	2006      	movs	r0, #6
 8007542:	b508      	push	{r3, lr}
 8007544:	f000 fa06 	bl	8007954 <raise>
 8007548:	2001      	movs	r0, #1
 800754a:	f7fa fe6c 	bl	8002226 <_exit>

0800754e <_malloc_usable_size_r>:
 800754e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007552:	1f18      	subs	r0, r3, #4
 8007554:	2b00      	cmp	r3, #0
 8007556:	bfbc      	itt	lt
 8007558:	580b      	ldrlt	r3, [r1, r0]
 800755a:	18c0      	addlt	r0, r0, r3
 800755c:	4770      	bx	lr

0800755e <__sfputc_r>:
 800755e:	6893      	ldr	r3, [r2, #8]
 8007560:	b410      	push	{r4}
 8007562:	3b01      	subs	r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	6093      	str	r3, [r2, #8]
 8007568:	da07      	bge.n	800757a <__sfputc_r+0x1c>
 800756a:	6994      	ldr	r4, [r2, #24]
 800756c:	42a3      	cmp	r3, r4
 800756e:	db01      	blt.n	8007574 <__sfputc_r+0x16>
 8007570:	290a      	cmp	r1, #10
 8007572:	d102      	bne.n	800757a <__sfputc_r+0x1c>
 8007574:	bc10      	pop	{r4}
 8007576:	f000 b931 	b.w	80077dc <__swbuf_r>
 800757a:	6813      	ldr	r3, [r2, #0]
 800757c:	1c58      	adds	r0, r3, #1
 800757e:	6010      	str	r0, [r2, #0]
 8007580:	7019      	strb	r1, [r3, #0]
 8007582:	4608      	mov	r0, r1
 8007584:	bc10      	pop	{r4}
 8007586:	4770      	bx	lr

08007588 <__sfputs_r>:
 8007588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758a:	4606      	mov	r6, r0
 800758c:	460f      	mov	r7, r1
 800758e:	4614      	mov	r4, r2
 8007590:	18d5      	adds	r5, r2, r3
 8007592:	42ac      	cmp	r4, r5
 8007594:	d101      	bne.n	800759a <__sfputs_r+0x12>
 8007596:	2000      	movs	r0, #0
 8007598:	e007      	b.n	80075aa <__sfputs_r+0x22>
 800759a:	463a      	mov	r2, r7
 800759c:	4630      	mov	r0, r6
 800759e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a2:	f7ff ffdc 	bl	800755e <__sfputc_r>
 80075a6:	1c43      	adds	r3, r0, #1
 80075a8:	d1f3      	bne.n	8007592 <__sfputs_r+0xa>
 80075aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080075ac <_vfiprintf_r>:
 80075ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b0:	460d      	mov	r5, r1
 80075b2:	4614      	mov	r4, r2
 80075b4:	4698      	mov	r8, r3
 80075b6:	4606      	mov	r6, r0
 80075b8:	b09d      	sub	sp, #116	@ 0x74
 80075ba:	b118      	cbz	r0, 80075c4 <_vfiprintf_r+0x18>
 80075bc:	6a03      	ldr	r3, [r0, #32]
 80075be:	b90b      	cbnz	r3, 80075c4 <_vfiprintf_r+0x18>
 80075c0:	f7fe f8c8 	bl	8005754 <__sinit>
 80075c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075c6:	07d9      	lsls	r1, r3, #31
 80075c8:	d405      	bmi.n	80075d6 <_vfiprintf_r+0x2a>
 80075ca:	89ab      	ldrh	r3, [r5, #12]
 80075cc:	059a      	lsls	r2, r3, #22
 80075ce:	d402      	bmi.n	80075d6 <_vfiprintf_r+0x2a>
 80075d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075d2:	f7fe fa0a 	bl	80059ea <__retarget_lock_acquire_recursive>
 80075d6:	89ab      	ldrh	r3, [r5, #12]
 80075d8:	071b      	lsls	r3, r3, #28
 80075da:	d501      	bpl.n	80075e0 <_vfiprintf_r+0x34>
 80075dc:	692b      	ldr	r3, [r5, #16]
 80075de:	b99b      	cbnz	r3, 8007608 <_vfiprintf_r+0x5c>
 80075e0:	4629      	mov	r1, r5
 80075e2:	4630      	mov	r0, r6
 80075e4:	f000 f938 	bl	8007858 <__swsetup_r>
 80075e8:	b170      	cbz	r0, 8007608 <_vfiprintf_r+0x5c>
 80075ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075ec:	07dc      	lsls	r4, r3, #31
 80075ee:	d504      	bpl.n	80075fa <_vfiprintf_r+0x4e>
 80075f0:	f04f 30ff 	mov.w	r0, #4294967295
 80075f4:	b01d      	add	sp, #116	@ 0x74
 80075f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075fa:	89ab      	ldrh	r3, [r5, #12]
 80075fc:	0598      	lsls	r0, r3, #22
 80075fe:	d4f7      	bmi.n	80075f0 <_vfiprintf_r+0x44>
 8007600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007602:	f7fe f9f3 	bl	80059ec <__retarget_lock_release_recursive>
 8007606:	e7f3      	b.n	80075f0 <_vfiprintf_r+0x44>
 8007608:	2300      	movs	r3, #0
 800760a:	9309      	str	r3, [sp, #36]	@ 0x24
 800760c:	2320      	movs	r3, #32
 800760e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007612:	2330      	movs	r3, #48	@ 0x30
 8007614:	f04f 0901 	mov.w	r9, #1
 8007618:	f8cd 800c 	str.w	r8, [sp, #12]
 800761c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80077c8 <_vfiprintf_r+0x21c>
 8007620:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007624:	4623      	mov	r3, r4
 8007626:	469a      	mov	sl, r3
 8007628:	f813 2b01 	ldrb.w	r2, [r3], #1
 800762c:	b10a      	cbz	r2, 8007632 <_vfiprintf_r+0x86>
 800762e:	2a25      	cmp	r2, #37	@ 0x25
 8007630:	d1f9      	bne.n	8007626 <_vfiprintf_r+0x7a>
 8007632:	ebba 0b04 	subs.w	fp, sl, r4
 8007636:	d00b      	beq.n	8007650 <_vfiprintf_r+0xa4>
 8007638:	465b      	mov	r3, fp
 800763a:	4622      	mov	r2, r4
 800763c:	4629      	mov	r1, r5
 800763e:	4630      	mov	r0, r6
 8007640:	f7ff ffa2 	bl	8007588 <__sfputs_r>
 8007644:	3001      	adds	r0, #1
 8007646:	f000 80a7 	beq.w	8007798 <_vfiprintf_r+0x1ec>
 800764a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800764c:	445a      	add	r2, fp
 800764e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007650:	f89a 3000 	ldrb.w	r3, [sl]
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 809f 	beq.w	8007798 <_vfiprintf_r+0x1ec>
 800765a:	2300      	movs	r3, #0
 800765c:	f04f 32ff 	mov.w	r2, #4294967295
 8007660:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007664:	f10a 0a01 	add.w	sl, sl, #1
 8007668:	9304      	str	r3, [sp, #16]
 800766a:	9307      	str	r3, [sp, #28]
 800766c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007670:	931a      	str	r3, [sp, #104]	@ 0x68
 8007672:	4654      	mov	r4, sl
 8007674:	2205      	movs	r2, #5
 8007676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800767a:	4853      	ldr	r0, [pc, #332]	@ (80077c8 <_vfiprintf_r+0x21c>)
 800767c:	f7fe f9b7 	bl	80059ee <memchr>
 8007680:	9a04      	ldr	r2, [sp, #16]
 8007682:	b9d8      	cbnz	r0, 80076bc <_vfiprintf_r+0x110>
 8007684:	06d1      	lsls	r1, r2, #27
 8007686:	bf44      	itt	mi
 8007688:	2320      	movmi	r3, #32
 800768a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800768e:	0713      	lsls	r3, r2, #28
 8007690:	bf44      	itt	mi
 8007692:	232b      	movmi	r3, #43	@ 0x2b
 8007694:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007698:	f89a 3000 	ldrb.w	r3, [sl]
 800769c:	2b2a      	cmp	r3, #42	@ 0x2a
 800769e:	d015      	beq.n	80076cc <_vfiprintf_r+0x120>
 80076a0:	4654      	mov	r4, sl
 80076a2:	2000      	movs	r0, #0
 80076a4:	f04f 0c0a 	mov.w	ip, #10
 80076a8:	9a07      	ldr	r2, [sp, #28]
 80076aa:	4621      	mov	r1, r4
 80076ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076b0:	3b30      	subs	r3, #48	@ 0x30
 80076b2:	2b09      	cmp	r3, #9
 80076b4:	d94b      	bls.n	800774e <_vfiprintf_r+0x1a2>
 80076b6:	b1b0      	cbz	r0, 80076e6 <_vfiprintf_r+0x13a>
 80076b8:	9207      	str	r2, [sp, #28]
 80076ba:	e014      	b.n	80076e6 <_vfiprintf_r+0x13a>
 80076bc:	eba0 0308 	sub.w	r3, r0, r8
 80076c0:	fa09 f303 	lsl.w	r3, r9, r3
 80076c4:	4313      	orrs	r3, r2
 80076c6:	46a2      	mov	sl, r4
 80076c8:	9304      	str	r3, [sp, #16]
 80076ca:	e7d2      	b.n	8007672 <_vfiprintf_r+0xc6>
 80076cc:	9b03      	ldr	r3, [sp, #12]
 80076ce:	1d19      	adds	r1, r3, #4
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	9103      	str	r1, [sp, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	bfbb      	ittet	lt
 80076d8:	425b      	neglt	r3, r3
 80076da:	f042 0202 	orrlt.w	r2, r2, #2
 80076de:	9307      	strge	r3, [sp, #28]
 80076e0:	9307      	strlt	r3, [sp, #28]
 80076e2:	bfb8      	it	lt
 80076e4:	9204      	strlt	r2, [sp, #16]
 80076e6:	7823      	ldrb	r3, [r4, #0]
 80076e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80076ea:	d10a      	bne.n	8007702 <_vfiprintf_r+0x156>
 80076ec:	7863      	ldrb	r3, [r4, #1]
 80076ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80076f0:	d132      	bne.n	8007758 <_vfiprintf_r+0x1ac>
 80076f2:	9b03      	ldr	r3, [sp, #12]
 80076f4:	3402      	adds	r4, #2
 80076f6:	1d1a      	adds	r2, r3, #4
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	9203      	str	r2, [sp, #12]
 80076fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007700:	9305      	str	r3, [sp, #20]
 8007702:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80077cc <_vfiprintf_r+0x220>
 8007706:	2203      	movs	r2, #3
 8007708:	4650      	mov	r0, sl
 800770a:	7821      	ldrb	r1, [r4, #0]
 800770c:	f7fe f96f 	bl	80059ee <memchr>
 8007710:	b138      	cbz	r0, 8007722 <_vfiprintf_r+0x176>
 8007712:	2240      	movs	r2, #64	@ 0x40
 8007714:	9b04      	ldr	r3, [sp, #16]
 8007716:	eba0 000a 	sub.w	r0, r0, sl
 800771a:	4082      	lsls	r2, r0
 800771c:	4313      	orrs	r3, r2
 800771e:	3401      	adds	r4, #1
 8007720:	9304      	str	r3, [sp, #16]
 8007722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007726:	2206      	movs	r2, #6
 8007728:	4829      	ldr	r0, [pc, #164]	@ (80077d0 <_vfiprintf_r+0x224>)
 800772a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800772e:	f7fe f95e 	bl	80059ee <memchr>
 8007732:	2800      	cmp	r0, #0
 8007734:	d03f      	beq.n	80077b6 <_vfiprintf_r+0x20a>
 8007736:	4b27      	ldr	r3, [pc, #156]	@ (80077d4 <_vfiprintf_r+0x228>)
 8007738:	bb1b      	cbnz	r3, 8007782 <_vfiprintf_r+0x1d6>
 800773a:	9b03      	ldr	r3, [sp, #12]
 800773c:	3307      	adds	r3, #7
 800773e:	f023 0307 	bic.w	r3, r3, #7
 8007742:	3308      	adds	r3, #8
 8007744:	9303      	str	r3, [sp, #12]
 8007746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007748:	443b      	add	r3, r7
 800774a:	9309      	str	r3, [sp, #36]	@ 0x24
 800774c:	e76a      	b.n	8007624 <_vfiprintf_r+0x78>
 800774e:	460c      	mov	r4, r1
 8007750:	2001      	movs	r0, #1
 8007752:	fb0c 3202 	mla	r2, ip, r2, r3
 8007756:	e7a8      	b.n	80076aa <_vfiprintf_r+0xfe>
 8007758:	2300      	movs	r3, #0
 800775a:	f04f 0c0a 	mov.w	ip, #10
 800775e:	4619      	mov	r1, r3
 8007760:	3401      	adds	r4, #1
 8007762:	9305      	str	r3, [sp, #20]
 8007764:	4620      	mov	r0, r4
 8007766:	f810 2b01 	ldrb.w	r2, [r0], #1
 800776a:	3a30      	subs	r2, #48	@ 0x30
 800776c:	2a09      	cmp	r2, #9
 800776e:	d903      	bls.n	8007778 <_vfiprintf_r+0x1cc>
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0c6      	beq.n	8007702 <_vfiprintf_r+0x156>
 8007774:	9105      	str	r1, [sp, #20]
 8007776:	e7c4      	b.n	8007702 <_vfiprintf_r+0x156>
 8007778:	4604      	mov	r4, r0
 800777a:	2301      	movs	r3, #1
 800777c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007780:	e7f0      	b.n	8007764 <_vfiprintf_r+0x1b8>
 8007782:	ab03      	add	r3, sp, #12
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	462a      	mov	r2, r5
 8007788:	4630      	mov	r0, r6
 800778a:	4b13      	ldr	r3, [pc, #76]	@ (80077d8 <_vfiprintf_r+0x22c>)
 800778c:	a904      	add	r1, sp, #16
 800778e:	f7fd fb97 	bl	8004ec0 <_printf_float>
 8007792:	4607      	mov	r7, r0
 8007794:	1c78      	adds	r0, r7, #1
 8007796:	d1d6      	bne.n	8007746 <_vfiprintf_r+0x19a>
 8007798:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800779a:	07d9      	lsls	r1, r3, #31
 800779c:	d405      	bmi.n	80077aa <_vfiprintf_r+0x1fe>
 800779e:	89ab      	ldrh	r3, [r5, #12]
 80077a0:	059a      	lsls	r2, r3, #22
 80077a2:	d402      	bmi.n	80077aa <_vfiprintf_r+0x1fe>
 80077a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077a6:	f7fe f921 	bl	80059ec <__retarget_lock_release_recursive>
 80077aa:	89ab      	ldrh	r3, [r5, #12]
 80077ac:	065b      	lsls	r3, r3, #25
 80077ae:	f53f af1f 	bmi.w	80075f0 <_vfiprintf_r+0x44>
 80077b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077b4:	e71e      	b.n	80075f4 <_vfiprintf_r+0x48>
 80077b6:	ab03      	add	r3, sp, #12
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	462a      	mov	r2, r5
 80077bc:	4630      	mov	r0, r6
 80077be:	4b06      	ldr	r3, [pc, #24]	@ (80077d8 <_vfiprintf_r+0x22c>)
 80077c0:	a904      	add	r1, sp, #16
 80077c2:	f7fd fe1b 	bl	80053fc <_printf_i>
 80077c6:	e7e4      	b.n	8007792 <_vfiprintf_r+0x1e6>
 80077c8:	08008eb0 	.word	0x08008eb0
 80077cc:	08008eb6 	.word	0x08008eb6
 80077d0:	08008eba 	.word	0x08008eba
 80077d4:	08004ec1 	.word	0x08004ec1
 80077d8:	08007589 	.word	0x08007589

080077dc <__swbuf_r>:
 80077dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077de:	460e      	mov	r6, r1
 80077e0:	4614      	mov	r4, r2
 80077e2:	4605      	mov	r5, r0
 80077e4:	b118      	cbz	r0, 80077ee <__swbuf_r+0x12>
 80077e6:	6a03      	ldr	r3, [r0, #32]
 80077e8:	b90b      	cbnz	r3, 80077ee <__swbuf_r+0x12>
 80077ea:	f7fd ffb3 	bl	8005754 <__sinit>
 80077ee:	69a3      	ldr	r3, [r4, #24]
 80077f0:	60a3      	str	r3, [r4, #8]
 80077f2:	89a3      	ldrh	r3, [r4, #12]
 80077f4:	071a      	lsls	r2, r3, #28
 80077f6:	d501      	bpl.n	80077fc <__swbuf_r+0x20>
 80077f8:	6923      	ldr	r3, [r4, #16]
 80077fa:	b943      	cbnz	r3, 800780e <__swbuf_r+0x32>
 80077fc:	4621      	mov	r1, r4
 80077fe:	4628      	mov	r0, r5
 8007800:	f000 f82a 	bl	8007858 <__swsetup_r>
 8007804:	b118      	cbz	r0, 800780e <__swbuf_r+0x32>
 8007806:	f04f 37ff 	mov.w	r7, #4294967295
 800780a:	4638      	mov	r0, r7
 800780c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	6922      	ldr	r2, [r4, #16]
 8007812:	b2f6      	uxtb	r6, r6
 8007814:	1a98      	subs	r0, r3, r2
 8007816:	6963      	ldr	r3, [r4, #20]
 8007818:	4637      	mov	r7, r6
 800781a:	4283      	cmp	r3, r0
 800781c:	dc05      	bgt.n	800782a <__swbuf_r+0x4e>
 800781e:	4621      	mov	r1, r4
 8007820:	4628      	mov	r0, r5
 8007822:	f7ff fd9b 	bl	800735c <_fflush_r>
 8007826:	2800      	cmp	r0, #0
 8007828:	d1ed      	bne.n	8007806 <__swbuf_r+0x2a>
 800782a:	68a3      	ldr	r3, [r4, #8]
 800782c:	3b01      	subs	r3, #1
 800782e:	60a3      	str	r3, [r4, #8]
 8007830:	6823      	ldr	r3, [r4, #0]
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	6022      	str	r2, [r4, #0]
 8007836:	701e      	strb	r6, [r3, #0]
 8007838:	6962      	ldr	r2, [r4, #20]
 800783a:	1c43      	adds	r3, r0, #1
 800783c:	429a      	cmp	r2, r3
 800783e:	d004      	beq.n	800784a <__swbuf_r+0x6e>
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	07db      	lsls	r3, r3, #31
 8007844:	d5e1      	bpl.n	800780a <__swbuf_r+0x2e>
 8007846:	2e0a      	cmp	r6, #10
 8007848:	d1df      	bne.n	800780a <__swbuf_r+0x2e>
 800784a:	4621      	mov	r1, r4
 800784c:	4628      	mov	r0, r5
 800784e:	f7ff fd85 	bl	800735c <_fflush_r>
 8007852:	2800      	cmp	r0, #0
 8007854:	d0d9      	beq.n	800780a <__swbuf_r+0x2e>
 8007856:	e7d6      	b.n	8007806 <__swbuf_r+0x2a>

08007858 <__swsetup_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4b29      	ldr	r3, [pc, #164]	@ (8007900 <__swsetup_r+0xa8>)
 800785c:	4605      	mov	r5, r0
 800785e:	6818      	ldr	r0, [r3, #0]
 8007860:	460c      	mov	r4, r1
 8007862:	b118      	cbz	r0, 800786c <__swsetup_r+0x14>
 8007864:	6a03      	ldr	r3, [r0, #32]
 8007866:	b90b      	cbnz	r3, 800786c <__swsetup_r+0x14>
 8007868:	f7fd ff74 	bl	8005754 <__sinit>
 800786c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007870:	0719      	lsls	r1, r3, #28
 8007872:	d422      	bmi.n	80078ba <__swsetup_r+0x62>
 8007874:	06da      	lsls	r2, r3, #27
 8007876:	d407      	bmi.n	8007888 <__swsetup_r+0x30>
 8007878:	2209      	movs	r2, #9
 800787a:	602a      	str	r2, [r5, #0]
 800787c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007880:	f04f 30ff 	mov.w	r0, #4294967295
 8007884:	81a3      	strh	r3, [r4, #12]
 8007886:	e033      	b.n	80078f0 <__swsetup_r+0x98>
 8007888:	0758      	lsls	r0, r3, #29
 800788a:	d512      	bpl.n	80078b2 <__swsetup_r+0x5a>
 800788c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800788e:	b141      	cbz	r1, 80078a2 <__swsetup_r+0x4a>
 8007890:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007894:	4299      	cmp	r1, r3
 8007896:	d002      	beq.n	800789e <__swsetup_r+0x46>
 8007898:	4628      	mov	r0, r5
 800789a:	f7fe ff09 	bl	80066b0 <_free_r>
 800789e:	2300      	movs	r3, #0
 80078a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80078a2:	89a3      	ldrh	r3, [r4, #12]
 80078a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80078a8:	81a3      	strh	r3, [r4, #12]
 80078aa:	2300      	movs	r3, #0
 80078ac:	6063      	str	r3, [r4, #4]
 80078ae:	6923      	ldr	r3, [r4, #16]
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	f043 0308 	orr.w	r3, r3, #8
 80078b8:	81a3      	strh	r3, [r4, #12]
 80078ba:	6923      	ldr	r3, [r4, #16]
 80078bc:	b94b      	cbnz	r3, 80078d2 <__swsetup_r+0x7a>
 80078be:	89a3      	ldrh	r3, [r4, #12]
 80078c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078c8:	d003      	beq.n	80078d2 <__swsetup_r+0x7a>
 80078ca:	4621      	mov	r1, r4
 80078cc:	4628      	mov	r0, r5
 80078ce:	f000 f882 	bl	80079d6 <__smakebuf_r>
 80078d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078d6:	f013 0201 	ands.w	r2, r3, #1
 80078da:	d00a      	beq.n	80078f2 <__swsetup_r+0x9a>
 80078dc:	2200      	movs	r2, #0
 80078de:	60a2      	str	r2, [r4, #8]
 80078e0:	6962      	ldr	r2, [r4, #20]
 80078e2:	4252      	negs	r2, r2
 80078e4:	61a2      	str	r2, [r4, #24]
 80078e6:	6922      	ldr	r2, [r4, #16]
 80078e8:	b942      	cbnz	r2, 80078fc <__swsetup_r+0xa4>
 80078ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80078ee:	d1c5      	bne.n	800787c <__swsetup_r+0x24>
 80078f0:	bd38      	pop	{r3, r4, r5, pc}
 80078f2:	0799      	lsls	r1, r3, #30
 80078f4:	bf58      	it	pl
 80078f6:	6962      	ldrpl	r2, [r4, #20]
 80078f8:	60a2      	str	r2, [r4, #8]
 80078fa:	e7f4      	b.n	80078e6 <__swsetup_r+0x8e>
 80078fc:	2000      	movs	r0, #0
 80078fe:	e7f7      	b.n	80078f0 <__swsetup_r+0x98>
 8007900:	2000001c 	.word	0x2000001c

08007904 <_raise_r>:
 8007904:	291f      	cmp	r1, #31
 8007906:	b538      	push	{r3, r4, r5, lr}
 8007908:	4605      	mov	r5, r0
 800790a:	460c      	mov	r4, r1
 800790c:	d904      	bls.n	8007918 <_raise_r+0x14>
 800790e:	2316      	movs	r3, #22
 8007910:	6003      	str	r3, [r0, #0]
 8007912:	f04f 30ff 	mov.w	r0, #4294967295
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800791a:	b112      	cbz	r2, 8007922 <_raise_r+0x1e>
 800791c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007920:	b94b      	cbnz	r3, 8007936 <_raise_r+0x32>
 8007922:	4628      	mov	r0, r5
 8007924:	f000 f830 	bl	8007988 <_getpid_r>
 8007928:	4622      	mov	r2, r4
 800792a:	4601      	mov	r1, r0
 800792c:	4628      	mov	r0, r5
 800792e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007932:	f000 b817 	b.w	8007964 <_kill_r>
 8007936:	2b01      	cmp	r3, #1
 8007938:	d00a      	beq.n	8007950 <_raise_r+0x4c>
 800793a:	1c59      	adds	r1, r3, #1
 800793c:	d103      	bne.n	8007946 <_raise_r+0x42>
 800793e:	2316      	movs	r3, #22
 8007940:	6003      	str	r3, [r0, #0]
 8007942:	2001      	movs	r0, #1
 8007944:	e7e7      	b.n	8007916 <_raise_r+0x12>
 8007946:	2100      	movs	r1, #0
 8007948:	4620      	mov	r0, r4
 800794a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800794e:	4798      	blx	r3
 8007950:	2000      	movs	r0, #0
 8007952:	e7e0      	b.n	8007916 <_raise_r+0x12>

08007954 <raise>:
 8007954:	4b02      	ldr	r3, [pc, #8]	@ (8007960 <raise+0xc>)
 8007956:	4601      	mov	r1, r0
 8007958:	6818      	ldr	r0, [r3, #0]
 800795a:	f7ff bfd3 	b.w	8007904 <_raise_r>
 800795e:	bf00      	nop
 8007960:	2000001c 	.word	0x2000001c

08007964 <_kill_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	2300      	movs	r3, #0
 8007968:	4d06      	ldr	r5, [pc, #24]	@ (8007984 <_kill_r+0x20>)
 800796a:	4604      	mov	r4, r0
 800796c:	4608      	mov	r0, r1
 800796e:	4611      	mov	r1, r2
 8007970:	602b      	str	r3, [r5, #0]
 8007972:	f7fa fc48 	bl	8002206 <_kill>
 8007976:	1c43      	adds	r3, r0, #1
 8007978:	d102      	bne.n	8007980 <_kill_r+0x1c>
 800797a:	682b      	ldr	r3, [r5, #0]
 800797c:	b103      	cbz	r3, 8007980 <_kill_r+0x1c>
 800797e:	6023      	str	r3, [r4, #0]
 8007980:	bd38      	pop	{r3, r4, r5, pc}
 8007982:	bf00      	nop
 8007984:	200004c0 	.word	0x200004c0

08007988 <_getpid_r>:
 8007988:	f7fa bc36 	b.w	80021f8 <_getpid>

0800798c <__swhatbuf_r>:
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	460c      	mov	r4, r1
 8007990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007994:	4615      	mov	r5, r2
 8007996:	2900      	cmp	r1, #0
 8007998:	461e      	mov	r6, r3
 800799a:	b096      	sub	sp, #88	@ 0x58
 800799c:	da0c      	bge.n	80079b8 <__swhatbuf_r+0x2c>
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	2100      	movs	r1, #0
 80079a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80079a6:	bf14      	ite	ne
 80079a8:	2340      	movne	r3, #64	@ 0x40
 80079aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80079ae:	2000      	movs	r0, #0
 80079b0:	6031      	str	r1, [r6, #0]
 80079b2:	602b      	str	r3, [r5, #0]
 80079b4:	b016      	add	sp, #88	@ 0x58
 80079b6:	bd70      	pop	{r4, r5, r6, pc}
 80079b8:	466a      	mov	r2, sp
 80079ba:	f000 f849 	bl	8007a50 <_fstat_r>
 80079be:	2800      	cmp	r0, #0
 80079c0:	dbed      	blt.n	800799e <__swhatbuf_r+0x12>
 80079c2:	9901      	ldr	r1, [sp, #4]
 80079c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079cc:	4259      	negs	r1, r3
 80079ce:	4159      	adcs	r1, r3
 80079d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079d4:	e7eb      	b.n	80079ae <__swhatbuf_r+0x22>

080079d6 <__smakebuf_r>:
 80079d6:	898b      	ldrh	r3, [r1, #12]
 80079d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079da:	079d      	lsls	r5, r3, #30
 80079dc:	4606      	mov	r6, r0
 80079de:	460c      	mov	r4, r1
 80079e0:	d507      	bpl.n	80079f2 <__smakebuf_r+0x1c>
 80079e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079e6:	6023      	str	r3, [r4, #0]
 80079e8:	6123      	str	r3, [r4, #16]
 80079ea:	2301      	movs	r3, #1
 80079ec:	6163      	str	r3, [r4, #20]
 80079ee:	b003      	add	sp, #12
 80079f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079f2:	466a      	mov	r2, sp
 80079f4:	ab01      	add	r3, sp, #4
 80079f6:	f7ff ffc9 	bl	800798c <__swhatbuf_r>
 80079fa:	9f00      	ldr	r7, [sp, #0]
 80079fc:	4605      	mov	r5, r0
 80079fe:	4639      	mov	r1, r7
 8007a00:	4630      	mov	r0, r6
 8007a02:	f7fe fec7 	bl	8006794 <_malloc_r>
 8007a06:	b948      	cbnz	r0, 8007a1c <__smakebuf_r+0x46>
 8007a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a0c:	059a      	lsls	r2, r3, #22
 8007a0e:	d4ee      	bmi.n	80079ee <__smakebuf_r+0x18>
 8007a10:	f023 0303 	bic.w	r3, r3, #3
 8007a14:	f043 0302 	orr.w	r3, r3, #2
 8007a18:	81a3      	strh	r3, [r4, #12]
 8007a1a:	e7e2      	b.n	80079e2 <__smakebuf_r+0xc>
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a26:	81a3      	strh	r3, [r4, #12]
 8007a28:	9b01      	ldr	r3, [sp, #4]
 8007a2a:	6020      	str	r0, [r4, #0]
 8007a2c:	b15b      	cbz	r3, 8007a46 <__smakebuf_r+0x70>
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a34:	f000 f81e 	bl	8007a74 <_isatty_r>
 8007a38:	b128      	cbz	r0, 8007a46 <__smakebuf_r+0x70>
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	f023 0303 	bic.w	r3, r3, #3
 8007a40:	f043 0301 	orr.w	r3, r3, #1
 8007a44:	81a3      	strh	r3, [r4, #12]
 8007a46:	89a3      	ldrh	r3, [r4, #12]
 8007a48:	431d      	orrs	r5, r3
 8007a4a:	81a5      	strh	r5, [r4, #12]
 8007a4c:	e7cf      	b.n	80079ee <__smakebuf_r+0x18>
	...

08007a50 <_fstat_r>:
 8007a50:	b538      	push	{r3, r4, r5, lr}
 8007a52:	2300      	movs	r3, #0
 8007a54:	4d06      	ldr	r5, [pc, #24]	@ (8007a70 <_fstat_r+0x20>)
 8007a56:	4604      	mov	r4, r0
 8007a58:	4608      	mov	r0, r1
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	602b      	str	r3, [r5, #0]
 8007a5e:	f7fa fc31 	bl	80022c4 <_fstat>
 8007a62:	1c43      	adds	r3, r0, #1
 8007a64:	d102      	bne.n	8007a6c <_fstat_r+0x1c>
 8007a66:	682b      	ldr	r3, [r5, #0]
 8007a68:	b103      	cbz	r3, 8007a6c <_fstat_r+0x1c>
 8007a6a:	6023      	str	r3, [r4, #0]
 8007a6c:	bd38      	pop	{r3, r4, r5, pc}
 8007a6e:	bf00      	nop
 8007a70:	200004c0 	.word	0x200004c0

08007a74 <_isatty_r>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	2300      	movs	r3, #0
 8007a78:	4d05      	ldr	r5, [pc, #20]	@ (8007a90 <_isatty_r+0x1c>)
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	602b      	str	r3, [r5, #0]
 8007a80:	f7fa fc2f 	bl	80022e2 <_isatty>
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	d102      	bne.n	8007a8e <_isatty_r+0x1a>
 8007a88:	682b      	ldr	r3, [r5, #0]
 8007a8a:	b103      	cbz	r3, 8007a8e <_isatty_r+0x1a>
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	bd38      	pop	{r3, r4, r5, pc}
 8007a90:	200004c0 	.word	0x200004c0

08007a94 <_init>:
 8007a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a96:	bf00      	nop
 8007a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a9a:	bc08      	pop	{r3}
 8007a9c:	469e      	mov	lr, r3
 8007a9e:	4770      	bx	lr

08007aa0 <_fini>:
 8007aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa2:	bf00      	nop
 8007aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aa6:	bc08      	pop	{r3}
 8007aa8:	469e      	mov	lr, r3
 8007aaa:	4770      	bx	lr
